<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单例模式</title>
      <link href="/post/f1601c3e.html"/>
      <url>/post/f1601c3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、模式介绍"><a href="#1、模式介绍" class="headerlink" title="1、模式介绍"></a>1、模式介绍</h1><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于<strong>创建型模式</strong>，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><p><strong>注意：</strong></p><ul><li>单例类只能有一个实例</li><li>单例类必须自己创建自己的唯一实例</li><li>单例类必须给所有其他对象提供这一实例</li></ul><p>单例模式有八种写法：</p><ol><li>饿汉式(静态常量)</li><li>饿汉式（静态代码块）</li><li>懒汉式(线程不安全)</li><li>懒汉式(线程安全，同步方法)</li><li>懒汉式(线程不安全，同步代码块)</li><li>双重检查</li><li>静态内部类</li><li>枚举</li></ol><h1 id="2、饿汉式-静态常量"><a href="#2、饿汉式-静态常量" class="headerlink" title="2、饿汉式(静态常量)"></a>2、饿汉式(静态常量)</h1><p>我们将创建一个 <em>SingleObject</em> 类。<em>SingleObject</em> 类有它的私有构造函数和本身的一个静态实例。</p><p><em>SingleObject</em> 类提供了一个静态方法，供外界获取它的静态实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Type1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;饿汉式(静态常量)&quot;</span>);</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance1</span> <span class="operator">=</span> SingleObject.getInstance();</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance2</span> <span class="operator">=</span> SingleObject.getInstance();</span><br><span class="line">        System.out.println(instance1 == instance1);</span><br><span class="line">        System.out.println(<span class="string">&quot;instance1 hashCode:&quot;</span> + instance1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;instance2 hashCode:&quot;</span> + instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleObject</span> &#123;</span><br><span class="line">    <span class="comment">//私有构造方法，防止从外部new对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleObject</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本类内部创建对象实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SingleObject</span> <span class="variable">singleObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleObject</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供静态方法供外部使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singleObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleObject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;饿汉式(静态常量)&quot;</span>);</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance1</span> <span class="operator">=</span> getInstance();</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance2</span> <span class="operator">=</span> getInstance();</span><br><span class="line">      <span class="comment">//比对地址值是否相同</span></span><br><span class="line">        System.out.println(instance1 == instance1);</span><br><span class="line">        <span class="comment">//打印hashCode</span></span><br><span class="line">        System.out.println(<span class="string">&quot;instance1 hashCode:&quot;</span> + instance1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;instance2 hashCode:&quot;</span> + instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法，防止从外部new对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleObject</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本类内部创建对象实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SingleObject</span> <span class="variable">singleObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleObject</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供静态方法供外部使用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleObject <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singleObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经测试instance1与instance2的地址值、hashCode值完全相同。</p><blockquote><p>优缺点说明</p></blockquote><p><strong>优点：</strong>这种写法比较简单，就是在类装载的时候就完成实例化，避免了线程同步问题。</p><p><strong>缺点：</strong>在类装载的时候就完成实例化，没有达到<strong>懒加载</strong>的效果。如果从始至终从未使用过这个实例，则会造成内存浪费。</p><p>这种方式基于classloader机制避免了多线程的同步问题，不过，instance在类状态时就实例化，在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式导致装载，这时候初始化instance就没有达到<strong>懒加载</strong>的效果</p><p><strong>结论：</strong>这种单例模式可用，可能造成内存泄漏</p><h1 id="3、饿汉式（静态代码块）"><a href="#3、饿汉式（静态代码块）" class="headerlink" title="3、饿汉式（静态代码块）"></a>3、饿汉式（静态代码块）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Type2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;饿汉式（静态代码块）&quot;</span>);</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance1</span> <span class="operator">=</span> SingleObject.getInstance();</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance2</span> <span class="operator">=</span> SingleObject.getInstance();</span><br><span class="line">        System.out.println(instance1 == instance1);</span><br><span class="line">        System.out.println(<span class="string">&quot;instance1 hashCode:&quot;</span> + instance1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;instance2 hashCode:&quot;</span> + instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleObject</span> &#123;</span><br><span class="line">    <span class="comment">//私有化构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleObject</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本类内部创建对象实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingleObject singleObject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//在静态代码块中，创建单例对象</span></span><br><span class="line">        singleObject = <span class="keyword">new</span> <span class="title class_">SingleObject</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个公有的静态方法，返回实例对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> singleObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>优缺点说明</p></blockquote><p>这种方式和上面的方法其实类似，只不过将实例化过程放在了静态代码块中，也是在类装载的时候，就执行</p><p>静态代码块中的代码。初始化类的实例。优缺点和上面一样的。</p><p><strong>结论：</strong>这种单例模式可用，但是可能造成内存浪费。</p><h1 id="4、懒汉式-线程不安全"><a href="#4、懒汉式-线程不安全" class="headerlink" title="4、懒汉式(线程不安全)"></a>4、懒汉式(线程不安全)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Type3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;懒汉式(线程不安全)&quot;</span>);</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance1</span> <span class="operator">=</span> SingleObject.getInstance();</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance2</span> <span class="operator">=</span> SingleObject.getInstance();</span><br><span class="line">        System.out.println(instance1 == instance1);</span><br><span class="line">        System.out.println(<span class="string">&quot;instance1 hashCode:&quot;</span> + instance1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;instance2 hashCode:&quot;</span> + instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleObject</span> &#123;</span><br><span class="line">    <span class="comment">//私有化构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleObject</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本类内部创建对象实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleObject singleObject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法，当使用到该方法时，才去创建 instance</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleObject == <span class="literal">null</span>) &#123;</span><br><span class="line">            singleObject = <span class="keyword">new</span> <span class="title class_">SingleObject</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>优缺点说明</p></blockquote><p><strong>优点：</strong>起到了<strong>懒加载</strong>的效果，但是只能在单线程下使用。</p><p><strong>缺点：</strong>如果在多线程下使用，一个线程进入了if判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式。</p><p><strong>结论：</strong>在实际开发中，不要使用这种方式。</p><h1 id="5、懒汉式-线程安全，同步方法"><a href="#5、懒汉式-线程安全，同步方法" class="headerlink" title="5、懒汉式(线程安全，同步方法)"></a>5、懒汉式(线程安全，同步方法)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Type4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;懒汉式(线程安全，同步方法)&quot;</span>);</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance1</span> <span class="operator">=</span> SingleObject.getInstance();</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance2</span> <span class="operator">=</span> SingleObject.getInstance();</span><br><span class="line">        System.out.println(instance1 == instance1);</span><br><span class="line">        System.out.println(<span class="string">&quot;instance1 hashCode:&quot;</span> + instance1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;instance2 hashCode:&quot;</span> + instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleObject</span> &#123;</span><br><span class="line">    <span class="comment">//私有化构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleObject</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本类内部创建对象实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleObject singleObject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用同步方法锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingleObject <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleObject == <span class="literal">null</span>) &#123;</span><br><span class="line">            singleObject = <span class="keyword">new</span> <span class="title class_">SingleObject</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>优缺点说明</p></blockquote><p><strong>优点：</strong>解决了线程不安全问题。</p><p><strong>缺点:</strong> 效率太低了，每个线程都在想获得类实例的时候，执行getInstace()方法都要进行同步。其实这个方法只执行一次实例化代码就够了，后面的想要获得该类实例，直接return就行了。方法进行同步效率太低。</p><p><strong>结论：</strong>在实际开发中，不推荐使用这种方式。</p><h1 id="6、懒汉式-线程不安全，同步代码块"><a href="#6、懒汉式-线程不安全，同步代码块" class="headerlink" title="6、懒汉式(线程不安全，同步代码块)"></a>6、懒汉式(线程不安全，同步代码块)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Type5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;懒汉式(线程不安全，同步代码块)&quot;</span>);</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance1</span> <span class="operator">=</span> SingleObject.getInstance();</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance2</span> <span class="operator">=</span> SingleObject.getInstance();</span><br><span class="line">        System.out.println(instance1 == instance1);</span><br><span class="line">        System.out.println(<span class="string">&quot;instance1 hashCode:&quot;</span> + instance1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;instance2 hashCode:&quot;</span> + instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleObject</span> &#123;</span><br><span class="line">    <span class="comment">//私有化构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleObject</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本类内部创建对象实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleObject singleObject;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingleObject <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleObject == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingleObject.class) &#123;</span><br><span class="line">                singleObject = <span class="keyword">new</span> <span class="title class_">SingleObject</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>优缺点说明</p></blockquote><p>这种方式，本意是要对上面实现方式的改进(缩小同步的范围)。但是这种同步并不能起到线程同步的作用。跟第3种方式遇到的情形一样，假如一个线程进入了if (singleton == null) 判断语句块，还未来得及往下执行， 另一个线程也通过了这个判断语句，这时便会产生多个实例。</p><p><strong>结论：</strong>在实际开发中，不能使用这种方式</p><h1 id="7、双重检查"><a href="#7、双重检查" class="headerlink" title="7、双重检查"></a>7、双重检查</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Type6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;双重检查&quot;</span>);</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance1</span> <span class="operator">=</span> SingleObject.getInstance();</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance2</span> <span class="operator">=</span> SingleObject.getInstance();</span><br><span class="line">        System.out.println(instance1 == instance1);</span><br><span class="line">        System.out.println(<span class="string">&quot;instance1 hashCode:&quot;</span> + instance1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;instance2 hashCode:&quot;</span> + instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleObject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleObject</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//本类内部创建对象实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingleObject singleObject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法，加入双重检查代码，解决线程安全问题, 同时解决懒加载问题</span></span><br><span class="line">    <span class="comment">//同时保证了效率, 推荐使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingleObject <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (singleObject == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingleObject.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singleObject == <span class="literal">null</span>) &#123;</span><br><span class="line">                    singleObject = <span class="keyword">new</span> <span class="title class_">SingleObject</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>优缺点说明</p></blockquote><p>Double-Check概念是多线程开发中经常要用到的。如代码中所示，我们进行了两次if(singleObject == null)检查，这样就可以保证线程安全。</p><p>这样，实例化代码只需要一次，后面再次访问时,判断if(singleObject == null)直接return实例化对象，也避免了反复进行方法同步。</p><p><strong>优点：</strong>线程安全、效率较高。</p><p><strong>结论：</strong>在实际开发中，推荐使用这种单例模式。</p><h1 id="8、静态内部类"><a href="#8、静态内部类" class="headerlink" title="8、静态内部类"></a>8、静态内部类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Type7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态内部类&quot;</span>);</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance1</span> <span class="operator">=</span> SingleObject.getInstance();</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance2</span> <span class="operator">=</span> SingleObject.getInstance();</span><br><span class="line">        System.out.println(instance1 == instance1);</span><br><span class="line">        System.out.println(<span class="string">&quot;instance1 hashCode:&quot;</span> + instance1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;instance2 hashCode:&quot;</span> + instance2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleObject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleObject</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个静态内部类,该类中有一个静态属性</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingleObjectInstance</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SingleObject</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleObject</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法，直接返回SingleObjectInstance.INSTANCE</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingleObjectInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>优缺点说明</p></blockquote><p>这种方式采用了类装载机制来保证初始化实例时只有一个线程。</p><p>静态内部类方式在SingleObject类被加载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载SingleObjectInstance类，从而完成SingleObject的实例化。</p><p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮助我们保证了线程的安全性，在对类进行初始化时，别的线程是无法进入的。</p><p><strong>优点：</strong>避免了线程不安全，利用静态内部类特点实现延迟加载、效率高。</p><p><strong>结论：</strong>推荐使用。</p><h1 id="9、枚举"><a href="#9、枚举" class="headerlink" title="9、枚举"></a>9、枚举</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">type8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;枚举&quot;</span>);</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance1</span> <span class="operator">=</span> SingleObject.INSTANCE;</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">instance2</span> <span class="operator">=</span> SingleObject.INSTANCE;</span><br><span class="line">        System.out.println(instance1 == instance1);</span><br><span class="line">        System.out.println(<span class="string">&quot;instance1 hashCode:&quot;</span> + instance1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;instance2 hashCode:&quot;</span> + instance2.hashCode());</span><br><span class="line">        instance1.whateverMethod();</span><br><span class="line">        instance2.whateverMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用枚举，可以实现单例, 推荐</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">SingleObject</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">whateverMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>优缺点说明</p></blockquote><p>这种借助JDK1.5中添加的枚举来实现单例模式。</p><p>不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</p><p><strong>结论：</strong>推荐使用。</p><h1 id="10、破坏单例模式的两种方式"><a href="#10、破坏单例模式的两种方式" class="headerlink" title="10、破坏单例模式的两种方式"></a>10、破坏单例模式的两种方式</h1><blockquote><p>反射</p></blockquote><p>通过Java反射机制可以获取类的私有构造函数并创建实例，即使构造函数是私有的。因此，可以通过反射来创建多个单例实例，破坏单例模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionBreak</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取SingleObject的字节码对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> SingleObject.class;</span><br><span class="line">        <span class="comment">//获取SingleObject类的私有无参构造方法对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">        <span class="comment">//取消访问检查</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//创建SingleObject类的对象s1</span></span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">s1</span> <span class="operator">=</span> (SingleObject) constructor.newInstance();</span><br><span class="line">        <span class="comment">//创建SingleObject类的对象s2</span></span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">s2</span> <span class="operator">=</span> (SingleObject) constructor.newInstance();</span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleObject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造方法、防止外部创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleObject</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态内部类,该类中有一个静态属性</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingleObjectInstance</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SingleObject</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleObject</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供静态公开方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingleObjectInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>序列化、反序列化</p></blockquote><p>当一个单例实例被序列化并在之后反序列化时，会重新创建一个新的实例。因此，如果单例实现类实现了<code>Serializable</code>接口并且没有实现<code>readResolve()</code>方法，那么序列化和反序列化操作可能会破坏单例模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">serializableBreak</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//将对象写入文件</span></span><br><span class="line">        writeObj();</span><br><span class="line">        <span class="comment">//读取文件中的对象</span></span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">s1</span> <span class="operator">=</span> readObj();</span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">s2</span> <span class="operator">=</span> readObj();</span><br><span class="line">        System.out.println(s1 == s2);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将对象写入到文件中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeObj</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/Users/hck/Desktop/1.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//将对象写入到文件</span></span><br><span class="line">        out.writeObject(SingleObject.getInstance());</span><br><span class="line">        <span class="comment">//关闭对象输出流</span></span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取文件中的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title function_">readObj</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建对象输入流</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/hck/Desktop/1.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//读取文件中的对象</span></span><br><span class="line">        <span class="type">SingleObject</span> <span class="variable">obj</span> <span class="operator">=</span> (SingleObject) ois.readObject();</span><br><span class="line">        <span class="comment">//关闭对象输入流</span></span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleObject</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造方法、防止外部创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleObject</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态内部类,该类中有一个静态属性</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingleObjectInstance</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SingleObject</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleObject</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供静态公开方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingleObject.SingleObjectInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何解决那？</p><p>如需要让我们的单例类添加<code>readResolve()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingleObject</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造方法、防止外部创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleObject</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态内部类,该类中有一个静态属性</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingleObjectInstance</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SingleObject</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleObject</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供静态公开方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingleObject.SingleObjectInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加readResolve()方法 解决序列化反序列化破解单例模式</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingleObjectInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次测试，结果为true</p><h1 id="11、单例模式在JDK-应用的源码分析"><a href="#11、单例模式在JDK-应用的源码分析" class="headerlink" title="11、单例模式在JDK 应用的源码分析"></a>11、单例模式在JDK 应用的源码分析</h1><p>JDK中，java.lang.Runtime就是经典的单例模式(饿汉式)</p><p><img src="https://images.hckun.cn/image-20230321001450090.png" alt="image-20230321001450090"></p><p>Runtime类的简单用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RuntimeUse</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取Runtime类对象</span></span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回 Java 虚拟机中的内存总量</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">memory</span> <span class="operator">=</span> runtime.totalMemory();</span><br><span class="line">        System.out.println(memory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Java 虚拟机试图使用的最大内存量</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">maxMemory</span> <span class="operator">=</span> runtime.maxMemory();</span><br><span class="line">        System.out.println(maxMemory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个新的进程执行指定的字符串命令，返回进程对象</span></span><br><span class="line">        <span class="type">Process</span> <span class="variable">exec</span> <span class="operator">=</span> runtime.exec(<span class="string">&quot;ifconfig&quot;</span>);</span><br><span class="line">        <span class="comment">//获取命令执行后的结果，通过输入流获取</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> exec.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] arr = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> is.read(arr);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(arr, <span class="number">0</span>, b, StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12、单例模式注意事项和细节"><a href="#12、单例模式注意事项和细节" class="headerlink" title="12、单例模式注意事项和细节"></a>12、单例模式注意事项和细节</h1><ol><li>单例模式保证了 系统内存中该类只存在一个对象，节省了系统资源，对于一些需 要频繁创建销毁的对象，使用单例模式可以提高系统性能。</li><li>当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new。</li><li>单例模式使用的场景：需要频繁的进行创建和销毁的对象、 创建对象时耗时过多或 耗费资源过多(即：重量级对象)，但又经常用到的对象、工具类 对象、频繁访问数 据库或文件的对象(比如数据源、session工厂等)。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式法则与UML类图</title>
      <link href="/post/14fc7946.html"/>
      <url>/post/14fc7946.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、设计模式优点"><a href="#1、设计模式优点" class="headerlink" title="1、设计模式优点"></a>1、设计模式优点</h1><p>​    编写软件过程中，程序员面临着来自 耦合性，内聚性以及可维 护性，可扩展性，重用性，灵活性 等多方面的挑战，设计模 式是为了让程序(软件)，具备:</p><ul><li>代码复用性 (即：相同功能的代码，不用多次编写)</li><li>可读性 (即：编程规范性, 便于其他程序员的阅读和理解)</li><li>可扩展性 (即：当需要增加新的功能时，非常的方便，称为可维护)</li><li>可靠性 (即：当我们增加新的功能后，对原来的功能没有影响)</li><li>使程序呈现高内聚，低耦合的特性</li></ul><h1 id="2、设计模式七大法则"><a href="#2、设计模式七大法则" class="headerlink" title="2、设计模式七大法则"></a>2、设计模式七大法则</h1><p>设计模式原则，其实就是程序员在编程时，应当遵守的原则， 也是各种设计模式的基础(即：设计模式为什么这样设计的依据) 设计模式常用的七大原则有:</p><ul><li>单一职责原则</li><li>接口隔离原则</li><li>依赖倒转原则</li><li>里氏替换原则</li><li>开闭原则</li><li>迪米特法则</li><li>合成复用法则</li></ul><h2 id="2-1、单一职责"><a href="#2-1、单一职责" class="headerlink" title="2.1、单一职责"></a>2.1、单一职责</h2><blockquote><p>基本介绍</p></blockquote><p>对类来说的，即一个类应该只负责一项职责。如类A负责两个不 同职责：职责1，职责2。 当职责1需求变更而改变A时，可能造成职责2执行错误，所以 需要将类A的粒度分解为 A1，A2。</p><blockquote><p>应用实例</p></blockquote><p>以交通工具案例讲解。</p><p><strong>方案一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Basic1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Vehicle</span> <span class="variable">vehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vehicle</span>();</span><br><span class="line">        vehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">        vehicle.run(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        vehicle.run(<span class="string">&quot;轮船&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//交通工具类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot;在公路上跑......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在方案一 的run方法中，违反了<strong>单一职责原则</strong>,把全部的交通工具都交给了run方法。</p><p>解决方案：根据交通工具运行方法不同，分解成不同类。</p><p><strong>方案二：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Basic2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CarVehicle</span> <span class="variable">carVehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CarVehicle</span>();</span><br><span class="line">        carVehicle.run(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">        <span class="type">FlyVehicle</span> <span class="variable">flyVehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FlyVehicle</span>();</span><br><span class="line">        flyVehicle.run(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        <span class="type">SeaVehicle</span> <span class="variable">seaVehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SeaVehicle</span>();</span><br><span class="line">        seaVehicle.run(<span class="string">&quot;轮船&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//汽车</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarVehicle</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot;在公路上跑......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//飞机</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlyVehicle</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot;在天上跑......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//轮船</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SeaVehicle</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot;在海上跑......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遵守<strong>单一职责原则</strong>，但是这样做的改动很大，将类分解，同时需要修改客户端。</p><p>解决方案：直接修改Vehicle 类，增加三个不同交通路类型的方法，改动的代码会相对比较少。</p><p><strong>方案三：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Basic3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Vehicle3</span> <span class="variable">vehicle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vehicle3</span>();</span><br><span class="line">        vehicle.run1(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line">        vehicle.run2(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        vehicle.run3(<span class="string">&quot;轮船&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交通工具类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run1</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot;在公路上跑......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run2</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot;在天上跑......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run3</span><span class="params">(String vehicle)</span> &#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">&quot;在海上跑......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种修改方法没有对原来的类做大的修改，只是增加方法。</p><p>这里虽然没有在类这个级别上遵守单一职责原则，但是在方法级别上，仍然是遵守<strong>单一职责</strong>。</p><blockquote><p>注意事项和细节</p></blockquote><ul><li>降低类的复杂度，一个类只负责一项职责</li><li>提高类的可读性，可维护性</li><li>降低变更引起的风险</li><li>通常情况下，我们应当遵守单一职责原则，只有逻辑足够简 单，才可以在代码级别违反单一职责原则；只有类中方法数 量足够少，可以在方法级别保持单一职责原则</li></ul><h2 id="2-2、接口隔离原则"><a href="#2-2、接口隔离原则" class="headerlink" title="2.2、接口隔离原则"></a>2.2、接口隔离原则</h2><blockquote><p>基本介绍</p></blockquote><p>客户端不应该依赖它不需要的接 口，即一个类对另一个类的依赖 应该建立在最小的接口上。</p><p>例如下面一张类图 ：</p><p><img src="https://images.hckun.cn/image-20230223221643342.png" alt="image-20230223221643342"></p><p>类A通过接口Interface1依赖类B，类C通过 接口Interface1依赖类D，如果接口 Interface1对于类A和类C来说不是最小接口， 那么类B和类D必须去实现他们不需要的方法。</p><p>按<strong>接口隔离原则</strong>应当这样处理： 将接口Interface1拆分为独立的几个接口， 类A和类C分别与他们需要的接口建立依赖 关系。也就是采用<strong>接口隔离原则</strong>。</p><blockquote><p>应用案例</p></blockquote><p>类A通过接口Interface1依赖类B，类C通过接口Interface1依赖类D</p><p><strong>没有使用接口隔离代码原则代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">segregation1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.depend1(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        a.depend2(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        a.depend3(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        c.depend1(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend4(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend5(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operator1</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operator2</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operator3</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operator4</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operator5</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类C</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operator1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B实现了operator1...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operator2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B实现了operator2...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operator3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B实现了operator3...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operator4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B实现了operator4...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operator5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B实现了operator5...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类D</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operator1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D实现了operator1...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operator2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D实现了operator2...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operator3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D实现了operator3...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operator4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D实现了operator4...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operator5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D实现了operator5...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类A依赖于类B，但只使用其中的1、2、3方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 interface1)</span> &#123;</span><br><span class="line">        interface1.operator1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend2</span><span class="params">(Interface1 interface1)</span> &#123;</span><br><span class="line">        interface1.operator2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend3</span><span class="params">(Interface1 interface1)</span> &#123;</span><br><span class="line">        interface1.operator3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类B依赖于类D，但只使用其中的1、4、5方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 interface1)</span> &#123;</span><br><span class="line">        interface1.operator1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend4</span><span class="params">(Interface1 interface1)</span> &#123;</span><br><span class="line">        interface1.operator4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend5</span><span class="params">(Interface1 interface1)</span> &#123;</span><br><span class="line">        interface1.operator5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>传统方法的问题和使用接口隔离原则改进</strong></p><p>改进后的类图：</p><p><img src="https://images.hckun.cn/image-20230223223704393.png" alt="image-20230223223704393"></p><ul><li>类A通过接口Interface1依赖类B，类C通过接口Interface1依 赖类D，如果接口Interface1对于类A和类C来说不是最小接口，那么类B和类D必须 去实现他们不需要的方法。</li><li>将接口Interface1拆分为独立的几个接口，类A和类C分别与他 们需要的接口建立依赖关系。也就是采用接口隔离原则。</li><li>接口Interface1中出现的方法，根据实际情况拆分为三个接口。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">segregation2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">//A类通过接口去依赖B类</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.depend1(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        a.depend2(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">        a.depend3(<span class="keyword">new</span> <span class="title class_">B</span>());</span><br><span class="line">      </span><br><span class="line">     <span class="comment">//C类通过接口去依赖D类</span></span><br><span class="line">        <span class="type">C</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">        c.depend1(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend4(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">        c.depend5(<span class="keyword">new</span> <span class="title class_">D</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Interface1</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interface1</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operator1</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Interface2</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interface2</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operator2</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operator3</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Interface3</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Interface3</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operator4</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">operator5</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span>, Interface2 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operator1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B实现了operator1...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operator2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B实现了operator2...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operator3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B实现了operator3...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">Interface1</span>, Interface3 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operator1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D实现了operator1...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operator4</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D实现了operator4...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operator5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;D实现了operator5...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 interface1)</span> &#123;</span><br><span class="line">        interface1.operator1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend2</span><span class="params">(Interface2 interface2)</span> &#123;</span><br><span class="line">        interface2.operator2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend3</span><span class="params">(Interface2 interface2)</span> &#123;</span><br><span class="line">        interface2.operator2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend1</span><span class="params">(Interface1 interface1)</span> &#123;</span><br><span class="line">        interface1.operator1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend4</span><span class="params">(Interface3 interface3)</span> &#123;</span><br><span class="line">        interface3.operator4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depend5</span><span class="params">(Interface3 interface3)</span> &#123;</span><br><span class="line">        interface3.operator5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3、依赖倒转原则"><a href="#2-3、依赖倒转原则" class="headerlink" title="2.3、依赖倒转原则"></a>2.3、依赖倒转原则</h2><blockquote><p>基本介绍</p></blockquote><p>依赖倒转原则是指：</p><ul><li>高层模块不应该依赖低层模块，二者都应该依赖其抽象</li><li>抽象不应该依赖细节，细节应该依赖抽象</li><li>依赖倒转(倒置)的中心思想是面向接口编程</li><li>依赖倒转原则是基于这样的设计理念：相对于细节的多变性， 抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定 的多。在java中，抽象 指的是接口或抽象类，细节就是具体的实现类</li><li>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的 操作，把展现细节的 任务交给他们的实现类去完成</li></ul><blockquote><p>引用案例</p></blockquote><p>完成Person 接收消息 的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inversion1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.getMsg(<span class="keyword">new</span> <span class="title class_">Email</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Email类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Email</span> &#123;</span><br><span class="line">    <span class="comment">//得到信息</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Email 来信息了......&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Person类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//接收消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMsg</span><span class="params">(Email email)</span> &#123;</span><br><span class="line">        System.out.println(email.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述写法：</p><ul><li>简单，比较容易想到</li><li>如果我们获取的对象是 微信，短信等等，则需要新增微信类，同时Perons也要增加相应的接收方法</li></ul><p>不易扩展。</p><p>如何解决那？</p><p>引入一个抽象的接口IReceiver, 表示接收者, 这样Person类与接口IReceiver发生依赖</p><p> 因为Email, WeiXin 等等属于接收的范围，他们各自实现IReceiver 接口就可以, 这样我们就符合<strong>依赖倒转原则</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inversion2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.getMsg(<span class="keyword">new</span> <span class="title class_">Email</span>());</span><br><span class="line">        person.getMsg(<span class="keyword">new</span> <span class="title class_">WxXi</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IReceiver</span> &#123;</span><br><span class="line">    String <span class="title function_">getInfo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Email</span> <span class="keyword">implements</span> <span class="title class_">IReceiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Email 来信息了......&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WxXi</span> <span class="keyword">implements</span> <span class="title class_">IReceiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;WxXi 来信息了......&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//接收消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMsg</span><span class="params">(IReceiver receiver)</span> &#123;</span><br><span class="line">        System.out.println(receiver.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>依赖关系传递的三种方式</p></blockquote><ol><li>接口传递</li><li>构造方法传递</li><li>setter方式传递</li></ol><p><strong>接口传递:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inversion3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OpenAndClose</span> <span class="variable">openAndClose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenAndClose</span>();</span><br><span class="line">        openAndClose.open(<span class="keyword">new</span> <span class="title class_">ChangHong</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1： 通过接口传递实现依赖</span></span><br><span class="line"><span class="comment">//定义开关接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line">    <span class="comment">//抽象方法,接收接口</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(ITV tv)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ITV接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ITV</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChangHong</span> <span class="keyword">implements</span> <span class="title class_">ITV</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;长虹电视机打开......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAndClose</span> <span class="keyword">implements</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(ITV tv)</span> &#123;</span><br><span class="line">        tv.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造方法传递:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inversion3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OpenAndClose</span> <span class="variable">openAndClose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenAndClose</span>(<span class="keyword">new</span> <span class="title class_">ChangHong</span>());</span><br><span class="line">        openAndClose.open();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2： 通过构造方法传递实现依赖</span></span><br><span class="line"><span class="comment">//定义开关接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line">    <span class="comment">//抽象方法,接收接口</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ITV接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ITV</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChangHong</span> <span class="keyword">implements</span> <span class="title class_">ITV</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;长虹电视机打开......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAndClose</span> <span class="keyword">implements</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ITV tv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OpenAndClose</span><span class="params">(ITV tv)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        tv.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>setter方式传递:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inversion3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OpenAndClose</span> <span class="variable">openAndClose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenAndClose</span>();</span><br><span class="line">        openAndClose.setTv(<span class="keyword">new</span> <span class="title class_">ChangHong</span>());</span><br><span class="line">        openAndClose.open();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3： 通过setter方式传递实现依赖</span></span><br><span class="line"><span class="comment">//定义开关接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line">    <span class="comment">//抽象方法,接收接口</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setTv</span><span class="params">(ITV tv)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ITV接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ITV</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChangHong</span> <span class="keyword">implements</span> <span class="title class_">ITV</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;长虹电视机打开......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenAndClose</span> <span class="keyword">implements</span> <span class="title class_">IOpenAndClose</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ITV tv;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        tv.play();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTv</span><span class="params">(ITV tv)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项和细节</p></blockquote><ul><li>低层模块尽量都要有抽象类或接口，或者两者都有，程序稳 定性更好</li><li>变量的声明类型尽量是抽象类或接口, 这样我们的变量引用和 实际对象间，就存在 一个缓冲层，利于程序扩展和优化</li><li>继承时遵循里氏替换原则</li></ul><h2 id="2-4、里氏替换原则"><a href="#2-4、里氏替换原则" class="headerlink" title="2.4、里氏替换原则"></a>2.4、里氏替换原则</h2><p>继承包含这样一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然它不强制要求所有的子类必须遵循这些 契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。    </p><p>继承在给程序设计带来便利的同时，也带来了弊端。比如使用 继承会给程序带来侵入性，程序的可移植性降低，增加对象间的耦合性， 如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有 的子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障。</p><p>在编程中，如何正确的使用继承? =&gt; <strong>里氏替换原则</strong></p><blockquote><p>基本介绍</p></blockquote><ul><li>里氏替换原则(Liskov Substitution Principle)在1988 年，由麻省理工学院的以为姓里的女士提出的。</li><li>如果对每个类型为T1的对象o1，都有类型为T2的对象o2， 使得以T1定义的所有程序 P在所有的对象o1都代换成o2时，程序P的行为没有发生变化， 那么类型T2是类型T1的子类型。<strong>换句话说，所有引用基类的 地方必须能透明地使用其子类的对象</strong>。</li><li>在使用继承时，遵循里氏替换原则，在子类中尽量不要重 写父类的方法。</li></ul><p>里氏替换原则告诉我们，继承实际上让两个类耦合性增强了， 在适当的情况下，可以通过聚合，组合，依赖 来解决问题。</p><blockquote><p>应用案例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Liskov1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span> + a.func1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1-8=&quot;</span> + a.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span> + b.func1(<span class="number">11</span>, <span class="number">3</span>));<span class="comment">//这里本意是求出11-3</span></span><br><span class="line">        System.out.println(<span class="string">&quot;1-8=&quot;</span> + b.func1(<span class="number">1</span>, <span class="number">8</span>));<span class="comment">// 1-8</span></span><br><span class="line">        System.out.println(<span class="string">&quot;11+3+9=&quot;</span> + b.func2(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类A</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回两个数的差</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B类继承了A</span></span><br><span class="line"><span class="comment">//增加了一个新功能：完成两个数相加,然后和9求和</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里，重写了A类的方法, 可能是无意识</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> func1(a, b) + <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>存在的问题：</strong>我们发现原来运行正常的相减功能发生了错误。原因就是类B无 意中重写了父类的方法，造成原有功能出现错误。</p><p>在实际编程 中，我们常常会通过重写父类的方法完成新的功能，这样写起 来虽然简单，但整个继承体系的复用性会比较差。特别是运 行多态比较频繁的时候。</p><p><strong>通用的做法是：</strong>原来的父类和子类都继承一个更通俗的 基类，原有的继承关系去掉， 采用依赖，聚合，组合等关系代替。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Liskov2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span> + a.func1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;1-8=&quot;</span> + a.func1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        <span class="comment">//因为B类不再继承A类，因此调用者，不会再func1是求减法</span></span><br><span class="line">        <span class="comment">//调用完成的功能就会很明确</span></span><br><span class="line">        System.out.println(<span class="string">&quot;11+3=&quot;</span> + b.func1(<span class="number">11</span>, <span class="number">3</span>));<span class="comment">//这里本意是求出11+3</span></span><br><span class="line">        System.out.println(<span class="string">&quot;1+8=&quot;</span> + b.func1(<span class="number">1</span>, <span class="number">8</span>));<span class="comment">// 1+8</span></span><br><span class="line">        System.out.println(<span class="string">&quot;11+3+9=&quot;</span> + b.func2(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用组合仍然可以使用到A类相关方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;11-3=&quot;</span> + b.func3(<span class="number">11</span>, <span class="number">3</span>));<span class="comment">// 这里本意是求出11-3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个更加基础的基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="comment">//把更加基础的方法和成员写到Base类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="comment">// 返回两个数的差</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B类继承了A</span></span><br><span class="line"><span class="comment">// 增加了一个新功能：完成两个数相加,然后和9求和</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="comment">//如果B需要使用A类的方法,使用组合关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里，重写了A类的方法, 可能是无意识</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> func1(a, b) + <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们仍然想使用A的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">func3</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.a.func1(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5、开闭原则"><a href="#2-5、开闭原则" class="headerlink" title="2.5、开闭原则"></a>2.5、开闭原则</h2><blockquote><p>基本原则</p></blockquote><ul><li>开闭原则（Open Closed Principle）是编程中最基础、最 重要的设计原则</li><li>一个软件实体如类，模块和函数应该对扩展开放(对提供方)， 对修改关闭(对使用方)。用抽象构建框架，用实现扩展细节</li><li>当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化</li><li>编程中遵循其它原则，以及使用设计模式的目的就是遵循开闭原则</li></ul><blockquote><p>应用案例</p></blockquote><p>未满足<strong>开闭原则</strong>案例：</p><p>定义一个<code>Shape</code>父类、两个子类<code>Rectangle</code> <code>Circle</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Shape类，基类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">        <span class="type">int</span> m_type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">        Rectangle() &#123;</span><br><span class="line">            <span class="built_in">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">        Circle() &#123;</span><br><span class="line">            <span class="built_in">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>用于绘图的类<code>GraphicEditor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一个用于绘图的类 [使用方]</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">GraphicEditor</span> &#123;</span><br><span class="line">       <span class="comment">//接收Shape对象，然后根据type，来绘制不同的图形</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape s)</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (s.m_type == <span class="number">1</span>) &#123;</span><br><span class="line">               drawRectangle(s);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">2</span>) &#123;</span><br><span class="line">               drawCircle(s);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//绘制矩形</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawRectangle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot; 绘制矩形 &quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//绘制圆形</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawCircle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot; 绘制圆形 &quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">       graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">       graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>此时，如果我们在增加一下三角形，需要修改的地方如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新增三角形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    Triangle() &#123;</span><br><span class="line">        <span class="built_in">super</span>.m_type = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicEditor</span> &#123;</span><br><span class="line">    <span class="comment">//接收Shape对象，然后根据type，来绘制不同的图形</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.m_type == <span class="number">1</span>) &#123;</span><br><span class="line">            drawRectangle(s);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">2</span>) &#123;</span><br><span class="line">            drawCircle(s);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.m_type == <span class="number">3</span>) &#123;</span><br><span class="line">            drawTriangle(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制矩形</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawRectangle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 绘制矩形 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制圆形</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawCircle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 绘制圆形 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制三角形</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawTriangle</span><span class="params">(Shape r)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 绘制三角形 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Triangle</span>());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上述违反了设计模式的ocp原则，即对扩展开放(提供方)， 对修改关闭(使用方)。 即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码。</p><p><strong>改进方案：</strong></p><p>创建Shape类做成抽象类，并提供一个抽象的draw方法， 让子类去实现即可， 这样我们有新的图形种类时，只需要让新的图形类继承Shape， 并实现draw方法即可， 使用方的代码就不需要修 改 满足了开闭原则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ocp2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Triangle</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GraphicEditor</span> &#123;</span><br><span class="line">    <span class="comment">//接收Shape对象，然后根据type，来绘制不同的图形</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">(Shape s)</span> &#123;</span><br><span class="line">        s.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 绘制矩形 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 绘制圆形 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增三角形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 绘制三角形 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如我们需要新增一个其他图形，只需求在新建一个类继承Shap重写draw方法，修改main方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其它图形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Other</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 绘制其它图形 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">GraphicEditor</span> <span class="variable">graphicEditor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GraphicEditor</span>();</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Rectangle</span>());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Circle</span>());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Triangle</span>());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> <span class="title class_">Other</span>());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="2-6、迪米特法则"><a href="#2-6、迪米特法则" class="headerlink" title="2.6、迪米特法则"></a>2.6、迪米特法则</h2><blockquote><p>基本介绍      </p></blockquote><ul><li>一个对象应该对其他对象保持最少的了解。</li><li>类与类关系越密切，耦合度越大。</li><li>迪米特法则(Demeter Principle)又叫最少知道原则，即 一个类对自己依赖的类知道的 越少越好。也就是说，对于被依赖的类不管多么复杂，都尽 量将逻辑封装在类的内部。对外除了提供的public 方法，不对外泄露任何信息。</li><li>迪米特法则还有个更简单的定义：只与直接的朋友通信。</li><li>直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</li></ul><blockquote><p>应用实例</p></blockquote><p>有一个学校，下属有各个学院和总部，现要求打印出学校总部员工ID和学院员工的ID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demeter1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建了一个 SchoolManager 对象</span></span><br><span class="line">        <span class="type">SchoolManager</span> <span class="variable">schoolManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchoolManager</span>();</span><br><span class="line">        <span class="comment">//输出学院的员工id 和  学校总部的员工信息</span></span><br><span class="line">        schoolManager.printAllEmployee(<span class="keyword">new</span> <span class="title class_">CollegeManager</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学校总部员工类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学院的员工类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CollegeEmployee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管理学院员工的管理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CollegeManager</span> &#123;</span><br><span class="line">    <span class="comment">//返回学院的所有员工</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title function_">getAllEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CollegeEmployee&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; <span class="comment">//这里我们增加了10个员工到 list</span></span><br><span class="line">            <span class="type">CollegeEmployee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CollegeEmployee</span>();</span><br><span class="line">            emp.setId(<span class="string">&quot;学院员工id= &quot;</span> + i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//学校管理类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager</span></span><br><span class="line"><span class="comment">//CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SchoolManager</span> &#123;</span><br><span class="line">    <span class="comment">//返回学校总部的员工</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getAllEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123; <span class="comment">//这里我们增加了5个员工到 list</span></span><br><span class="line">            <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">            emp.setId(<span class="string">&quot;学校总部员工id= &quot;</span> + i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法完成输出学校总部和学院员工信息(id)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printAllEmployee</span><span class="params">(CollegeManager sub)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分析问题</span></span><br><span class="line">        <span class="comment">//1. 这里的 CollegeEmployee 不是  SchoolManager的直接朋友</span></span><br><span class="line">        <span class="comment">//2. CollegeEmployee 是以局部变量方式出现在 SchoolManager</span></span><br><span class="line">        <span class="comment">//3. 违反了 迪米特法则</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取到学院员工</span></span><br><span class="line">        List&lt;CollegeEmployee&gt; list1 = sub.getAllEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------学院员工------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (CollegeEmployee e : list1) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取到学校总部员工</span></span><br><span class="line">        List&lt;Employee&gt; list2 = <span class="built_in">this</span>.getAllEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------学校总部员工------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Employee e : list2) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>应用实例改进</p></blockquote><p>前面设计的问题在于SchoolManager中，CollegeEmployee类 并不是SchoolManager类的直接朋友。</p><p>按照迪米特法则，应该避免类中出现这样非直接朋友关系的耦合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demeter2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;~~~使用迪米特法则的改进~~~&quot;</span>);</span><br><span class="line">        <span class="comment">//创建了一个 SchoolManager 对象</span></span><br><span class="line">        <span class="type">SchoolManager</span> <span class="variable">schoolManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SchoolManager</span>();</span><br><span class="line">        <span class="comment">//输出学院的员工id 和  学校总部的员工信息</span></span><br><span class="line">        schoolManager.printAllEmployee(<span class="keyword">new</span> <span class="title class_">CollegeManager</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//学校总部员工类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//学院的员工类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CollegeEmployee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//管理学院员工的管理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CollegeManager</span> &#123;</span><br><span class="line">    <span class="comment">//返回学院的所有员工</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title function_">getAllEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CollegeEmployee&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; <span class="comment">//这里我们增加了10个员工到 list</span></span><br><span class="line">            <span class="type">CollegeEmployee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CollegeEmployee</span>();</span><br><span class="line">            emp.setId(<span class="string">&quot;学院员工id= &quot;</span> + i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出学院员工的信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取到学院员工</span></span><br><span class="line">        List&lt;CollegeEmployee&gt; list1 = getAllEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------学院员工------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (CollegeEmployee e : list1) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学校管理类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分析 SchoolManager 类的直接朋友类有哪些 Employee、CollegeManager</span></span><br><span class="line"><span class="comment">//CollegeEmployee 不是 直接朋友 而是一个陌生类，这样违背了 迪米特法则 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SchoolManager</span> &#123;</span><br><span class="line">    <span class="comment">//返回学校总部的员工</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getAllEmployee</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123; <span class="comment">//这里我们增加了5个员工到 list</span></span><br><span class="line">            <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">            emp.setId(<span class="string">&quot;学校总部员工id= &quot;</span> + i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法完成输出学校总部和学院员工信息(id)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printAllEmployee</span><span class="params">(CollegeManager sub)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分析问题</span></span><br><span class="line">        <span class="comment">//1. 将输出学院的员工方法，封装到CollegeManager</span></span><br><span class="line">        sub.printEmployee();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取到学校总部员工</span></span><br><span class="line">        List&lt;Employee&gt; list2 = <span class="built_in">this</span>.getAllEmployee();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------学校总部员工------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Employee e : list2) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>迪米特法则的核心是降低类之间的耦合。</li><li>但是注意：由于每个类都减少了不必要的依赖， 因此迪米特法则只是要求降低类间(对象间)耦合关 系， 并不是要求完全没有依赖关系。</li></ul><h2 id="2-7、合成复用原则"><a href="#2-7、合成复用原则" class="headerlink" title="2.7、合成复用原则"></a>2.7、合成复用原则</h2><p>原则是尽量使用合成/聚合的方式，而不是使用继承。</p><h1 id="3、UML类图"><a href="#3、UML类图" class="headerlink" title="3、UML类图"></a>3、UML类图</h1><blockquote><p>基本介绍</p></blockquote><ul><li>UML——Unified modeling language UML (统一建模语言)，是一种用于软件系统 分析和设计的语言工具，它用于帮助软 件开发人员进行思考和记录思路的结果。</li><li>UML本身是一套符号的规定，就像数学 符号和化学符号一样，这些符号用于描 述软件模型中的各个元素和他们之间的关系，比如类、接口、实现、泛化、依 赖、组合、聚合等。</li><li>用于描述系统中的类(对象)本身的组成和类(对象)之 间的各种静态关系。</li><li>类之间的关系：依赖、泛化（继承）、实现、关联、聚合与组合。</li></ul><blockquote><p>类与类之间的关系-依赖</p></blockquote><p>只要是在类中用到了对方，那么他们之间就存在依赖关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonServiceBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> PersonDao personDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IDCard <span class="title function_">getIDCard</span><span class="params">(Integer personid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modify</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Department</span> <span class="variable">department</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Department</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IDCard</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonDao</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/20201115154916204.png" alt="20201115154916204"></p><ul><li>类中用到了对方</li><li>如果是类的成员属性</li><li>如果是方法的返回类型</li><li>是方法接收的参数类型</li><li>方法中使用到</li></ul><blockquote><p>类与类之间的关系-泛化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现关系实际上就是A类实现B接口，他是依赖关系的特例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonServiceBean</span> <span class="keyword">extends</span> <span class="title class_">DaoSupport</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">DaoSupport</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Object entity)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Object id)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/20201115155307101.png" alt="20201115155307101"></p><blockquote><p>类与类之间的关系-实现</p></blockquote><p>实现关系实际上就是A类实现B接口，他是依赖关系的特例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonServiceBean</span> <span class="keyword">implements</span> <span class="title class_">PersonService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;delete..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/20201115155625738.png" alt="20201115155625738"></p><blockquote><p>类与类之间的关系-关联</p></blockquote><p>关联关系实际上就是类与类之间的联系，他是依赖关系的特例 关联具有导航性：即双向关系或单向关系</p><p><strong>单向一对一关系：</strong></p><p>一个人拥有一张身份证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Persion</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IDCard idCard;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IDCard</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>双向关系：</strong></p><p>一个人拥有一张身份证,一张身份证对应一个人</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Persion</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IDCard idCard;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IDCard</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Persion persion;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类与类之间的关系-聚合</p></blockquote><p>聚合关系（Aggregation）表示的是整体和部分的关系，整体与部分可以分开。聚合关系是关联关系的特例，所以他具有关联的导航性与多重性。</p><p>例如：一台电脑由键盘(keyboard)、显示器(monitor)， 鼠标等组成；组成电脑的各个 配件是可以从电脑上分离出来的，使用带空心菱形的实线来表示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Mouse mouse; <span class="comment">//鼠标可以和computer分离</span></span><br><span class="line">    <span class="keyword">private</span> Moniter moniter;<span class="comment">//显示器可以和Computer分离</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMouse</span><span class="params">(Mouse mouse)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mouse = mouse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoniter</span><span class="params">(Moniter moniter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.moniter = moniter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mouse</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Moniter</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/20201115160038850.png" alt="20201115160038850"></p><p>如果Mouse,Monitor和Computer是不可分离的,则升级为组合关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Mouse</span> <span class="variable">mouse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mouse</span>(); <span class="comment">//鼠标可以和computer不能分离</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Moniter</span> <span class="variable">moniter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Moniter</span>();<span class="comment">//显示器可以和Computer不能分离</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMouse</span><span class="params">(Mouse mouse)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mouse = mouse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoniter</span><span class="params">(Moniter moniter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.moniter = moniter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mouse</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Moniter</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/20201115160948952.png" alt="20201115160948952"></p><blockquote><p>类与类之间的关系-组合</p></blockquote><p>组合关系：也是整体与部分的关系，但是整体与部分不可以分开。</p><p>案例：在程序中我们定义实体：Person与IDCard、Head, 那么 Head 和Person 就是 组合，IDCard 和 Person 就是聚合。但是如果在程序中Person实体中定义了对IDCard进行级联删除，即删除Person时，连同IDCard一起删除，那IDCard 和 Person 就是组合了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Head</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IDCard</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IDCard card; <span class="comment">//聚合关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Head</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Head</span>(); <span class="comment">//组合关系</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/20201115160915447.png" alt="20201115160915447"></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Harbor搭建私有镜像仓库</title>
      <link href="/post/aed24418.html"/>
      <url>/post/aed24418.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、Harbor私有仓库搭建"><a href="#1、Harbor私有仓库搭建" class="headerlink" title="1、Harbor私有仓库搭建"></a>1、Harbor私有仓库搭建</h1><p>在Docker官方自带的Registry仓库中，其使用与操作都不太方便。Harbor私有仓库可以提供可视化的web管理界面，方便管理docker镜像，又提供了镜像权限管理及控制功能。</p><blockquote><p>Harbor概述</p></blockquote><ul><li>Harbor是VMware公司开源的企业级Docker Registry项目，其目标是帮助用户迅速搭建一个企业级的Docker Registry服务。</li><li>Harbor以Docker 公司开源的Registry 为基础，提供了图形管理UI、基于角色的访问控制（Role Based AccessControl）、AD/LDAI们成以心宙计日志（Auditlogging）等企业用户需求的功能，同时还原生支持中文。</li><li>Harbor的每个组件都是以Docker容器的形式构建的，使用docker-compose来对它进行部署。用于部署Harbor的docker-compose模板位于harbor/docker-compose.yml。</li></ul><blockquote><p>安装docker-compose</p></blockquote><p>使用国内镜像站</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.29.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>对二进制文件应用可执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>测试安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230227111938923.png" alt="image-20230227111938923"></p><blockquote><p>安装harbor</p></blockquote><p>下载harbor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget  https://github.com/goharbor/harbor/releases/download/v2.4.2/harbor-online-installer-v2.4.2.tgz</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar  zxvf harbor-online-installer-v2.4.2.tgz</span><br></pre></td></tr></table></figure><p>编辑harbor文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp harbor.yml.tmpl   harbor.yml</span><br><span class="line">vim harbor.yml</span><br></pre></td></tr></table></figure><p>harbor.yml配置文件修改</p><p><img src="https://images.hckun.cn/image-20230227135229293.png" alt="image-20230227135229293"></p><p>这里我们是需要修改hostname为服务器的IP地址，注释https部分，其余不动</p><p>准备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./prepare #运行准备，查看是否可以启动harbor，条件是否充分</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install.sh</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230227135157602.png" alt="image-20230227135157602"></p><p>查看harbor依赖的服务是否启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><p>登陆harbor</p><p>访问：<a href="http://49.235.98.10/">http://49.235.98.10/</a></p><p>用户名：admin</p><p>密码：Harbor12345 </p><p><img src="https://images.hckun.cn/image-20230227135416777.png" alt="image-20230227135416777"></p><p><img src="https://images.hckun.cn/image-20230227135440369.png" alt="image-20230227135440369"></p><h1 id="2、推送、拉取镜像"><a href="#2、推送、拉取镜像" class="headerlink" title="2、推送、拉取镜像"></a>2、推送、拉取镜像</h1><h2 id="2-1、推送镜像"><a href="#2-1、推送镜像" class="headerlink" title="2.1、推送镜像"></a>2.1、推送镜像</h2><blockquote><p>新建项目</p></blockquote><p><img src="https://images.hckun.cn/image-20230301111811072.png" alt="image-20230301111811072"></p><blockquote><p>制作镜像</p></blockquote><p>拉取一个centos镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230301112015592.png" alt="image-20230301112015592"></p><p>启动一个centos镜像的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8080:80 -tid  --privileged=true centos:latest  /usr/sbin/init</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230301112135877.png" alt="image-20230301112135877"></p><p>进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it eb7 /bin/bash</span><br></pre></td></tr></table></figure><p>我们使用<code>vim</code>任意编辑一个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /ect/profile</span><br></pre></td></tr></table></figure><p>报错：bash: vim: command not found</p><p>提示我们没有<code>vim</code>命令，那么我们去安装一个<code>vim</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install vim</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230301112552397.png" alt="image-20230301112552397"></p><p>若出现上述错误，在容器中执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入到centosYum源位置</span></span><br><span class="line">cd /etc/yum.repos.d/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改该源位置下所有baseurl地址</span></span><br><span class="line">sed -i &#x27;s/mirrorlist/#mirrorlist/g&#x27; /etc/yum.repos.d/CentOS-*</span><br><span class="line">sed -i &#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27; /etc/yum.repos.d/CentOS-*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新建立Yum缓存</span></span><br><span class="line">yum makecache</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更新Yum源</span></span><br><span class="line">yum update</span><br></pre></td></tr></table></figure><p>再次安装<code>vim</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install vim</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>安装成功</p><p><img src="https://images.hckun.cn/image-20230301113507068.png" alt="image-20230301113507068"></p><blockquote><p>推送镜像</p></blockquote><p>将我们增加了<code>vim</code>的centos镜像，推送到Harbor仓库中</p><p>使用commit将容器，生成一个新的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit eb7 centos_test</span><br></pre></td></tr></table></figure><p>查看镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230301114147313.png" alt="image-20230301114147313"></p><p>复制Harbor的镜像推送命令</p><p><img src="https://images.hckun.cn/image-20230301114227063.png" alt="image-20230301114227063"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">标记镜像</span></span><br><span class="line">docker tag SOURCE_IMAGE[:TAG] 49.235.98.10/test/REPOSITORY[:TAG]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">推送镜像到当前项目</span></span><br><span class="line">docker push 49.235.98.10/test/REPOSITORY[:TAG]</span><br></pre></td></tr></table></figure><p>执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">标记centos_test镜像</span></span><br><span class="line">docker tag centos_test:latest  49.235.98.10/test/centos_test:latest</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230301114535306.png" alt="image-20230301114535306"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">登录Harbor</span></span><br><span class="line">docker login 49.235.98.10</span><br></pre></td></tr></table></figure><p>输入用户名、密码</p><p><img src="https://images.hckun.cn/image-20230301114623268.png" alt="image-20230301114623268"></p><p>若出现如下错误：</p><p>Error response from daemon:Get “https:.//…/v2/“”: http: server gave HTTP response to HTTs client</p><p>执行以下操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/docker.service </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加 --insecure-registry 49.235.98.10</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock   --insecure-registry=49.235.98.10</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">加载配置文件并生效</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">再次登录即可</span></span><br><span class="line">docker login 49.235.98.10</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230301115321449.png" alt="image-20230301115321449"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">推送镜像</span></span><br><span class="line">docker push 49.235.98.10/test/centos_test:latest</span><br></pre></td></tr></table></figure><p>等待执行完毕</p><p><img src="https://images.hckun.cn/image-20230301114820957.png" alt="image-20230301114820957"></p><p>我们去Harbor中查看推送的镜像</p><p><img src="https://images.hckun.cn/image-20230301115357862.png" alt="image-20230301115357862"></p><h2 id="2-2、拉取镜像"><a href="#2-2、拉取镜像" class="headerlink" title="2.2、拉取镜像"></a>2.2、拉取镜像</h2><p>复制拉取命令</p><p><img src="https://images.hckun.cn/image-20230301115509900.png" alt="image-20230301115509900"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 49.235.98.10/test/centos_test@sha256:f90a89127245824c9f41d7f57e9aca2e24f0a90299cf50d8a6417c335af41f7e</span><br></pre></td></tr></table></figure><p>等待拉取成功</p><p><img src="https://images.hckun.cn/image-20230301115538318.png" alt="image-20230301115538318"></p><p><img src="https://images.hckun.cn/image-20230301120020596.png" alt="image-20230301120020596"></p><p>启动一个容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8080:80 -tid  --privileged=true 49.235.98.10/test/centos_test:latest  /usr/sbin/init</span><br></pre></td></tr></table></figure><p>进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it dac /bin/bash</span><br></pre></td></tr></table></figure><p>测试<code>vim</code>是否可用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230301125238786.png" alt="image-20230301125238786"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库定时备份</title>
      <link href="/post/192d99e1.html"/>
      <url>/post/192d99e1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>查看数据库的字符集</p></blockquote><p>数据库的字符集必须和Linux下设置的环境变量一致，不然会有乱码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from v$nls_parameters where parameter=&#x27;NLS_CHARACTERSET&#x27;;</span><br></pre></td></tr></table></figure><p>查询结果为：NLS_CHARACTERSET ZHS16GBK</p><p><img src="https://images.hckun.cn/image-20230215224825320.png" alt="image-20230215224825320"></p><blockquote><p>用oracle用户登录oracle服务器，创建相关的目录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/oracle/dbbak/data #创建备份数据的目录 </span><br><span class="line">mkdir -p /home/oracle/dbbak/shell #创建备份脚本目录 </span><br><span class="line">mkdir /home/oracle/dbbak/log #创建导出数据日志目录 </span><br></pre></td></tr></table></figure><blockquote><p>在脚本目录下创建脚本文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/oracle/dbbak/shell/dbbak.sh</span><br></pre></td></tr></table></figure><p>写入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">export ORACLE_BASE=/u01/app/oracle</span><br><span class="line">export ORACLE_HOME=$ORACLE_BASE/product/11.2.0/db_1</span><br><span class="line">export ORACLE_SID=orcl</span><br><span class="line">export PATH=$PATH:$HOME/bin:$ORACLE_HOME/bin</span><br><span class="line">export DATA_DIR=/home/oracle/dbbak/data</span><br><span class="line">export LOGS_DIR=/home/oracle/dbbak/log</span><br><span class="line">export DELTIME=`date -d &quot;7 days ago&quot; +%Y%m%d`</span><br><span class="line">export BAKUPTIME=`date +%Y%m%d%H%M%S`</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.ZHS16GBK</span><br><span class="line">mkdir -p $DATA_DIR</span><br><span class="line">mkdir -p $LOGS_DIR</span><br><span class="line">echo &quot;Starting bakup...&quot;</span><br><span class="line">echo &quot;Bakup filepath$DATA_DIR/$BAKUPTIME.dmp&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">exp 用户名/密码 owner=用户名 file=dmp文件全路径 <span class="built_in">log</span>=日志文件全路径</span></span><br><span class="line">exp userid=zslib/zslib2023 owner=zslib file=$DATA_DIR/orcl$BAKUPTIME.dmp log=$LOGS_DIR/orcl$BAKUPTIME.log</span><br><span class="line">echo &quot;Delete the file bakup before 30days...filepath: $DATA_DIR/orcl$DELTIME*.dmp &quot;</span><br><span class="line">rm -rf $DATA_DIR/orcl$DELTIME*.dmp</span><br><span class="line">rm -rf $LOGS_DIR/orcl$DELTIME*.log</span><br><span class="line">echo &quot;Delete the file bakup successfully.&quot;</span><br><span class="line">echo &quot;Bakup completed.&quot;</span><br></pre></td></tr></table></figure><blockquote><p>添加脚本执行权限</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 dbbak.sh</span><br></pre></td></tr></table></figure><p>测试是否可以执行：<code>./ dbbak.sh</code></p><p>Export terminated successfully without warnings.表示导出没有问题</p><blockquote><p>添加定时任务</p></blockquote><p>在Oracle用户下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab –e</span><br></pre></td></tr></table></figure><p>写入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">59 23 * * * /home/oracle/dbbak/shell/dbbak.sh   #表示每天的23点59分执行脚本</span><br></pre></td></tr></table></figure><p>重启crond：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service crond restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库导入导出</title>
      <link href="/post/776a71ac.html"/>
      <url>/post/776a71ac.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>登录指定用户</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#sqlplus 用户名<span class="operator">/</span>密码</span><br><span class="line">sqlplus zslib<span class="operator">/</span>zslib2023</span><br></pre></td></tr></table></figure><blockquote><p>oracle导出数据</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">exp userid=用户名/密码 owner=库名 file=导出位置</span></span><br><span class="line">exp userid=zslib/zslib2023 owner=zslib file=zslib.dmp</span><br></pre></td></tr></table></figure><blockquote><p>oracle导入数据</p></blockquote><p>登录sys用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#先切换到oracle用户</span><br><span class="line">su oracle</span><br><span class="line">#刷新环境变量</span><br><span class="line">source <span class="operator">~</span><span class="operator">/</span>.bash_profile</span><br><span class="line">#登录</span><br><span class="line">sqlplus</span><br><span class="line">sys <span class="keyword">as</span> sysdba</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230129165944037.png" alt="image-20230129165944037"></p><p>1、创建表空间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space ZSLIB datafile <span class="string">&#x27;ZSLIB.dbf&#x27;</span> size <span class="number">50</span>m autoextend <span class="keyword">on</span>  next <span class="number">50</span>m maxsize <span class="number">2048</span>m  extent management <span class="keyword">local</span>;</span><br><span class="line"><span class="keyword">create</span> temporary tablespace ZSLIB_TEMP  tempfile <span class="string">&#x27;ZSLIB_TEMP.dbf&#x27;</span> size <span class="number">50</span>m  autoextend <span class="keyword">on</span>  next <span class="number">50</span>m maxsize <span class="number">1024</span>m extent management <span class="keyword">local</span>;</span><br></pre></td></tr></table></figure><p>2、创建用户并分配表空间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> zslib identified <span class="keyword">by</span> zslib2023  <span class="keyword">default</span> tablespace ZSLIB temporary tablespace ZSLIB_TEMP;</span><br></pre></td></tr></table></figure><p>3、给用户授权</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span>,resource,dba <span class="keyword">to</span> zslib ;</span><br></pre></td></tr></table></figure><p>退出登录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>4、导入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">imp userid<span class="operator">=</span>用户名<span class="operator">/</span>密码 fromuser<span class="operator">=</span>导出的用户名 touser<span class="operator">=</span>导入的用户名 ignore<span class="operator">=</span>y file<span class="operator">=</span>导入文件位置</span><br><span class="line">imp userid<span class="operator">=</span>zslib<span class="operator">/</span>zslib2023 fromuser<span class="operator">=</span>ry touser<span class="operator">=</span>zslib ignore<span class="operator">=</span>y file<span class="operator">=</span><span class="operator">/</span>opt<span class="operator">/</span>ry.dmp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML调用电脑摄像头并拍照</title>
      <link href="/post/fbfbeda4.html"/>
      <url>/post/fbfbeda4.html</url>
      
        <content type="html"><![CDATA[<p>如何调用电脑摄像头并实现拍照功能那？</p><blockquote><p>新建taskPhoto.html</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>打开摄像头</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;callCamera()&quot;</span>&gt;</span>打开摄像头<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">autoplay</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 150px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> video = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;video&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//调用摄像头</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">callCamera</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//TypeError: Cannot read properties of undefined (reading &#x27;getUserMedia&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 调用电脑摄像头API</span></span></span><br><span class="line"><span class="language-javascript">        navigator.<span class="property">mediaDevices</span>.<span class="title function_">getUserMedia</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">video</span>: <span class="literal">true</span>, <span class="attr">audio</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 摄像头开启成功</span></span></span><br><span class="line"><span class="language-javascript">            video.<span class="property">srcObject</span> = success;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 实时拍照效果</span></span></span><br><span class="line"><span class="language-javascript">            video.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">error</span>(error + <span class="string">&quot;摄像头开启失败，请检查摄像头是否可用！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>摄像头调用成功</p><p><img src="https://images.hckun.cn/image-20230202191527141.png" alt="image-20230202191527141"></p><blockquote><p>关闭摄像头</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;callCamera()&quot;</span>&gt;</span>打开摄像头<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;closeCamera()&quot;</span>&gt;</span>关闭摄像头<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">autoplay</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 150px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> video = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;video&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//调用摄像头</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">callCamera</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//TypeError: Cannot read properties of undefined (reading &#x27;getUserMedia&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 调用电脑摄像头API</span></span></span><br><span class="line"><span class="language-javascript">        navigator.<span class="property">mediaDevices</span>.<span class="title function_">getUserMedia</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">video</span>: <span class="literal">true</span>, <span class="attr">audio</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 摄像头开启成功</span></span></span><br><span class="line"><span class="language-javascript">            video.<span class="property">srcObject</span> = success;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 实时拍照效果</span></span></span><br><span class="line"><span class="language-javascript">            video.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">error</span>(error + <span class="string">&quot;摄像头开启失败，请检查摄像头是否可用！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//关闭摄像头</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">closeCamera</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!video.<span class="property">srcObject</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> stream = video.<span class="property">srcObject</span>;</span></span><br><span class="line"><span class="language-javascript">        stream.<span class="title function_">getTracks</span>()[<span class="number">0</span>].<span class="title function_">stop</span>(); <span class="comment">//直接用此方法 直接关闭了</span></span></span><br><span class="line"><span class="language-javascript">        video.<span class="property">srcObject</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>拍照</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;video&quot;</span> <span class="attr">autoplay</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 150px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;callCamera()&quot;</span>&gt;</span>打开摄像头<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;closeCamera()&quot;</span>&gt;</span>关闭摄像头<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;photograph()&quot;</span>&gt;</span>拍照<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> video = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;video&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//调用摄像头</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">callCamera</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//TypeError: Cannot read properties of undefined (reading &#x27;getUserMedia&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 调用电脑摄像头API</span></span></span><br><span class="line"><span class="language-javascript">        navigator.<span class="property">mediaDevices</span>.<span class="title function_">getUserMedia</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">video</span>: <span class="literal">true</span>, <span class="attr">audio</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 摄像头开启成功</span></span></span><br><span class="line"><span class="language-javascript">            video.<span class="property">srcObject</span> = success;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 实时拍照效果</span></span></span><br><span class="line"><span class="language-javascript">            video.<span class="title function_">play</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">error</span>(error + <span class="string">&quot;摄像头开启失败，请检查摄像头是否可用！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//关闭摄像头</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">closeCamera</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!video.<span class="property">srcObject</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> stream = video.<span class="property">srcObject</span>;</span></span><br><span class="line"><span class="language-javascript">        stream.<span class="title function_">getTracks</span>()[<span class="number">0</span>].<span class="title function_">stop</span>(); <span class="comment">//直接用此方法 直接关闭了</span></span></span><br><span class="line"><span class="language-javascript">        video.<span class="property">srcObject</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//拍照</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">photograph</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 把当前视频帧内容渲染到canvas上</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="title function_">drawImage</span>(video, <span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">300</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 转base64格式、图片格式转换、图片质量压缩</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> imgBase64 = canvas.<span class="title function_">toDataURL</span>(<span class="string">&quot;image/jpeg&quot;</span>, <span class="number">0.7</span>); <span class="comment">// 由字节转换为KB 判断大小</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">imgSrc</span> = imgBase64</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> str = imgBase64.<span class="title function_">replace</span>(<span class="string">&quot;data:image/jpeg;base64,&quot;</span>, <span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> strLength = str.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> fileLength = <span class="built_in">parseInt</span>(strLength - (strLength / <span class="number">8</span>) * <span class="number">2</span>); <span class="comment">// 图片尺寸  用于判断</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> size = (fileLength / <span class="number">1024</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>);<span class="comment">//图片大小</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(fileLength)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(size)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230202204409279.png" alt="image-20230202204409279"></p>]]></content>
      
      
      <categories>
          
          <category> 点点滴滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 点点滴滴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Alibaba (一) 服务注册与配置中心 Nacos</title>
      <link href="/post/359b9644.html"/>
      <url>/post/359b9644.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、Nacos介绍"><a href="#1、Nacos介绍" class="headerlink" title="1、Nacos介绍"></a>1、Nacos介绍</h1><blockquote><p>为什么叫Nacos</p></blockquote><p>前四个字母分别为Naming和Configuration的前两个字母，最后的s为Service。</p><blockquote><p>Nacos是什么</p></blockquote><ul><li><p>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p></li><li><p>Nacos: Dynamic Naming and Configuration Service</p></li><li><p>Nacos就是注册中心＋配置中心的组合 -&gt; <strong>Nacos = Eureka+Config+Bus</strong></p></li></ul><p>替代Eureka做服务注册中心；替代Config做服务配置中心</p><p>下载地址：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p><img src="https://images.hckun.cn/image-20230128222220284.png" alt="image-20230128222220284"></p><h1 id="2、Nacos安装"><a href="#2、Nacos安装" class="headerlink" title="2、Nacos安装"></a>2、Nacos安装</h1><p>下载地址：<a href="https://github.com/alibaba/nacos/tags">https://github.com/alibaba/nacos/tags</a></p><p><img src="https://images.hckun.cn/image-20230128222454708.png" alt="image-20230128222454708"></p><p>命令行进去Nacos bin目录，执行如下启动命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh -m standalone</span><br></pre></td></tr></table></figure><p>启动成功后，浏览器访问<a href="http://localhost:8848/nacos%E3%80%82">http://localhost:8848/nacos。</a></p><p>默认账号密码都是nacos，能访问到如下页面证明安装成功。</p><p><img src="https://images.hckun.cn/image-20230128223254200.png" alt="image-20230128223254200"></p><p><img src="https://images.hckun.cn/image-20230128223319738.png" alt="image-20230128223319738"></p><h1 id="3、Nacos服务提供者注册"><a href="#3、Nacos服务提供者注册" class="headerlink" title="3、Nacos服务提供者注册"></a>3、Nacos服务提供者注册</h1><p>新建模块<code> cloudalibaba-provider-payment9001</code></p><p>父POM增加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-provider-payment9001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#配置Nacos地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain9001</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(PaymentMain9001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nacos provider, serverPort: &quot;</span> + serverPort + <span class="string">&quot;\t id&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>启动：<code>cloudalibaba-provider-payment9001</code></p><p>访问:<a href="http://localhost:9001/payment/nacos/1">http://localhost:9001/payment/nacos/1</a></p><p>服务正常响应</p><p><img src="https://images.hckun.cn/image-20230129212115822.png" alt="image-20230129212115822"></p><p>我们再看Nacos控制台，<code>cloudalibaba-provider-payment9001</code>已注册进了Nacos。</p><p><img src="https://images.hckun.cn/image-20230129212205372.png" alt="image-20230129212205372"></p><blockquote><p>创建<code>cloudalibaba-provider-payment9002</code></p></blockquote><p>为了证明Nacos的负载均衡功能，我们可以参照<code>cloudalibaba-provider-payment90021</code>新建<code>cloudalibaba-provider-payment9002</code>。</p><p>或者可以利用IDEA功能，直接拷贝虚拟端口映射。</p><p>右键<code>PaymentMain9001</code>===&gt;复制配置</p><p><img src="https://images.hckun.cn/image-20230129212541321.png" alt="image-20230129212541321"></p><p>配置名称及VM配置端口号，点击确定。</p><p><img src="https://images.hckun.cn/image-20230129213433808.png" alt="image-20230129213433808"></p><p>启动<code>cloudalibaba-provider-payment9002</code>,看是否正常访问。</p><p><img src="https://images.hckun.cn/image-20230129213459648.png" alt="image-20230129213459648"></p><h1 id="4、Nacos服务消费者注册和负载"><a href="#4、Nacos服务消费者注册和负载" class="headerlink" title="4、Nacos服务消费者注册和负载"></a>4、Nacos服务消费者注册和负载</h1><p>新建模块<code> cloudalibaba-consumer-nacos-order83</code></p><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-consumer-nacos-order83<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud ailibaba nacos --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">83</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者将要去访问的微服务名称(注册成功进nacos的微服务提供者)</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderNacosMain83</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderNacosMain83.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类</p></blockquote><p>ApplicationContextConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderNacosController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderNacosController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.nacos-user-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverURL;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(serverURL + <span class="string">&quot;/payment/nacos/&quot;</span> + id, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>启动:<code>cloudalibaba-consumer-nacos-order83</code></p><p>多次访问：<a href="http://localhost:83/consumer/payment/nacos/1">http://localhost:83/consumer/payment/nacos/1</a></p><p>发现<code>cloudalibaba-provider-payment9001</code>/<code>cloudalibaba-provider-payment9002</code>轮询交替提供服务。</p><h1 id="5、Nacos服务配置中心"><a href="#5、Nacos服务配置中心" class="headerlink" title="5、Nacos服务配置中心"></a>5、Nacos服务配置中心</h1><p>新建模块：<code>cloudalibaba-config-nacos-client3377</code></p><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloudalibaba-config-nacos-client3377<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nacos-config--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--nacos-discovery--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web + actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><p>Nacos同springcloud-config一样，在项目初始化时，要保证先从配置中心进行配置拉取，拉取配置之后，才能保证项目的正常启动。</p><p>springboot中配置文件的加载是存在优先级顺序的，bootstrap优先级高于application。</p><p>bootstrap.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nacos配置</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span> <span class="comment">#指定yml格式的配置</span></span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 表示开发环境</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosConfigClientMain3377</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(NacosConfigClientMain3377.class, args);</span><br><span class="line">  </span><br></pre></td></tr></table></figure><blockquote><p>业务类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">//支持Nacos的动态刷新功能。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClientController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config/info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConfigInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Nacos中添加配置信息</p></blockquote><p>Nacos中的dataid的组成格式及与SpringBoot配置文件中的匹配规则：</p><p>官方文档：<a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html">https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html</a></p><p><img src="https://images.hckun.cn/image-20230129215051848.png" alt="image-20230129215051848"></p><p>在 Nacos Spring Cloud中,dataId的完整格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;prefix&#125;-<span class="variable">$&#123;spring-profile.active&#125;</span>.<span class="variable">$&#123;file-extension&#125;</span></span></span><br></pre></td></tr></table></figure><ul><li>prefix默认为spring.application.name的值，也可以通过配置项spring.cloud.nacos.config.prefix来配置。</li><li>spring.profile.active即为当前环境对应的 profile，详情可以参考 Spring Boot文档。注意：当spring.profile.active为空时，对应的连接符 - 也将不存在，datald 的拼接格式变成<code>$&#123;prefix&#125;.$&#123;file-extension&#125;</code></li><li>file-exetension为配置内容的数据格式，可以通过配置项spring .cloud.nacos.config.file-extension来配置。目前只支持properties和yaml类型。</li><li>通过Spring Cloud 原生注解@RefreshScope实现配置自动更新。</li></ul><p>最后公式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;spring.application.name&#125;-<span class="variable">$&#123;spring.profiles.active&#125;</span>.<span class="variable">$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span></span><br></pre></td></tr></table></figure><p>所以我们要在Nacos中配置dataId的值为：nacos-config-client-dev.yml</p><p><img src="https://images.hckun.cn/image-20230129215517837.png" alt="image-20230129215517837"></p><p>填写DataID及配置内容,点击发布即可。</p><p><img src="https://images.hckun.cn/image-20230129220341619.png" alt="image-20230129220341619"></p><p><img src="https://images.hckun.cn/image-20230129220401914.png" alt="image-20230129220401914"></p><blockquote><p>测试</p></blockquote><p>运行<code>cloud-config-nacos-client3377</code></p><p>访问：<a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a></p><p>成功获取到Nacos中的配置。</p><p><img src="https://images.hckun.cn/image-20230129220441749.png" alt="image-20230129220441749"></p><blockquote><p>自带动态刷新</p></blockquote><p>我们修改Nacos中的配置,使version=2。</p><p>不重启项目，再次访问<a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a></p><p>配置已发生更改</p><p><img src="https://images.hckun.cn/image-20230129220614267.png" alt="image-20230129220614267"></p><h1 id="6、Nacos命名空间、分组和DataID三者关系"><a href="#6、Nacos命名空间、分组和DataID三者关系" class="headerlink" title="6、Nacos命名空间、分组和DataID三者关系"></a>6、Nacos命名空间、分组和DataID三者关系</h1><p>我们可以看到Nacos有命名空间、Group和DataId</p><p><img src="https://images.hckun.cn/image-20230129222251953.png" alt="image-20230129222251953"></p><p><strong>多环境多项目管理</strong></p><p>问题1:</p><p>实际开发中，通常一个系统会准备</p><ul><li>dev开发环境</li><li>test测试环境</li><li>prod生产环境</li></ul><p>如何保证指定环境启动时服务能正确读取到Nacos上相应环境的配置文件呢?</p><p>问题2:</p><p>一个大型分布式微服务系统会有很多微服务子项目，每个微服务项目又都会有相应的开发环境、测试环境、预发环境、正式环境…那怎么对这些微服务配置进行管理呢?</p><p><strong>Namespace+Group+Data lD三者关系</strong></p><p><img src="https://images.hckun.cn/60712abd615dd86ac6c119bf132a28d6.png" alt="60712abd615dd86ac6c119bf132a28d6"></p><p>默认情况：Namespace=public，Group=DEFAULT_GROUP，默认Cluster是DEFAULT</p><ul><li>Nacos默认的Namespace是public，Namespace主要用来实现隔离。</li></ul><p>比方说我们现在有三个环境：开发、测试、生产环境，我们就可以创建三个Namespace，不同的Namespace之间是隔离的。</p><ul><li>Group默认是DEFAULT_GROUP，Group可以把不同的微服务划分到同一个分组里面去。</li><li>Service就是微服务:一个Service可以包含多个Cluster (集群)，Nacos默认Cluster是DEFAULT，Cluster是对指定微服务的一个虚拟划分。</li><li>Instance，就是微服务的实例。</li></ul><h1 id="7、Nacos-DataID配置"><a href="#7、Nacos-DataID配置" class="headerlink" title="7、Nacos DataID配置"></a>7、Nacos DataID配置</h1><p>指定spring.profile.active和配置文件的DatalD来使不同环境下读取不同的配置。</p><p>默认空间+默认分组+新建dev和test两个DatalD</p><p>新建一个<code>nacos-config-client-test.yml</code>配置</p><p><img src="https://images.hckun.cn/image-20230129223407401.png" alt="image-20230129223407401"></p><p><img src="https://images.hckun.cn/image-20230129223429962.png" alt="image-20230129223429962"></p><p>通过spring.profile.active属性就能进行多环境下配置文件的读取</p><p><img src="https://images.hckun.cn/image-20230129223516125.png" alt="image-20230129223516125"></p><p>测试,分别配置dev、test环境访问<a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a></p><h1 id="8、Nacos-Group分组方案"><a href="#8、Nacos-Group分组方案" class="headerlink" title="8、Nacos Group分组方案"></a>8、Nacos Group分组方案</h1><p>通过Group实现环境区分 - 新建Group分别是TEST_GROUP、DEV_GROUP</p><p><img src="https://images.hckun.cn/image-20230129225743201.png" alt="image-20230129225743201"></p><p><img src="https://images.hckun.cn/image-20230129225818137.png" alt="image-20230129225818137"></p><p>在config下增加一条group的配置即可。可配置为DEV_GROUP或TEST GROUP</p><p><img src="https://images.hckun.cn/image-20230129225904345.png" alt="image-20230129225904345"></p><p><img src="https://images.hckun.cn/image-20230129225933235.png" alt="image-20230129225933235"></p><p>重启，访问<a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a> 通过配置不同的Group，观察配置变化。</p><h1 id="9、Nacos-Namespace空间方案"><a href="#9、Nacos-Namespace空间方案" class="headerlink" title="9、Nacos Namespace空间方案"></a>9、Nacos Namespace空间方案</h1><p>新建dev/test的Namespace</p><p><img src="https://images.hckun.cn/image-20230129230233355.png" alt="image-20230129230233355"></p><p><img src="https://images.hckun.cn/image-20230129230246951.png" alt="image-20230129230246951"></p><p>在dev命名空间中，新建三个不同Group的配置</p><p><img src="https://images.hckun.cn/image-20230129230558052.png" alt="image-20230129230558052"></p><p>在config下增加一条namespace的配置,值为命名空间的ID</p><p><img src="https://images.hckun.cn/image-20230129230759987.png" alt="image-20230129230759987"></p><p>重启，访问<a href="http://localhost:3377/config/info">http://localhost:3377/config/info</a> 通过配置不同的Group（DEV_GROUP、TEST_GROUP、DEFAULT_GROUP），观察配置变化。</p><h1 id="10、Nacos持久化配置"><a href="#10、Nacos持久化配置" class="headerlink" title="10、Nacos持久化配置"></a>10、Nacos持久化配置</h1><p>默认Nacos使用嵌入式数据库实现数据的存储。</p><p>所以，如果启动多个默认配置下的Nacos节点，数据存储是存在一致性问题的。</p><p>为了解决这个问题，<strong>Nacos采用了集中式存储的方式来支持集群化部署，目前只支持MySQL的存储</strong>。</p><p>所以下面，我们要将Nacos的配置存入数据库中。</p><blockquote><p>创建库表</p></blockquote><p>创建存储Nacos配置的表，Nacos官方已经为我们准备好了sql文件，我们只需执行即可。</p><p>在nacos的conf目录下找到<code>mysql-schema.sql</code></p><p><img src="https://images.hckun.cn/image-20230130222852589.png" alt="image-20230130222852589"></p><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE nacos_conf;;  #创建nacos_conf数据库</span><br></pre></td></tr></table></figure><p>运行<code>mysql-schema.sql</code></p><p><img src="https://images.hckun.cn/image-20230130223327180.png" alt="image-20230130223327180"></p><blockquote><p>修改配置</p></blockquote><p>在nacos的conf目录下找到application.properties，修改以下数据库链接配置：</p><p><img src="https://images.hckun.cn/image-20230130224001994.png" alt="image-20230130224001994"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://localhost:3306/nacos_conf?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="attr">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>重启Nacos</p><p>新建配置</p><p><img src="https://images.hckun.cn/image-20230130225943108.png" alt="image-20230130225943108"></p><p>查看数据库，是否有我们创建的配置</p><p><img src="https://images.hckun.cn/image-20230130230026172.png" alt="image-20230130230026172"></p><h1 id="11、Nacos集群架构"><a href="#11、Nacos集群架构" class="headerlink" title="11、Nacos集群架构"></a>11、Nacos集群架构</h1><p>官方文档：<a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html">https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</a></p><p><img src="https://images.hckun.cn/image-20230130221942828.png" alt="image-20230130221942828"></p><p>我们配置一个nginx转发到三个Nacos，三个Nacos的端口分别为<code>3333</code>/<code>4444</code>/<code>5555</code></p><p>复制一份conf下的<code>cluster.conf.example</code>命名为<code>cluster.conf</code></p><p>在<code>cluster.conf</code>文件中填写以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里我们在配置集群的时候不能直接写127.0.0.1这样，这样分不清楚，所以我们需要知道具体的IP地址，我们可以通过以下命令ifconfig -a</span></span><br><span class="line">192.168.0.100:3333</span><br><span class="line">192.168.0.100:4444</span><br><span class="line">192.168.0.100:5555</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230131212104077.png" alt="image-20230131212104077"></p><p>修改当前配置的端口为<code>3333</code></p><p><img src="https://images.hckun.cn/image-20230131213119787.png" alt="image-20230131213119787"></p><p>在将nacos复制2份，分别修改<code>application.properties</code>的端口为<code>4444``5555</code>,然后启动。</p><p>测试访问：<a href="http://localhost:3333/nacos/#/login">http://localhost:3333/nacos/#/login</a>  <a href="http://localhost:4444/nacos/#/login">http://localhost:4444/nacos/#/login</a>   <a href="http://localhost:5555/nacos/#/login">http://localhost:5555/nacos/#/login</a></p><p><img src="https://images.hckun.cn/image-20230131214215656.png" alt="image-20230131214215656"></p><p>配置<code>nginx.cnf</code>使其转发到我们的Nacos</p><p>修改如下配置：</p><p><img src="https://images.hckun.cn/image-20230131215312528.png" alt="."></p><p>重启nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><p>访问nginx，成功的进行了转发</p><p><img src="https://images.hckun.cn/image-20230131215639846.png" alt="image-20230131215639846"></p><p>新建一个配置测试</p><p><img src="https://images.hckun.cn/image-20230131215741285.png" alt="image-20230131215741285"></p><p>数据库新增成功</p><p><img src="https://images.hckun.cn/image-20230131215835265.png" alt="image-20230131215835265"></p><p>让微服务<code>cloudalibaba-provider-payment9001</code>启动注册进nacos集群 - 修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.175</span><span class="number">.128</span><span class="string">:80</span> <span class="comment">#nginx地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure><p>启动<code>cloudalibaba-provider-payment9001</code></p><p>服务成功注册</p><p><img src="https://images.hckun.cn/image-20230131220208532.png" alt="image-20230131220208532"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud Alibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库安装</title>
      <link href="/post/e335937b.html"/>
      <url>/post/e335937b.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>安装所需依赖</p></blockquote><p>依次执行下列命令，安装所需环境依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum install compat-libstdc++-33 -y</span><br><span class="line">yum install elfutils-libelf-devel -y</span><br><span class="line">yum install gcc-c++ -y</span><br><span class="line">yum install glibc-* -y</span><br><span class="line">yum install ksh -y</span><br><span class="line">yum install libaio -y</span><br><span class="line">yum install libaio-devel -y</span><br><span class="line">yum install libstdc++-devel -y</span><br><span class="line">yum install unixODBC -y</span><br><span class="line">yum install unixODBC-devel -y</span><br></pre></td></tr></table></figure><blockquote><p>创建用户和用户组</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">groupadd oinstall #创建组</span><br><span class="line">groupadd dba  #创建组</span><br><span class="line">groupadd asmadmin  #创建组</span><br><span class="line">groupadd asmdba  #创建组</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建oracle用户，所属大组为oinstall,附属组为dba,asmdba,oper,并指定家目录为/home/oracle</span></span><br><span class="line">useradd -g oinstall -G dba,asmdba oracle -d /home/oracle</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置 oracle用户密码</span></span><br><span class="line">passwd oracle</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230129134942757.png" alt="image-20230129134942757"></p><blockquote><p>关闭防火墙</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld   #关闭防火墙</span><br><span class="line">systemctl status firewalld#查看防火墙状态</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230129135238867.png" alt="image-20230129135238867"></p><blockquote><p>关闭selinux</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br></pre></td></tr></table></figure><p>将SELINUX的值修改为disabled</p><p><img src="https://images.hckun.cn/image-20230129135426563.png" alt="image-20230129135426563"></p><blockquote><p>修改linux内核参数</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>在文件末尾，增加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.shmall = 8388608</span><br><span class="line">kernel.shmmax = 34359738368</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048576</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230129135642147.png" alt="image-20230129135642147"></p><blockquote><p>修改/etc/security/limits.conf文件、/etc/pam.d/login文件、/etc/profile文件</p></blockquote><p><strong>/etc/security/limits.conf文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br></pre></td></tr></table></figure><p>在文件末尾，增加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">oracle soft nproc 2047</span><br><span class="line">oracle hard nproc 16384</span><br><span class="line">oracle soft nofile 1024</span><br><span class="line">oracle hard nofile 65536</span><br><span class="line">oracle soft stack 10240</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230129140327903.png" alt="image-20230129140327903"></p><p><strong>/etc/pam.d/login文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pam.d/login </span><br></pre></td></tr></table></figure><p>在文件末尾，增加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session  required   /lib64/security/pam_limits.so</span><br><span class="line">session  required   pam_limits.so</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230129140514263.png" alt="image-20230129140514263"></p><p><strong>/etc/profile</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>在文件末尾，增加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if [ $USER = &quot;oracle&quot; ]; then</span><br><span class="line">  if [ $SHELL = &quot;/bin/ksh&quot; ]; then</span><br><span class="line">   ulimit -p 16384</span><br><span class="line">   ulimit -n 65536</span><br><span class="line">  else</span><br><span class="line">   ulimit -u 16384 -n 65536</span><br><span class="line">  fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230129140616700.png" alt="image-20230129140616700"></p><p>使profile文件生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><blockquote><p>创建数据库相关目录并授权</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /u01/app/</span><br><span class="line">chown -R oracle:oinstall /home/oracle  </span><br><span class="line">chmod -R 775 /home/oracle  </span><br><span class="line">chown -R oracle:oinstall /u01/app/ </span><br><span class="line">chmod -R 775 /u01/app/</span><br></pre></td></tr></table></figure><p>添加/etc/oraInst.loc文件并授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/oraInst.loc</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inventory_loc=/u01/app/oracle/oraInventory</span><br><span class="line">inst_group=oinstall</span><br></pre></td></tr></table></figure><p>授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown oracle:oinstall /etc/oraInst.loc</span><br><span class="line">chmod 664 /etc/oraInst.loc</span><br></pre></td></tr></table></figure><blockquote><p>切换oracle]用户，并设置用户环境变量</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - oracle</span><br></pre></td></tr></table></figure><p>设置如下环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line">export ORACLE_BASE=/u01/app/oracle</span><br><span class="line">export ORACLE_SID=orcl</span><br></pre></td></tr></table></figure><p>使其生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><blockquote><p>上传并解压oracle安装包</p></blockquote><p>将安装包上传至<code>/home/oracle</code></p><p><img src="https://images.hckun.cn/image-20230129142603577.png" alt="image-20230129142603577"></p><p><img src="https://images.hckun.cn/image-20230129142707107.png" alt="image-20230129142707107"></p><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unzip linux.x64_11gR2_database_1of2.zip</span><br><span class="line">unzip linux.x64_11gR2_database_2of2.zip</span><br></pre></td></tr></table></figure><blockquote><p>切换到root用户并授权相关文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - root  #切换到root用户</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /home/oracle/ </span><br><span class="line">mkdir etc</span><br><span class="line">cp /home/oracle/database/response/* /home/oracle/etc/</span><br><span class="line">chmod 777 /home/oracle/etc/*.rsp</span><br></pre></td></tr></table></figure><blockquote><p>切换到oracle用户，配置数据库安装文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - oracle</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/oracle/etc/db_install.rsp</span><br></pre></td></tr></table></figure><p>按以下配置进行修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">oracle.install.option=INSTALL_DB_SWONLY</span><br><span class="line">ORACLE_HOSTNAME=主机名   #主机名可通过hostname查看</span><br><span class="line">UNIX_GROUP_NAME=oinstall</span><br><span class="line">INVENTORY_LOCATION=/u01/app/oracle/oraInventory</span><br><span class="line">SELECTED_LANGUAGES=en,zh_CN,zh_TW</span><br><span class="line">ORACLE_HOME=/u01/app/oracle/product/11.2.0/db_1</span><br><span class="line">ORACLE_BASE=/u01/app/oracle</span><br><span class="line">oracle.install.db.InstallEdition=EE</span><br><span class="line">oracle.install.db.isCustomInstall=false</span><br><span class="line">oracle.install.db.DBA_GROUP=dba</span><br><span class="line">oracle.install.db.OPER_GROUP=oinstall</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里必须填ture</span></span><br><span class="line">DECLINE_SECURITY_UPDATES=true</span><br></pre></td></tr></table></figure><blockquote><p>执行安装</p></blockquote><p>进入/home/oracle/database目录，执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./runInstaller -silent -force -responseFile /home/oracle/etc/db_install.rsp -ignorePrereq</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230129162939086.png" alt="image-20230129162939086"></p><p>若出现如上错误，需要增加swap分区</p><p>切换到root用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.创建要作为swap分区的文件:增加1GB大小的交换分区，则命令写法如下，其中的count等于想要的块的数量（bs*count=文件大小）</span></span><br><span class="line">dd if=/dev/zero of=/root/swapfile bs=1M count=1024</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.格式化为交换分区文件:</span></span><br><span class="line">mkswap /root/swapfile #建立swap的文件系统</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.启用交换分区文件:</span></span><br><span class="line">swapon /root/swapfile #启用swap文件</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230129163509689.png" alt="image-20230129163509689"></p><p>使系统开机时自启用，在文件/etc/fstab中添加一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/swapfile swap swap defaults 0 0</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230129163538942.png" alt="image-20230129163538942"></p><p>切换到oracle用户的/home/oracle/database目录下</p><p>再次执行<code>./runInstaller -silent -force -responseFile /home/oracle/etc/db_install.rsp -ignorePrereq</code></p><p><img src="https://images.hckun.cn/image-20230129164023704.png" alt="image-20230129164023704"></p><blockquote><p>安装完成后切换到root用户</p></blockquote><p>执行root.sh脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行</span></span><br><span class="line">sh /u01/app/oracle/product/11.2.0/db_1/root.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230129164138346.png" alt="image-20230129164138346"></p><blockquote><p>切换成oracle用户配置环境变量</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - oracle</span><br><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>文件末尾添加如下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">export ORACLE_HOME=$ORACLE_BASE/product/11.2.0/db_1</span><br><span class="line">export TNS_ADMIN=$ORACLE_HOME/network/admin</span><br><span class="line">export PATH=.:$&#123;PATH&#125;:$HOME/bin:$ORACLE_HOME/bin</span><br><span class="line">export PATH=$&#123;PATH&#125;:/usr/bin:/bin:/usr/bin/X11:/usr/local/bin</span><br><span class="line">export LD_LIBRARY_PATH=$&#123;LD_LIBRARY_PATH&#125;:$ORACLE_HOME/lib</span><br><span class="line">export LD_LIBRARY_PATH=$&#123;LD_LIBRARY_PATH&#125;:$ORACLE_HOME/oracm/lib</span><br><span class="line">export LD_LIBRARY_PATH=$&#123;LD_LIBRARY_PATH&#125;:/lib:/usr/lib:/usr/local/lib</span><br><span class="line">export CLASSPATH=$&#123;CLASSPATH&#125;:$ORACLE_HOME/JRE</span><br><span class="line">export CLASSPATH=$&#123;CLASSPATH&#125;:$ORACLE_HOME/JRE/lib</span><br><span class="line">export CLASSPATH=$&#123;CLASSPATH&#125;:$ORACLE_HOME/jlib</span><br><span class="line">export CLASSPATH=$&#123;CLASSPATH&#125;:$ORACLE_HOME/rdbms/jlib</span><br><span class="line">export CLASSPATH=$&#123;CLASSPATH&#125;:$ORACLE_HOME/network/jlib</span><br><span class="line">export LIBPATH=$&#123;CLASSPATH&#125;:$ORACLE_HOME/lib:$ORACLE_HOME/ctx/lib</span><br><span class="line">export ORACLE_OWNER=oracle</span><br><span class="line">export SPFILE_PATH=$ORACLE_HOME/dbs</span><br><span class="line">export ORA_NLS10=$ORACLE_HOME/nls/data</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230129164302455.png" alt="image-20230129164302455"></p><p>使.bash_profile文件生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile </span><br></pre></td></tr></table></figure><blockquote><p>安装数据库实例，配置dbca.rsp文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/oracle/etc/dbca.rsp</span><br></pre></td></tr></table></figure><p>按照如下配置进行修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GDBNAME = &quot;orcl&quot;</span><br><span class="line">SID = &quot;orcl&quot;</span><br><span class="line">SYSPASSWORD = &quot;oracle&quot;</span><br><span class="line">SYSTEMPASSWORD = &quot;oracle&quot;</span><br><span class="line">SYSMANPASSWORD = &quot;oracle&quot;</span><br><span class="line">DBSNMPPASSWORD = &quot;oracle&quot;</span><br><span class="line">DATAFILEDESTINATION =/u01/app/oracle/oradata</span><br><span class="line">RECOVERYAREADESTINATION=/u01/app/oracle/fast_recovery_area</span><br><span class="line">CHARACTERSET = &quot;ZHS16GBK&quot;</span><br><span class="line">TOTALMEMORY = &quot;1638&quot;</span><br><span class="line">其中TOTALMEMORY = &quot;1638&quot; 为1638MB，物理内存2G*80%。```</span><br></pre></td></tr></table></figure><blockquote><p>安装数据库实例</p></blockquote><p>进入/home/oracle/database/response目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbca -silent -responseFile /home/oracle/etc/dbca.rsp</span><br></pre></td></tr></table></figure><p>等待安装成功</p><p><img src="https://images.hckun.cn/image-20230129165225352.png" alt="image-20230129165225352"></p><blockquote><p>监听配置，切换到oracle用户</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su - oracle</span><br><span class="line">配置监听</span><br><span class="line">netca /silent /responsefile /home/oracle/database/response/netca.rsp</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230129165322644.png" alt="image-20230129165322644"></p><p>查看监听状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tnulp | grep 1521</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230129165353631.png" alt="image-20230129165353631"></p><blockquote><p>安装完成，使用navicat连接测试</p></blockquote><p><img src="https://images.hckun.cn/image-20230129165944037.png" alt="image-20230129165944037"></p><p><img src="https://images.hckun.cn/image-20230129165443216.png" alt="image-20230129165443216"></p><p><img src="https://images.hckun.cn/image-20230129165502342.png" alt="image-20230129165502342"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud(十) 调用链路 Sleuth</title>
      <link href="/post/a45f57fe.html"/>
      <url>/post/a45f57fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、Sleuth介绍"><a href="#1、Sleuth介绍" class="headerlink" title="1、Sleuth介绍"></a>1、Sleuth介绍</h1><p>在微服务框架中，一个由客户端发起的请求在后端系统中会经过多个不同的的服务节点调用来协同产生最后的请求结果，每一个前段请求都会形成一条复杂的分布式服务调用链路，链路中的任何一环出现高延时或错误都会引起整个请求最后的失败。</p><p><img src="https://images.hckun.cn/b40478e2b2c83d7181b9c71cdcae05ea.png" alt="b40478e2b2c83d7181b9c71cdcae05ea"></p><p>官方地址：<a href="https://github.com/spring-cloud/spring-cloud-sleuth">https://github.com/spring-cloud/spring-cloud-sleuth</a></p><p>Spring Cloud Sleuth提供了一套完整的服务跟踪的解决方案。</p><p>在分布式系统中提供追踪解决方案并且兼容支持了zipkin。</p><h1 id="2、Sleuth之zipkin搭建"><a href="#2、Sleuth之zipkin搭建" class="headerlink" title="2、Sleuth之zipkin搭建"></a>2、Sleuth之zipkin搭建</h1><p>SpringCloud从F版起已不需要自己构建Zipkin Server了，只需调用jar包即可。</p><p>下载地址：<a href="https://github.com/openzipkin/zipkin">https://github.com/openzipkin/zipkin</a></p><p><img src="https://images.hckun.cn/image-20230128214454668.png" alt="image-20230128214454668"></p><p>运行Zipkin </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar zipkin-server-2.24.0-exec.jar </span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230128215517670.png" alt="image-20230128215517670"></p><p>访问Zipkin</p><p><a href="http://localhost:9411/zipkin/">http://localhost:9411/zipkin/</a></p><p><img src="https://images.hckun.cn/image-20230128215551119.png" alt="image-20230128215551119"></p><blockquote><p>完整的调用链路</p></blockquote><p>表示一请求链路，一条链路通过Trace ld唯一标识，Span标识发起的请求信息，各span通过parent id关联起来。</p><p><img src="https://images.hckun.cn/ec45d9d026fee8c83eaaf7bf8cb6893d.png" alt="ec45d9d026fee8c83eaaf7bf8cb6893d"></p><p>—条链路通过Trace ld唯一标识，Span标识发起的请求信息，各span通过parent id关联起来。</p><p><img src="https://images.hckun.cn/f75fcfd2146df03428b9c8c53d13c1f1.png" alt="f75fcfd2146df03428b9c8c53d13c1f1"></p><p>整个链路的依赖关系如下：</p><p><img src="https://images.hckun.cn/c1d19c5e9724578ee9c8668903685fa4.png" alt="c1d19c5e9724578ee9c8668903685fa4"></p><p>名词解释</p><ul><li><p>Trace：类似于树结构的Span集合，表示一条调用链路，存在唯一标识</p></li><li><p>span：表示调用链路来源，通俗的理解span就是一次请求信息</p></li></ul><h1 id="3、Sleuth链路监控展现"><a href="#3、Sleuth链路监控展现" class="headerlink" title="3、Sleuth链路监控展现"></a>3、Sleuth链路监控展现</h1><p><strong>服务提供者</strong>：<code>cloud-provider-payment8001</code></p><blockquote><p>POM</p></blockquote><p>增加以下坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--包含了sleuth+zipkin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><p>增加zipkin配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span>  <span class="comment">#服务端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span>   <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="comment">#采样率值介于 0 到 1 之间，1 则表示全部采集</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>业务类PaymentController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>@GetMapping(&quot;/payment/zipkin&quot;)public String paymentZipkin() &#123;    return &quot;hi ,i&#39;am paymentzipkin server fall back，welcome to here, O(∩_∩)O哈哈~&quot;;&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**服务消费者**:`cloud-consumer-order80`</span><br><span class="line"></span><br><span class="line">&gt;POM</span><br><span class="line"></span><br><span class="line">增加以下坐标</span><br><span class="line"></span><br><span class="line">```xml</span><br><span class="line">&lt;!--包含了sleuth+zipkin--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><p>增加zipkin配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line">    <span class="attr">sleuth:</span></span><br><span class="line">      <span class="attr">sampler:</span></span><br><span class="line">        <span class="comment">#采样率值介于 0 到 1 之间，1 则表示全部采集</span></span><br><span class="line">        <span class="attr">probability:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进Eurekaserver默认为true。</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure><blockquote><p>业务类OrderController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/zipkin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentZipkin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">&quot;/payment/zipkin/&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>依次启动<code>cloud-eureka-server7001</code>/<code>cloud-provider-payment8001</code>/<code>cloud-consumer-order80</code> </p><p>访问：<a href="http://localhost/consumer/payment/zipkin%E4%BD%BF%60cloud-consumer-order80%60">http://localhost/consumer/payment/zipkin使`cloud-consumer-order80`</a> 调用<code>cloud-provider-payment8001</code></p><p>在zipkin可视化页面中查看完整的调用链路及依赖关系。</p><p><img src="https://images.hckun.cn/image-20230128221518189.png" alt="image-20230128221518189"></p><p><img src="https://images.hckun.cn/image-20230128221531743.png" alt="image-20230128221531743"></p><p><img src="https://images.hckun.cn/image-20230128221548186.png" alt="image-20230128221548186"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud(九) 消息驱动 Stream</title>
      <link href="/post/726bcf42.html"/>
      <url>/post/726bcf42.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、Stream介绍"><a href="#1、Stream介绍" class="headerlink" title="1、Stream介绍"></a>1、Stream介绍</h1><blockquote><p>Spring Cloud Stream为什么被引入</p></blockquote><p>常见MQ(消息中间件)</p><ul><li>ActiveMQ</li><li>RabbitMQ</li><li>RocketMQ</li><li>Kafka</li></ul><p>有没有一种新的技术诞生，让我们不再关注具体MQ的细节，我们只需要用一种适配绑定的方式，自动的给我们在各种MQ内切换。（类似于Hibernate、JDBC）。</p><p>Cloud Stream是什么？屏蔽底层消息中间件的差异，降低切换成本，统一消息的<strong>编程模型</strong>。</p><blockquote><p>什么是Spring Cloud Stream</p></blockquote><p>官方定义Spring Cloud Stream是一个构建消息驱动微服务的框架。</p><p>应用程序通过inputs或者 outputs 来与Spring Cloud Stream中binder对象交互。</p><p>通过我们配置来binding(绑定)，而Spring Cloud Stream 的binder对象负责与消息中间件交互。所以，我们只需要搞清楚如何与Spring Cloud Stream交互就可以方便使用消息驱动的方式。</p><p>通过使用Spring Integration来连接消息代理中间件以实现消息事件驱动。</p><p>Spring Cloud Stream为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布-订阅、消费组、分区的三个核心概念。</p><p>目前仅支持RabbitMQ、 Kafka</p><blockquote><p>Spring Cloud Stream的设计思想</p></blockquote><p><img src="https://images.hckun.cn/dd57e502418ecdae99f29991abe8bb02.png" alt="dd57e502418ecdae99f29991abe8bb02"><img src=""></p><ul><li>生产者/消费者之间靠<strong>消息</strong>媒介传递信息内容</li><li>消息必须走特定的通道 - 消息通道 Message Channel</li><li>消息通道里的消息如何被消费呢，谁负责收发处理 - 消息通道MessageChannel的子接口SubscribableChannel，由MessageHandler消息处理器所订阅</li></ul><blockquote><p>为什么用Spring Cloud Stream</p></blockquote><p>比方说我们用到了RabbitMQ和Kafka，由于这两个消息中间件的架构上的不同，像RabbitMQ有exchange，kafka有Topic和Partitions分区。</p><p><img src="https://images.hckun.cn/5587b05def1c26b8c9d9874c78f80b28.png" alt="5587b05def1c26b8c9d9874c78f80b28"></p><p>这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰，我们如果用了两个消息队列的其中一种，后面的业务需求，我想往另外一种消息队列进行迁移，这时候无疑就是一个灾难性的，一大堆东西都要重新推倒重新做，因为它跟我们的系统耦合了，这时候Spring Cloud Stream给我们提供了—种解耦合的方式。</p><blockquote><p>Spring Cloud Stream为什么可以统一底层差异</p></blockquote><p>在没有绑定器这个概念的情况下，我们的SpringBoot应用要直接与消息中间件进行信息交互的时候，由于各消息中间件构建的初衷不同，它们的实现细节上会有较大的差异性通过定义绑定器作为中间层，完美地实现了应用程序与消息中间件细节之间的隔离。通过向应用程序暴露统一的Channel通道，使得应用程序不需要再考虑各种不同的消息中间件实现。<br><strong>通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离</strong>。</p><p><strong>Binder</strong>：</p><ul><li>INPUT对应于消费者</li><li>OUTPUT对应于生产者</li></ul><p><img src="https://images.hckun.cn/96256569e677453570b55209c26e0b8c.png" alt="96256569e677453570b55209c26e0b8c"></p><p><strong>Stream中的消息通信方式遵循了发布-订阅模式</strong></p><p>Topic主题进行广播</p><ul><li>在RabbitMQ就是Exchange</li><li>在Kakfa中就是Topic</li></ul><h1 id="2、Stream编码常用注解介绍"><a href="#2、Stream编码常用注解介绍" class="headerlink" title="2、Stream编码常用注解介绍"></a>2、Stream编码常用注解介绍</h1><p><strong>Spring Cloud Stream标准流程</strong></p><p><img src="https://images.hckun.cn/077a3b34aec6eed91a7019a9d5ca4e3c.png" alt="077a3b34aec6eed91a7019a9d5ca4e3c"></p><p><img src="https://images.hckun.cn/1ca02dd31581d92a7a610bcd137f6848.png" alt="1ca02dd31581d92a7a610bcd137f6848"></p><ul><li>Binder - 很方便的连接中间件，屏蔽差异。</li><li>Channel - 通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过Channel对队列进行配置。</li><li>Source和Sink - 简单的可理解为参照对象是Spring Cloud Stream自身，从Stream发布消息就是输出，接受消息就是输入。</li></ul><p><strong>编码API和常用注解</strong></p><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td>Middleware</td><td>中间件，目前只支持RabbitMQ和Kafka</td></tr><tr><td>Binder</td><td>Binder是应用与消息中间件之间的封装，目前实行了Kafka和RabbitMQ的Binder，通过Binder可以很方便的连接中间件，可以动态的改变消息类型(对应于Kafka的topic,RabbitMQ的exchange)，这些都可以通过配置文件来实现</td></tr><tr><td>@Input</td><td>注解标识输入通道，通过该输乎通道接收到的消息进入应用程序</td></tr><tr><td>@Output</td><td>注解标识输出通道，发布的消息将通过该通道离开应用程序</td></tr><tr><td>@StreamListene</td><td>监听队列，用于消费者的队列的消息接收</td></tr><tr><td>@EnableBinding</td><td>指信道channel和exchange绑定在一起&gt;</td></tr></tbody></table><blockquote><p>案例说明</p></blockquote><p>新建三个字模块</p><ul><li>cloud-stream-rabbitmq-provider8801，作为生产者进行发消息模块</li><li>cloud-stream-rabbitmq-consumer8802，作为消息接收模块</li><li>cloud-stream-rabbitmq-consumer8803，作为消息接收模块</li></ul><h1 id="3、Stream消息驱动生产者"><a href="#3、Stream消息驱动生产者" class="headerlink" title="3、Stream消息驱动生产者"></a>3、Stream消息驱动生产者</h1><p>新建模块:<code>cloud-stream-rabbitmq-provider8801</code></p><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-stream-rabbitmq-provider8801<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 设置rabbitmq的相关的环境配置</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">49.235</span><span class="number">.98</span><span class="number">.10</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">        <span class="attr">output:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为json，文本则设置“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">-$&#123;spring.cloud.stream.binders.defaultRabbit&#125;</span> <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">send-8801.com</span>  <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment"># 访问的路径变为IP地址</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamMQMain8801</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        SpringApplication.run(StreamMQMain8801.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类</p></blockquote><p>发送消息接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IMessageProvider</span> &#123;</span><br><span class="line">    String <span class="title function_">send</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送消息接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.service.IMessageProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.messaging.Source;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageChannel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.support.MessageBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableBinding(Source.class)</span> <span class="comment">//定义消息的推送管道</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageProviderImpl</span> <span class="keyword">implements</span> <span class="title class_">IMessageProvider</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serial</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        output.send(MessageBuilder.withPayload(serial).build());</span><br><span class="line">        System.out.println(<span class="string">&quot;*****serial: &quot;</span> + serial);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.example.service.IMessageProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IMessageProvider messageProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/sendMessage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">setMessageProvider</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> messageProvider.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>启动:<code>cloud-eureka-server7001``cloud-stream-rabbitmq-provider8801</code></p><p>访问：<a href="http://localhost:8801/sendMessage">http://localhost:8801/sendMessage</a></p><p>后台将打印<code>serial: UUID</code>字符串;RabbitMQ也产生了波动</p><p><img src="https://images.hckun.cn/image-20230127211323148.png" alt="image-20230127211323148"></p><p><img src="https://images.hckun.cn/image-20230127211255327.png" alt="image-20230127211255327"></p><h1 id="4、Stream消息驱动消费者"><a href="#4、Stream消息驱动消费者" class="headerlink" title="4、Stream消息驱动消费者"></a>4、Stream消息驱动消费者</h1><p>新建模块：<code>cloud-stream-rabbitmq-consumer8802</code></p><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-stream-rabbitmq-consumer8802<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8802</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 设置rabbitmq的相关的环境配置</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">49.235</span><span class="number">.98</span><span class="number">.10</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">        <span class="attr">input:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为对象json，如果是文本则设置“text/plain”</span></span><br><span class="line">          <span class="attr">default-binder:</span> <span class="string">defaultRabbit</span> <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">receive-8802.com</span>  <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment"># 访问的路径变为IP地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamMQMain8802</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(StreamMQMain8802.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.EnableBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.annotation.StreamListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.stream.messaging.Sink;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding(Sink.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveMessageListenerController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener(Sink.INPUT)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">input</span><span class="params">(Message&lt;String&gt; message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者1号,-----&gt;接受到的消息: &quot;</span> + message.getPayload() + <span class="string">&quot;\t  port: &quot;</span> + serverPort);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>启动：<code>cloud-eureka-server7001``cloud-stream-rabbitmq-provider8801``cloud-stream-rabbitmq-consumer8802</code></p><p><code>cloud-stream-rabbitmq-provider8801</code>:发送消息</p><p><code>cloud-stream-rabbitmq-consumer8802</code>:接收消息</p><p><img src="https://images.hckun.cn/image-20230127212048159.png" alt="image-20230127212048159"></p><p><img src="https://images.hckun.cn/image-20230127212056822.png" alt="image-20230127212056822"></p><h1 id="5、Stream消息重复消费"><a href="#5、Stream消息重复消费" class="headerlink" title="5、Stream消息重复消费"></a>5、Stream消息重复消费</h1><p>依照<code>cloud-stream-rabbitmq-consumer8802</code>，克隆出来一份运行<code>cloud-stream-rabbitmq-consumer8803</code></p><p>启动：<code>cloud-eureka-server7001``cloud-stream-rabbitmq-provider8801``cloud-stream-rabbitmq-consumer8802``cloud-stream-rabbitmq-consumer8803</code></p><blockquote><p>存在问题</p></blockquote><ul><li>有重复消费问题</li><li>消息持久化问题</li></ul><p>访问：<a href="http://localhost:8801/sendMessage">http://localhost:8801/sendMessage</a> </p><p>目前是<code>cloud-stream-rabbitmq-consumer8802</code>/<code>cloud-stream-rabbitmq-consumer8803</code>同时都收到了，存在重复消费问题</p><p>如何解决：分组和持久化属性group</p><p>比如在如下场景中，订单系统我们做集群部署，都会从RabbitMQ中获取订单信息，那如果一个订单同时被两个服务获取到，那么就会造成数据错误，我们得避免这种情况。这时我们就可以<strong>使用Stream中的消息分组来解决</strong>。</p><p><img src="https://images.hckun.cn/f61e83441af907a42e8886368bde59ff.png" alt="f61e83441af907a42e8886368bde59ff"></p><p>注意在Stream中处于同一个group中的多个消费者是竞争关系，就能够保证消息只会被其中一个应用消费一次。不同组是可以全面消费的(重复消费)。</p><h1 id="6、Stream消息重复消费解决"><a href="#6、Stream消息重复消费解决" class="headerlink" title="6、Stream消息重复消费解决"></a>6、Stream消息重复消费解决</h1><p><strong>原理</strong></p><p>微服务应用放置于同一个group中，就能够保证消息只会被其中一个应用消费一次。</p><p><strong>不同的组</strong>是可以重复消费的，<strong>同一个组</strong>内会发生竞争关系，只有其中一个可以消费。</p><p><code>cloud-stream-rabbitmq-consumer8802</code>/<code>cloud-stream-rabbitmq-consumer8803</code>都变成不同组，group两个不同</p><p><code>cloud-stream-rabbitmq-consumer8802</code>修改YML配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8802</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 设置rabbitmq的相关的环境配置</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">49.235</span><span class="number">.98</span><span class="number">.10</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment"># 在此处配置要绑定的rabbitmq的服务信息；</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment"># 表示定义的名称，用于于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment"># 消息组件类型</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment"># 服务的整合处理</span></span><br><span class="line">        <span class="attr">input:</span> <span class="comment"># 这个名字是一个通道的名称</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment"># 表示要使用的Exchange名称定义</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment"># 设置消息类型，本次为对象json，如果是文本则设置“text/plain”</span></span><br><span class="line">          <span class="attr">default-binder:</span> <span class="string">defaultRabbit</span> <span class="comment"># 设置要绑定的消息服务的具体设置</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">8802_group</span>  <span class="comment">#增加组名</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment"># 客户端进行Eureka注册的配置</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment"># 设置心跳的时间间隔（默认是30秒）</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment"># 如果现在超过了5秒的间隔（默认是90秒）</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">receive-8802.com</span>  <span class="comment"># 在信息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>     <span class="comment"># 访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure><p><code>cloud-stream-rabbitmq-consumer8803</code>修改YML（与<code>cloud-stream-rabbitmq-consumer8802</code>的类似位置 <code>group: 8803_group</code>）</p><p>重启<code>cloud-stream-rabbitmq-consumer8802</code>/<code>cloud-stream-rabbitmq-consumer8803</code></p><p>结论：<strong>还是重复消费</strong></p><blockquote><p>解决</p></blockquote><p><code>Cloud-stream-rabbitmq-consumer8802</code>/<code>cloud-stream-rabbitmq-consumer8803</code>实现了轮询分组，每次只有一个消费者，8801模块的发的消息只能被8802或8803其中一个接收到，这样避免了重复消费。</p><p><strong>8802/8803都变成相同组，group两个相同</strong></p><p>8802修改YML<code>group: A_group</code></p><p>8803修改YML<code>group: A_group</code></p><p>重启<code>cloud-stream-rabbitmq-consumer8802</code>/<code>cloud-stream-rabbitmq-consumer8803</code></p><p>重复消费问题得到解决：同一个组的多个微服务实例，每次只会有一个拿到。</p><h1 id="7、Stream消息持久化"><a href="#7、Stream消息持久化" class="headerlink" title="7、Stream消息持久化"></a>7、Stream消息持久化</h1><p>通过上述group，解决了重复消费问题，再看看持久化。</p><p>先停止8802/8803并<strong>去除掉</strong>8802的分组<code>group: A_group</code>，8803的分组<code>group: A_g</code></p><p><code>roup</code>没有去掉。</p><p>8801先发送2条消息到RabbitMQ。</p><p>先启动8802，<strong>无分组属性配置</strong>，后台没有打出来消息。</p><p>再启动8803，<strong>有分组属性配置</strong>，后台打出来了MQ上的消息。(消息持久化体现)。</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据迁移与恢复</title>
      <link href="/post/15d399c.html"/>
      <url>/post/15d399c.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、数据迁移"><a href="#1、数据迁移" class="headerlink" title="1、数据迁移"></a>1、数据迁移</h1><p>在我们的工作中，有时可能由于更换服务器需要迁移MySQL数据，那么我们怎么高效、安全的迁移数据库那？</p><p>常用的MySQL数据迁移方式有三种：</p><ul><li>通过Navlicat导出、导入<code>sql</code>文件</li><li>使用<code>mysqldump</code>导出、导入<code>sql</code>文件</li><li>通过拷贝数据库的<code>data</code>目录</li></ul><blockquote><p>环境准备</p></blockquote><p>首先在win服务器上，安装两个MySQL服务：<code>3306``3308</code></p><p>解压版MySQL安装见：<a href="https://hckun.cn/post/30720df8.html">https://hckun.cn/post/30720df8.html</a></p><p><img src="https://images.hckun.cn/image-20230113143254584.png" alt="image-20230113143254584"></p><p>使用<code>Navicat</code>连接两个MySQL服务</p><p><img src="https://images.hckun.cn/image-20230113143544673.png" alt="image-20230113143544673"></p><p><code>MYSQL3306</code>执行如下sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE test;  #创建数据库</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;  </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`  (     #创建表</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"> #插入测试数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;tom&#x27;</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><blockquote><p>方式一：通过Navicat导出、导入<code>sql</code>文件</p></blockquote><ul><li>导出</li></ul><p><code>MySQL3306</code>将<code>test</code>数据导出为sql文件</p><p>选中<code>test</code>数据库==&gt;右键转存SQL文件==》结构和数据</p><p><img src="https://images.hckun.cn/image-20230113144117631.png" alt="image-20230113144117631"></p><p>选择保存路径，导出即可</p><ul><li>导入</li></ul><p><code>MySQL3308</code>创建<code>test</code>数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE test;</span><br></pre></td></tr></table></figure><p>选中<code>test</code>数据库==》右键运行SQL文件==》选择刚刚导出的sql文件</p><p><img src="https://images.hckun.cn/image-20230113144641432.png" alt="image-20230113144641432"></p><p>开始导入，等待片刻，导入成功</p><p><img src="https://images.hckun.cn/image-20230113144715885.png" alt="image-20230113144715885"></p><p>此种方式，每次只能导出一个数据库，并且如果数据量比较大的情况导入、导出是非常耗费时间的。</p><p>数据量小：推荐。</p><p>数据量大：不推荐。</p><blockquote><p>方式二：通过<code>mysqldump</code>导出、导入<code>sql</code>文件</p></blockquote><p>导出命令:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#备份整个数据库</span><br><span class="line">mysqldump <span class="operator">-</span>u 用户名 <span class="operator">-</span>p <span class="operator">-</span>B 数据库<span class="number">1</span> 数据库<span class="number">2</span> 数据库n <span class="operator">&gt;</span> 文件名.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#备份数据库中指定表</span><br><span class="line">mysqldump <span class="operator">-</span>u 用户名 <span class="operator">-</span>p 数据库 表<span class="number">1</span> 表<span class="number">2</span> 表n <span class="operator">&gt;</span>文件名.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure><p>备份<code>MySQL3306</code>服务 <code>test</code>数据库（需进入MySQL安装bin目录执行命令）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u root <span class="operator">-</span>p <span class="operator">-</span>B test <span class="operator">&gt;</span> C:<span class="operator">/</span>test.sql</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230127160804839.png" alt="image-20230127160804839"></p><p>将导出的<code>test.sql</code> 导入<code>MySQL3308</code>(此种方式无需创建数据库，会自动创建）</p><p>进入MySQL后，命令行执行如下语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source C:<span class="operator">/</span>test.sql</span><br></pre></td></tr></table></figure><p>查看<code>MySQL3308</code>数据库导入成功</p><p><img src="https://images.hckun.cn/image-20230127161304855.png" alt="image-20230127161304855"></p><blockquote><p>方式三：通过拷贝<code>data</code>文件</p></blockquote><ul><li><p>删除<code>MySQL3308</code>的<code>test</code>数据库</p></li><li><p>停止<code>MySQL3306</code> <code>MySQL3308</code>服务</p></li><li><p>将<code>MySQL3308</code>服务的<code>data</code>备份(重命名data即可)</p></li></ul><p><img src="https://images.hckun.cn/image-20230113145105856.png" alt="image-20230113145105856"></p><ul><li>将<code>MySQL3306</code> 的data目录拷贝到<code>MySQL3308</code>中</li><li>重新启动<code>MySQL3308</code></li><li>通过Navicat观察数据库是否可正常使用</li></ul><p><img src="https://images.hckun.cn/image-20230113145311455.png" alt="image-20230113145311455"></p><p>成功迁移。</p><p>此种方式，可以将所有的数据库一次性迁移，即使数据量比较大，也不会太耗费时间，但没有方式一、二零活。</p><h1 id="2、数据恢复"><a href="#2、数据恢复" class="headerlink" title="2、数据恢复"></a>2、数据恢复</h1><p>在工作中，我们可能有时因为自己的疏忽大意或程序BUG导致误删或修改数据，但这部分数据又对我们非常的重要，可能会因此丢失而工作，那能不能<code>撤回</code>本次操作把数据恢复回来那？</p><p>首先、恢复的前提是<code>要保证MySQL已经开启binlog</code></p><p>如果没有开启binlog，也没有预先生成回滚SQL，那可能真的无法快速回滚了。对存放重要业务数据的MySQL，强烈建议开启binlog</p><blockquote><p>查看MySQL是否开启<code>binlog</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like&#x27;%log_bin%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230113150309001.png" alt="image-20230113150309001"></p><p>值为OFF，需开启，值为ON，已开启。</p><blockquote><p>开启binlog</p></blockquote><p>在<code>my.ini</code>添加配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log-bin=mysql-bin</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230113151049832.png" alt="image-20230113151049832"></p><p>server-id表示单个结点的id，这里由于只有一个结点，所以可以把id随机指定为一个数，这里将id设置成1。若集群中有多个结点，则id不能相同。</p><p> 第二句是指定binlog日志文件的名字为mysql-bin，以及其存储路径。</p><p>重启MySQL</p><p>再次查看binlog的开启状态</p><p><img src="https://images.hckun.cn/image-20230113151202863.png" alt="image-20230113151202863"></p><blockquote><p>模拟误删操作</p></blockquote><p>删除user表，重新创建、插入数据</p><p>执行以下删除sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> id <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230113151512246.png" alt="image-20230113151512246"></p><blockquote><p>恢复数据</p></blockquote><p>我们上面误删了id为1、2的用户，现在我们将1、2用户还原回来</p><p>查看binlog日志列表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> master logs;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230113152052569.png" alt="image-20230113152052569"></p><p>确定我们恢复的数据就在mysql-bin.000001文件内。</p><p>也可以通过执行如下命令，查看文件最后一个操作事件 Position 结束点的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> master status;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230113152233781.png" alt="image-20230113152233781"></p><blockquote><p>导出日志文件</p></blockquote><p>可以在终端工具中执行如下命令查看该文件内的内容，但是内容很多的情况下查看或者查询起来并不方便。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> binlog events <span class="keyword">in</span> <span class="string">&#x27;mysql-bin.000001&#x27;</span>\G;</span><br></pre></td></tr></table></figure><p>所以我们可以将该文件导出为 sql 或者 txt 文件</p><p>进入到mysql的bin目录下</p><p>生成 sql 文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、全部导出</span><br><span class="line">mysqlbinlog <span class="comment">--no-defaults C:\mysql\mysql1\mysql-5.7.19-winx64\mysql-5.7.19-winx64\mysql-bin.000001 &gt; C:\Users\Administrator\Desktop\test.sql;</span></span><br><span class="line"><span class="number">2</span>、指定一个时间区间来导出</span><br><span class="line">mysqlbinlog <span class="operator">-</span><span class="keyword">no</span><span class="operator">-</span>defaults <span class="comment">--start-datetime=&quot;2023-01-13 12:00:00&quot; --stop-datetime=&quot;2023-01-13 17:00:00&quot; C:\mysql\mysql1\mysql-5.7.19-winx64\mysql-5.7.19-winx64\mysql-bin.000001 &gt; C:\Users\Administrator\Desktop\test.sql;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20230113153218531.png" alt="image-20230113153218531"></p><p>根据查看导出的 sql 文件，精准确定是哪一步执行的删除语句，然后记录好时间区间和 pos 点的区间，进行如下的数据恢复。</p><p><img src="https://images.hckun.cn/image-20230113160543593.png" alt="image-20230113160543593"></p><p>恢复数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">按pos点</span><br><span class="line">mysqlbinlog  <span class="comment">--no-defaults --start-position=开始点 --stop-position=结束点  /binlog路径/mysql-bin.000001 | ./mysql -u用户名 -p密码  数据库</span></span><br></pre></td></tr></table></figure><p>执行如下命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog <span class="comment">--no-defaults --start-position=291 --stop-position=761 C:\mysql\mysql1\mysql-5.7.19-winx64\mysql-5.7.19-winx64\mysql-bin.000004 | mysql -uroot -proot  test</span></span><br></pre></td></tr></table></figure><p>成功恢复</p><p><img src="https://images.hckun.cn/image-20230127164751061.png" alt="image-20230127164751061"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud(八) 消息总线 Bus</title>
      <link href="/post/bd75439e.html"/>
      <url>/post/bd75439e.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、消息总线概述"><a href="#1、消息总线概述" class="headerlink" title="1、消息总线概述"></a>1、消息总线概述</h1><blockquote><p>消息总线是什么</p></blockquote><p>简而言之，分布式自动刷新配置功能。</p><p>Spring Cloud Bus配合上一节Spring Cloud Config使用可以实现配置的动态刷新。</p><p><img src="https://images.hckun.cn/458fd679c01274ca84f785e1f75c1336.png" alt="458fd679c01274ca84f785e1f75c1336"></p><p>Spring Cloud Bus是用来将分布式系统的节点与轻量级消息系统链接起来的框架，它整合了Java的事件处理机制和消息中间件的功能。Spring Clud Bus目前支持RabbitMQ和Kafka。</p><blockquote><p>能干嘛</p></blockquote><p>Spring Cloud Bus能管理和传播分布式系统间的消息，就像一个分布式执行器，可用于广播状态更改、事件推送等，也可以当作微服务间的通信通道。</p><p><img src="https://images.hckun.cn/26c6ced30935219d4717814a446eb67a.png" alt="26c6ced30935219d4717814a446eb67a"></p><blockquote><p>什么是总线</p></blockquote><p>在微服务架构的系统中，通常会使用轻量级的消息代理来构建一个共用的消息主题，并让系统中所有微服务实例都连接上来。由于该主题中产生的消息会被所有实例监听和消费，所以称它为<strong>消息总线</strong>。在总线上的各个实例，都可以方便地广播一些需要让其他连接在该主题上的实例都知道的消息。</p><blockquote><p>基本原理</p></blockquote><p>ConfigClient实例都监听MQ中同一个topic(默认是Spring Cloud Bus)。当一个服务刷新数据的时候，它会把这个信息放入到Topic中，这样其它监听同一Topic的服务就能得到通知，然后去更新自身的配置。</p><h1 id="2、消息总线RabbitMQ环境配置"><a href="#2、消息总线RabbitMQ环境配置" class="headerlink" title="2、消息总线RabbitMQ环境配置"></a>2、消息总线RabbitMQ环境配置</h1><p>下载<code>Erlang</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --content-disposition https://packagecloud.io/rabbitmq/erlang/packages/el/7/erlang-23.3-2.el7.x86_64.rpm/download.rpm?distro_version_id=140</span><br></pre></td></tr></table></figure><p>下载<code>RabbitMQ</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --content-disposition https://packagecloud.io/rabbitmq/rabbitmq-server/packages/el/7/rabbitmq-server-3.10.0-1.el7.noarch.rpm/download.rpm?distro_version_id=140</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221230195008220.png" alt="image-20221230195008220"></p><blockquote><p>安装</p></blockquote><p>分别执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh erlang-23.3-2.el7.x86_64.rpm </span><br><span class="line">rpm -ivh rabbitmq-server-3.10.0-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><blockquote><p>启动</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start rabbitmq-server</span><br></pre></td></tr></table></figure><p>查看<code>rabbitmq-server</code>运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status rabbitmq-server</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221230195235357.png" alt="image-20221230195235357"></p><p>看下如下信息说明安装并启动成功</p><blockquote><p>开启rabbitmq中的插件管理</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><blockquote><p>可视化界面</p></blockquote><p>浏览器访问：<a href="http://49.235.98.10:15672/">http://49.235.98.10:15672/</a></p><p><img src="https://images.hckun.cn/image-20221230195702251.png" alt="image-20221230195702251"></p><p>记得开启防火墙端口<code>15672</code></p><blockquote><p>登录</p></blockquote><p>新建账号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建账号</span></span><br><span class="line">rabbitmqctl add_user username password</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置用户角色</span></span><br><span class="line">rabbitmqctl  set_user_tags username administrator</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置用户权限</span></span><br><span class="line">rabbitmqctl set_permissions -p &#x27;/&#x27; username &#x27;.*&#x27; &#x27;.*&#x27; &#x27;.*&#x27;</span><br></pre></td></tr></table></figure><p>使用我们创建的账号登录rabbitmq后台</p><p><img src="https://images.hckun.cn/image-20221230212708324.png" alt="image-20221230212708324"></p><h1 id="3、Bus动态刷新全局广播理论"><a href="#3、Bus动态刷新全局广播理论" class="headerlink" title="3、Bus动态刷新全局广播理论"></a>3、Bus动态刷新全局广播理论</h1><p>首先我们必须将我们的<code>RabbitMQ</code>准备好</p><p>演示广播效果，增加复杂度，我们以<code>cloud-config-client-3355</code>为模板再制作一个<code>cloud-config-client-3366</code></p><blockquote><p>新建模块loud-config-client-3366</p></blockquote><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>loud-config-client-3366<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3366</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClient3366</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConfigClient3366.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClientController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">configInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;serverPort: &quot;</span> + serverPort + <span class="string">&quot;\t\n\n configInfo: &quot;</span> + configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>设计思想</p></blockquote><p>利用消息总线触发一个客户端<code>/bus/refresh</code>,而刷新所有客户端的配置</p><p><img src="https://images.hckun.cn/3a0975f4bac7393fe406821531e9daef.png" alt="3a0975f4bac7393fe406821531e9daef"></p><p>利用消息总线触发一个服务端ConfigServer的<code>/bus/refresh</code>端点，而刷新所有客户端的配置</p><p><img src="https://images.hckun.cn/e2809f728b8eb3e776883e4f905b8712.png" alt="e2809f728b8eb3e776883e4f905b8712"></p><p>图二的架构显然更加适合，图—不适合的原因如下:</p><ul><li>打破了微服务的职责单一性，因为微服务本身是业务模块，它本不应该承担配置刷新的职责</li><li>破坏了微服务各节点的对等性</li><li>有一定的局限性。例如，微服务在迁移时，它的网络地址常常会发生变化，此时如果想要做到自动刷新，那就会增加更多的修改</li></ul><h1 id="4、Bus动态刷新全局广播实现"><a href="#4、Bus动态刷新全局广播实现" class="headerlink" title="4、Bus动态刷新全局广播实现"></a>4、Bus动态刷新全局广播实现</h1><blockquote><p>给cloud-config-center-3344配置中心服务端添加消息总线支持依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>修改cloud-config-center-3344YML</p></blockquote><p>增加rabbitmq相关配置暴露bus刷新配置的端点</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-config-center</span> <span class="comment">#注册进Eureka服务器的微服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/strugglekun/sping-cloud.git</span> <span class="comment">#Gitee仓库地址</span></span><br><span class="line">          <span class="attr">search-paths:</span>  <span class="comment">#仓库文件夹名称</span></span><br><span class="line">          <span class="attr">username:</span> <span class="number">15538305708</span>   <span class="comment">#仓库用户名（公开库可以不用填写）</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">Abc@123456</span>  <span class="comment">#仓库密码（公开库可以不用填写）</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#rabbitmq相关配置</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">49.235</span><span class="number">.98</span><span class="number">.10</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#rabbitmq相关配置,暴露bus刷新配置的端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;bus-refresh&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>cloud-config-client-3355客户端添加消息总线支持</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址</span></span><br><span class="line">  <span class="comment">#rabbitmq相关配置</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">49.235</span><span class="number">.98</span><span class="number">.10</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line"><span class="comment"># 暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><blockquote><p>给cloud-config-client-3366客户端添加消息总线支持</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3366</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址</span></span><br><span class="line">  <span class="comment">#rabbitmq相关配置</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">49.235</span><span class="number">.98</span><span class="number">.10</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>依次启动：<code>cloud-eureka-server7001</code> <code>cloud-config-center-3344</code>  <code>cloud-config-client-3355</code></p><p><code>cloud-config-client-3366</code></p><p>先访问配置中心3344中的配置：<a href="http://config-3344.com:3344/master/config-dev.yml">http://config-3344.com:3344/master/config-dev.yml</a></p><p><img src="https://images.hckun.cn/image-20221230220742859.png" alt="image-20221230220742859"></p><p>访问3355：<a href="http://localhost:3355/configInfo">http://localhost:3355/configInfo</a></p><p><img src="https://images.hckun.cn/image-20221230220839632.png" alt="image-20221230220839632"></p><p>访问3366：<a href="http://localhost:3366/configInfo">http://localhost:3366/configInfo</a></p><p><img src="https://images.hckun.cn/image-20221230221705663.png" alt="image-20221230221705663"></p><p>均能正常访问，且<code>version=3</code></p><p>接下来，我们修改Gitee中 <code>config-dev.yml</code> 使<code>version=4</code></p><p><img src="https://images.hckun.cn/image-20221230221941078.png" alt="image-20221230221941078"></p><p>访问配置中心3344:<a href="http://config-3344.com:3344/master/config-dev.yml">http://config-3344.com:3344/master/config-dev.yml</a></p><p><img src="https://images.hckun.cn/image-20221230222012975.png" alt="image-20221230222012975"></p><p>配置中心已发生变化</p><p>访问3355、3366 发现均没有改变，version的值仍为3</p><p>执行<code>curl -X POST &quot;http://localhost:3344/actuator/bus-refresh&quot;</code> 通知我们的3344、3355更新配置</p><p><strong>—次发送，处处生效</strong></p><p>再次访问3344、3355发现配置均已发生改变<code>version=4</code></p><h1 id="5、Bus动态刷新单个通知"><a href="#5、Bus动态刷新单个通知" class="headerlink" title="5、Bus动态刷新单个通知"></a>5、Bus动态刷新单个通知</h1><p>假如我们不想全部通知，只想修改其中的某一个</p><p>接下来我们只通知3355、不通知3366</p><p>语法：<code>http://localhost:3344/actuator/bus-refresh/&#123;destination&#125;</code></p><p><code>/bus/refresh</code>请求不再发送到具体的服务实例上，而是发给<code>config server</code>通过<code>destination</code>参数类指定需要更新配置的服务或实例</p><p>修改Gitee中 <code>config-dev.yml</code> 使<code>version=6</code></p><p>访问配置中心3344:<a href="http://config-3344.com:3344/master/config-dev.yml">http://config-3344.com:3344/master/config-dev.yml</a></p><p><img src="https://images.hckun.cn/image-20221230223532312.png" alt="image-20221230223532312"></p><p>没通知之前3355、3366均为version=5</p><p><img src="https://images.hckun.cn/image-20221230223610060.png" alt="image-20221230223610060"></p><p><img src="https://images.hckun.cn/image-20221230223618430.png" alt="image-20221230223618430"></p><p>接下来我们通知3355，执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;http://localhost:3344/actuator/bus-refresh/config-client:3355&quot;</span><br></pre></td></tr></table></figure><p>访问3355:</p><p><img src="https://images.hckun.cn/image-20221230223801476.png" alt="image-20221230223801476"></p><p>访问3366:</p><p><img src="https://images.hckun.cn/image-20221230223817509-20221230223821669.png" alt="image-20221230223817509"></p><p>我们想要的效果已经实现，单独通知某个服务更新。</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud(七) 分布式配置中心 Config</title>
      <link href="/post/fe058996.html"/>
      <url>/post/fe058996.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、分布式配置中心介绍"><a href="#1、分布式配置中心介绍" class="headerlink" title="1、分布式配置中心介绍"></a>1、分布式配置中心介绍</h1><p>官网：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/">https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/</a></p><blockquote><p>分布式系统面临的配置问题</p></blockquote><p>微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务。由于每个服务都需要必要的配置信息才能运行，所以一套集中式的、动态的配置管理设施是必不可少的。</p><p>SpringCloud提供了ConfigServer来解决这个问题，我们每一个微服务自己带着一个application.yml，上百个配置文件的管理.……</p><p><img src="https://images.hckun.cn/d5462e3b8c3a063561f5f8fc7fde327e.png" alt="d5462e3b8c3a063561f5f8fc7fde327e"></p><p>SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置。</p><blockquote><p>分布式配置中心怎么玩</p></blockquote><p>SpringCloud Config分为<strong>服务端</strong>和<strong>客户端</strong>两部分。</p><ul><li>服务端也称为分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密/解密信息等访问接口。</li><li>客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。</li></ul><blockquote><p>分布式配置中心能干嘛</p></blockquote><ul><li>集中管理配置文件</li><li>不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release</li><li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li><li>将配置信息以REST接口的形式暴露 - post/crul访问刷新即可…</li></ul><h1 id="2、分布式配置中心搭建"><a href="#2、分布式配置中心搭建" class="headerlink" title="2、分布式配置中心搭建"></a>2、分布式配置中心搭建</h1><blockquote><p>Gitee仓库创建</p></blockquote><p>使用Gitee创建一个仓库<code>spingCloud</code>,将以下配置文件内容上传至<code>spingCloud</code>仓库中</p><ul><li>config-dev.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">&quot;master branch,springcloud-config/config-dev.yml version=1&quot;</span></span><br></pre></td></tr></table></figure><ul><li>config-prod.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">&quot;master branch,springcloud-config/config-prod.yml version=1&quot;</span></span><br></pre></td></tr></table></figure><ul><li>config-test.yml</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">&quot;master branch,springcloud-config/config-test.yml version=1&quot;</span> </span><br></pre></td></tr></table></figure><blockquote><p>新建模块cloud-config-center-3344</p></blockquote><p>即为Cloud的配置中心模块CloudConfig Center</p><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-config-center-3344<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span>  <span class="string">cloud-config-center</span> <span class="comment">#注册进Eureka服务器的微服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/strugglekun/sping-cloud.git</span> <span class="comment">#Gitee仓库地址</span></span><br><span class="line">          <span class="attr">search-paths:</span>  <span class="comment">#仓库文件夹名称</span></span><br><span class="line">          <span class="attr">username:</span>    <span class="comment">#仓库用户名（公开库可以不用填写）</span></span><br><span class="line">          <span class="attr">password:</span>   <span class="comment">#仓库密码（公开库可以不用填写）</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">####读取分支</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigCenter3344</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConfigCenter3344.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改hosts文件，增加映射</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 config-3344.com</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>测试通过Config微服务看能否可以从Gitee上获取配置内容</p><p>浏览器访问：<a href="http://config-3344.com:3344/master/config-dev.yml">http://config-3344.com:3344/master/config-dev.yml</a></p><p><img src="https://images.hckun.cn/image-20221229201446809.png" alt="image-20221229201446809"></p><blockquote><p>配置读取规则</p></blockquote><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-config/2.2.1.RELEASE/reference/html/#_quick_start">官方文档</a></p><p><img src="https://images.hckun.cn/image-20221229201535856.png" alt="image-20221229201535856"></p><ul><li>/{label}/{application}-{profile}.yml（推荐）<ul><li>master分支<ul><li><a href="http://config-3344.com:3344/master/config-dev.yml">http://config-3344.com:3344/master/config-dev.yml</a></li><li><a href="http://config-3344.com:3344/master/config-test.yml">http://config-3344.com:3344/master/config-test.yml</a></li><li><a href="http://config-3344.com:3344/master/config-prod.yml">http://config-3344.com:3344/master/config-prod.yml</a></li></ul></li><li>dev分支<ul><li><a href="http://config-3344.com:3344/dev/config-dev.yml">http://config-3344.com:3344/dev/config-dev.yml</a></li><li><a href="http://config-3344.com:3344/dev/config-test.yml">http://config-3344.com:3344/dev/config-test.yml</a></li><li><a href="http://config-3344.com:3344/dev/config-prod.yml">http://config-3344.com:3344/dev/config-prod.yml</a></li></ul></li></ul></li><li>/{application}-{profile}.yml<ul><li><a href="http://config-3344.com:3344/config-dev.yml">http://config-3344.com:3344/config-dev.yml</a></li><li><a href="http://config-3344.com:3344/config-test.yml">http://config-3344.com:3344/config-test.yml</a></li><li><a href="http://config-3344.com:3344/config-prod.yml">http://config-3344.com:3344/config-prod.yml</a></li><li><a href="http://config-3344.com:3344/config-xxxx.yml(%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E9%85%8D%E7%BD%AE)">http://config-3344.com:3344/config-xxxx.yml(不存在的配置)</a></li></ul></li><li>/{application}/{profile}[/{label}]<ul><li><a href="http://config-3344.com:3344/config/dev/master">http://config-3344.com:3344/config/dev/master</a></li><li><a href="http://config-3344.com:3344/config/test/master">http://config-3344.com:3344/config/test/master</a></li><li><a href="http://config-3344.com:3344/config/test/dev">http://config-3344.com:3344/config/test/dev</a></li></ul></li><li>重要配置细节总结<ul><li>/{name}-{profiles}.yml</li><li>/{label}-{name}-{profiles}.yml</li><li>label：分支(branch)</li><li>name：服务名</li><li>profiles：环境(dev/test/prod)</li></ul></li></ul><p>成功实现了用SpringCloud Config通过Gitee获取配置信息</p><h1 id="3、Config客户端配置与读取"><a href="#3、Config客户端配置与读取" class="headerlink" title="3、Config客户端配置与读取"></a>3、Config客户端配置与读取</h1><blockquote><p>新建模块cloud-config-client-3355</p></blockquote><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-config-client-3355<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>bootstrap.yml</p></blockquote><p><code>applicaiton.yml</code>是用户级的资源配置项</p><p><code>bootstrap.yml</code>是系统级的，优先级更加高</p><p>Spring Cloud会创建一个Bootstrap Context，作为Spring应用的Application Context的父上下文。</p><p>初始化的时候，BootstrapContext负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的Environment。</p><p>Bootstrap属性有高优先级，默认情况下，它们不会被本地配置覆盖。Bootstrap context和Application Context有着不同的约定，所以新增了一个bootstrap.yml文件，保证Bootstrap Context和Application Context配置的分离。</p><p>要将Client模块下的application.yml文件改为bootstrap.yml,这是很关键的，因为bootstrap.yml是比application.yml先加载的。bootstrap.yml优先级高于application.yml。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#Config客户端配置</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span> <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span> <span class="comment">#配置文件名称</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span> <span class="comment">#读取后缀名称   上述3个综合：master分支上config-dev.yml的配置文件被读取http://config-3344.com:3344/master/config-dev.yml</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span> <span class="comment">#配置中心地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务注册到eureka地址</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClient3355</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConfigClient3355.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClientController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConfigInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>启动配置中心<code>cloud-config-center-3344</code></p><p>浏览器访问：<a href="http://config-3344.com:3344/master/config-prod.yml">http://config-3344.com:3344/master/config-prod.yml</a> <a href="http://config-3344.com:3344/master/config-dev.yml">http://config-3344.com:3344/master/config-dev.yml</a></p><p>均能正常访问到Gitee中的配置</p><p>启动配置客户端<code>cloud-config-client-3355</code></p><p>浏览器访问：<a href="http://config-3344.com:3355/configInfo">http://config-3344.com:3355/configInfo</a></p><p><img src="https://images.hckun.cn/image-20221229210947234.png" alt="image-20221229210947234"></p><p>说明我们的客户端成功拉取到了启动配置中心<code>cloud-config-center-3344</code>中<code>config-dev.yml</code>的配置</p><p><strong>成功实现了客户端3355访问SpringCloud Config3344通过Gitee获取配置信息可问题也随之而来</strong></p><h1 id="4、分布式配置的动态刷新问题"><a href="#4、分布式配置的动态刷新问题" class="headerlink" title="4、分布式配置的动态刷新问题"></a>4、分布式配置的动态刷新问题</h1><p>假如Linux运维修改Gitee上的配置文件内容，修改完成之后</p><p>我们刷新<code>cloud-config-center-3344</code>，发现ConfigServer配置中心立刻响应,配置也随之发生了更改</p><p><img src="https://images.hckun.cn/image-20221229211357765.png" alt="image-20221229211357765"></p><p>但是我们刷新客户端<code>cloud-config-client-3355</code>服务,发现配置并没有更改</p><p><img src="https://images.hckun.cn/image-20221229211514430.png" alt="image-20221229211514430"></p><p>需要我们手动重启<code>cloud-config-client-3355</code>,才会发生改变</p><p><img src="https://images.hckun.cn/image-20221229211614300.png" alt="image-20221229211614300"></p><p>那这就非常的麻烦，难到每次运维修改配置文件，客户端都需要重启嘛？</p><h1 id="5、Config动态刷新-手动版"><a href="#5、Config动态刷新-手动版" class="headerlink" title="5、Config动态刷新-手动版"></a>5、Config动态刷新-手动版</h1><p>为了解决每次更新配置都要重启客户端微服务<code>cloud-config-client-3355</code></p><p>下面我们将对<code>cloud-config-client-3355</code>进行修改</p><blockquote><p>POM引入actuator监控依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>修改YML，添加暴露监控端口配置</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>业务类增加 @RefreshScope</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigClientController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>同样的先修改Gitee中的配置-&gt;访问<code>cloud-config-center-3344</code>-&gt;<code>cloud-config-center-3355</code></p><p>我们发现<code>cloud-config-center-3355</code>貌似也没有发生变化？</p><p><img src="https://images.hckun.cn/image-20221229212327996.png" alt="image-20221229212327996"></p><p>这是为什么那，需要我们多做一步</p><blockquote><p>刷新cloud-config-center-3355</p></blockquote><p>cmd执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &quot;http://localhost:3355/actuator/refresh&quot;</span><br></pre></td></tr></table></figure><p>再次访问<code>cloud-config-center-3355</code></p><p><img src="https://images.hckun.cn/image-20221229212531066.png" alt="image-20221229212531066"></p><p>可以看到配置已经成功刷新</p><blockquote><p>思考</p></blockquote><p>假如有多个微服务客户端3355/3366/3377。</p><p>我们每个微服务都要执行—次post请求，手动刷新?</p><p>可否广播刷新，一次通知，处处生效。</p><p>我们想大范围的自动刷新，怎么实现那？</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud(六) 服务网关 Gateway</title>
      <link href="/post/27d6bb5f.html"/>
      <url>/post/27d6bb5f.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、GateWay是什么"><a href="#1、GateWay是什么" class="headerlink" title="1、GateWay是什么"></a>1、GateWay是什么</h1><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/">Gateway官网</a></p><p>Cloud全家桶中有个很重要的组件就是网关，在1.x版本中都是采用的Zuul网关。</p><p>但在2.x版本中，zuul的升级一直没有推进，SpringCloud最后自己研发了一个网关替代Zuul，那就是SpringCloud Gateway。</p><p>—句话：gateway是原zuul1.x版的替代。</p><p><img src="https://images.hckun.cn/54b61d819aa1630bc61732de340b55b4.png" alt="54b61d819aa1630bc61732de340b55b4"></p><p>Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5，Spring Boot 2和Project Reactor等技术。</p><p>Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能，例如:熔断、限流、重试等。</p><p>SpringCloud Gateway是Spring Cloud的一个全新项目，基于Spring 5.0+Spring Boot 2.0和Project Reactor等技术开发的网关，它旨在为微服务架构提供—种简单有效的统一的API路由管理方式。</p><p>SpringCloud Gateway作为Spring Cloud 生态系统中的网关，目标是替代Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 1.x非Reactor模式的老版本。而为了提升网关的性能，SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。<br>Spring Cloud Gateway的目标提供统一的路由方式且基于 Filter链的方式提供了网关基本的功能，例如:安全，监控/指标，和限流。</p><blockquote><p>能做什么</p></blockquote><ul><li>反向代理</li><li>鉴权</li><li>流量控制</li><li>熔断</li><li>日志监控</li></ul><blockquote><p>微服务架构中网关的位置</p></blockquote><p><img src="https://images.hckun.cn/5877d4b9035ead9cd2d037609dceb442.png" alt="5877d4b9035ead9cd2d037609dceb442"></p><h1 id="2、GateWay非阻塞异步模型"><a href="#2、GateWay非阻塞异步模型" class="headerlink" title="2、GateWay非阻塞异步模型"></a>2、GateWay非阻塞异步模型</h1><p>有Zuull了怎么又出来Gateway？<strong>我们为什么选择Gateway?</strong></p><p>1、netflix zuul2.0一直没有推出，迟迟不发布。</p><ol><li>一方面因为Zuul1.0已经进入了维护阶段，而且Gateway是SpringCloud团队研发的，值得信赖。而且很多功能Zuul都没有用起来也非常的简单便捷。</li><li>Gateway是基于异步非阻塞模型上进行开发的，性能方面不需要担心。虽然Netflix早就发布了最新的Zuul 2.x，但Spring Cloud貌似没有整合计划。而且Netflix相关组件都宣布进入维护期；不知前景如何?</li><li>多方面综合考虑Gateway是很理想的网关选择。</li></ol><p>2、SpringCloud Gateway具有如下特性</p><ol><li>基于Spring Framework 5，Project Reactor和Spring Boot 2.0进行构建</li><li>动态路由：能够匹配任何请求属性</li><li>可以对路由指定Predicate (断言)和Filter(过滤器)</li><li>集成Hystrix的断路器功能</li><li>集成Spring Cloud 服务发现功能</li><li>易于编写的Predicate (断言)和Filter (过滤器)</li><li>请求限流功能</li><li>支持路径重写</li></ol><p>3、SpringCloud Gateway与Zuul的区别</p><ol><li>在SpringCloud Finchley正式版之前，Spring Cloud推荐的网关是Netflix提供的Zuul</li><li>Zuul 1.x，是一个基于阻塞I/O的API Gateway</li><li>Zuul 1.x基于Servlet 2.5使用阻塞架构它不支持任何长连接(如WebSocket)Zuul的设计模式和Nginx较像，每次I/О操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是Nginx用C++实现，Zuul用Java实现，而JVM本身会有第-次加载较慢的情况，使得Zuul的性能相对较差</li><li>Zuul 2.x理念更先进，想基于Netty非阻塞和支持长连接，但SpringCloud目前还没有整合。Zuul .x的性能较Zuul 1.x有较大提升。在性能方面，根据官方提供的基准测试,Spring Cloud Gateway的RPS(每秒请求数)是Zuul的1.6倍</li><li>Spring Cloud Gateway建立在Spring Framework 5、Project Reactor和Spring Boot2之上，使用非阻塞API</li><li>Spring Cloud Gateway还支持WebSocket，并且与Spring紧密集成拥有更好的开发体验</li></ol><blockquote><p>Zuul1.x模型</p></blockquote><p>Springcloud中所集成的Zuul版本，采用的是Tomcat容器，使用的是传统的Serviet IO处理模型。</p><p>Servlet的生命周期？servlet由servlet container进行生命周期管理。</p><ul><li>container启动时构造servlet对象并调用servlet init()进行初始化</li><li>container运行时接受请求，并为每个请求分配一个线程（一般从线程池中获取空闲线程）然后调用service)</li><li>container关闭时调用servlet destory()销毁servlet</li></ul><p><img src="https://images.hckun.cn/b71ecbfb29c939615c988123a0704306.png" alt="b71ecbfb29c939615c988123a0704306"></p><p><strong>上述模式的缺点：</strong></p><p>Servlet是一个简单的网络IO模型，当请求进入Servlet container时，Servlet container就会为其绑定一个线程，在并发不高的场景下这种模型是适用的。但是一旦高并发(如抽风用Jmeter压)，线程数量就会上涨，而线程资源代价是昂贵的（上线文切换，内存消耗大）严重影响请求的处理时间。在一些简单业务场景下，不希望为每个request分配一个线程，只需要1个或几个线程就能应对极大并发的请求，这种业务场景下servlet模型没有优势。<br>所以Zuul 1.X是基于servlet之上的一个阻塞式处理模型，即Spring实现了处理所有request请求的一个servlet (DispatcherServlet)并由该servlet阻塞式处理处理。所以SpringCloud Zuul无法摆脱servlet模型的弊端。</p><blockquote><p>Gateway模型</p></blockquote><p>WebFlux是什么？<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#spring-webflux">官方文档</a></p><p>传统的Web框架，比如说: Struts2，SpringMVC等都是基于Servlet APl与Servlet容器基础之上运行的。</p><p>但是在Servlet3.1之后有了异步非阻塞的支持。而WebFlux是一个典型非阻塞异步的框架，它的核心是基于Reactor的相关API实现的。相对于传统的web框架来说，它可以运行在诸如Netty，Undertow及支持Servlet3.1的容器上。非阻塞式+函数式编程(Spring 5必须让你使用Java 8)。<br>Spring WebFlux是Spring 5.0 引入的新的响应式框架，区别于Spring MVC，它不需要依赖Servlet APl，它是完全异步非阻塞的，并且基于Reactor来实现响应式流规范。</p><h1 id="3、Gateway工作流程"><a href="#3、Gateway工作流程" class="headerlink" title="3、Gateway工作流程"></a>3、Gateway工作流程</h1><blockquote><p>三大核心概念</p></blockquote><p>1、Route(路由) - 路由是构建网关的基本模块,它由ID,目标URI,一系列的断言和过滤器组成,如断言为true则匹配该路由。</p><p>2、Predicate(断言) - 参考的是Java8的java.util.function.Predicate，开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数),如果请求与断言相匹配则进行路由。</p><p>3、Filter(过滤) - 指的是Spring框架中GatewayFilter的实例,使用过滤器,可以在请求被路由前或者之后对请求进行修改。</p><p>web请求，通过一些匹配条件，定位到真正的服务节点。并在这个转发过程的前后，进行一些精细化控制。</p><p>predicate就是我们的匹配条件；而fliter，就可以理解为一个无所不能的拦截器。有了这两个元素，再加上目标uri，就可以实现一个具体的路由了</p><p><img src="https://images.hckun.cn/62be54501c6e2b95620b79cc918a2e9a.png" alt="62be54501c6e2b95620b79cc918a2e9a"></p><p>客户端向Spring Cloud Gateway发出请求。然后在Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到GatewayWeb Handler。</p><p>Handler再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。</p><p>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前(“pre”)或之后(“post”）执行业务逻辑。</p><p>Filter在“pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等，在“post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。</p><p><strong>核心逻辑</strong>：路由转发 + 执行过滤器链。</p><h1 id="4、Gateway9527服务搭建"><a href="#4、Gateway9527服务搭建" class="headerlink" title="4、Gateway9527服务搭建"></a>4、Gateway9527服务搭建</h1><blockquote><p>新建模块cloud-gateway-gateway9527</p></blockquote><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-gateway-gateway9527<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--gateway--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#服务提供者provider注册进eureka服务列表内</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GateWay9527</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        SpringApplication.run(GateWay9527.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>9527网关如何做路由映射</p></blockquote><p>我们查看下：<code>cloud-provider-payment8001</code>服务controller的访问地址如下：</p><p><a href="http://localhost:8001/payment/lb">http://localhost:8001/payment/lb</a></p><p><a href="http://localhost:8001/payment/get/1">http://localhost:8001/payment/get/1</a></p><p>我们不希望通过8001访问，而是访问9527转发到8001服务？</p><blockquote><p>YML新增网关配置</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">   <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span>     <span class="comment">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8001</span>   <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>   <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8001</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span> <span class="comment">#服务提供者provider注册进eureka服务列表内</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>启动<code>cloud-eureka-server7001</code>  <code>cloud-provider-payment8001</code> <code>cloud-gateway-gateway9527</code></p><p>浏览器访问：<a href="http://localhost:9527/payment/get/1">http://localhost:9527/payment/get/1</a> <a href="http://localhost:9527/payment/lb">http://localhost:9527/payment/lb</a></p><p>发现与直接访问8001效果一致</p><h1 id="5、Gateway配置路由的两种方式"><a href="#5、Gateway配置路由的两种方式" class="headerlink" title="5、Gateway配置路由的两种方式"></a>5、Gateway配置路由的两种方式</h1><p>通过配置文件的方法，上面已经使用过了</p><p>还有一种通过：<strong>代码中注入RouteLocator的Bean</strong></p><p>官方案例 - <a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#modifying-the-way-remote-addresses-are-resolved">link</a></p><p><img src="https://images.hckun.cn/image-20221226202142486.png" alt="image-20221226202142486"></p><p>下面我们通过第二种方式，访问9527转发到百度新闻<a href="https://news.baidu.com/">https://news.baidu.com/</a></p><blockquote><p>新增GateWayConfig</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GateWayConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span> &#123;</span><br><span class="line">        RouteLocatorBuilder.<span class="type">Builder</span> <span class="variable">routes</span> <span class="operator">=</span> routeLocatorBuilder.routes();</span><br><span class="line"></span><br><span class="line">        routes.route(<span class="string">&quot;path_route_news&quot;</span>,</span><br><span class="line">                r -&gt; r.path(<span class="string">&quot;/news&quot;</span>)</span><br><span class="line">                        .uri(<span class="string">&quot;http://news.baidu.com&quot;</span>)).build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启<code>cloud-gateway-gateway9527</code></p><p>浏览器访问：<a href="http://localhost:9527/news">http://localhost:9527/news</a></p><p><img src="https://images.hckun.cn/image-20221226202642369.png" alt="image-20221226202642369"></p><h1 id="6、GateWay配置动态路由"><a href="#6、GateWay配置动态路由" class="headerlink" title="6、GateWay配置动态路由"></a>6、GateWay配置动态路由</h1><p>默认情况下Gateway会根据注册中心注册的服务列表，以注册中心上微服务名为路径创建<strong>动态路由进行转发，从而实现动态路由的功能</strong></p><p>我们刚刚是写死的地址：<a href="http://localhost:8001/">http://localhost:8001</a></p><blockquote><p>修改GateWay的YML配置文件</p></blockquote><p>uri的协议为lb，表示启用Gateway的负载均衡功能。</p><p>lb://serviceName是spring cloud gateway在微服务中自动为我们创建的负载均衡uri。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">   <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh</span>     <span class="comment">#路由的ID，没有固定规则但要求唯一，建议配合服务名</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span>   <span class="comment">#匹配后提供服务的路由地址</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span>   <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span></span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>启动<code>cloud-eureka-server7001</code>  <code>cloud-provider-payment8001</code> <code>cloud-provider-payment8002</code> <code>cloud-gateway-gateway9527</code></p><p>浏览器访问：<a href="http://localhost:9527/payment/lb">http://localhost:9527/payment/lb</a></p><p>我们发现端口号交替出现，说明确实负载了</p><h1 id="7、GateWay常用的Predicate"><a href="#7、GateWay常用的Predicate" class="headerlink" title="7、GateWay常用的Predicate"></a>7、GateWay常用的Predicate</h1><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gateway-request-predicates-factories">官方文档</a></p><p>Spring Cloud Gateway将路由匹配作为Spring WebFlux HandlerMapping基础架构的一部分。</p><p>Spring Cloud Gateway包括许多内置的Route Predicate工厂。所有这些Predicate都与HTTP请求的不同属性匹配。多个RoutePredicate工厂可以进行组合。</p><p>Spring Cloud Gateway创建Route 对象时，使用RoutePredicateFactory 创建 Predicate对象，Predicate 对象可以赋值给Route。Spring Cloud Gateway包含许多内置的Route Predicate Factories。</p><p>所有这些谓词都匹配HTTP请求的不同属性。多种谓词工厂可以组合，并通过逻辑and。</p><blockquote><p>常用的Route Predicate Factory</p></blockquote><p><img src="https://images.hckun.cn/image-20221226203331904.png" alt="image-20221226203331904"></p><p>以其中几个为例</p><blockquote><p>The After Route Predicate Factory</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">   <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="comment">#- Path=/payment/lb/**</span></span><br><span class="line">          <span class="comment"># 在该时间之后，当前路由才会生效</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">After=2017-01-20T17:42:47.789-07:00[America/Denver]</span></span><br></pre></td></tr></table></figure><p>可以通过下述方法获得上述格式的时间戳字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Temp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ZonedDateTime</span> <span class="variable">zbj</span> <span class="operator">=</span> ZonedDateTime.now(); <span class="comment">// 默认时区</span></span><br><span class="line">        System.out.println(zbj); <span class="comment">//2022-12-26T20:38:00.094+08:00[Asia/Shanghai]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The Between Route Predicate Factory</p></blockquote><p>两个时间点之间</p><blockquote><p>The Before Route Predicate Factory</p></blockquote><p>时间点之前</p><blockquote><p>The Cookie Route Predicate Factory</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">   <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="comment">#- Path=/payment/lb/**</span></span><br><span class="line">          <span class="comment"># 在该时间之后，当前路由才会生效</span></span><br><span class="line">          <span class="comment">#- After=2022-12-26T20:40:00.094+08:00[Asia/Shanghai]</span></span><br><span class="line">          <span class="comment"># 需要携带指定cookie</span></span><br><span class="line">           <span class="bullet">-</span> <span class="string">Cookie=username,zhangsan</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 该命令相当于发get请求，且没带cookie</span><br><span class="line">curl http:<span class="comment">//localhost:9527/payment/lb</span></span><br><span class="line"></span><br><span class="line"># 带cookie的</span><br><span class="line">curl http:<span class="comment">//localhost:9527/payment/lb --cookie &quot;username=zhangsan&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>The Header Route Predicate Factory</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">   <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_routh2</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">          <span class="comment">#- Path=/payment/lb/**</span></span><br><span class="line">          <span class="comment"># 在该时间之后，当前路由才会生效</span></span><br><span class="line">          <span class="comment">#- After=2022-12-26T20:40:00.094+08:00[Asia/Shanghai]</span></span><br><span class="line">          <span class="comment"># 需要携带指定cookie</span></span><br><span class="line">          <span class="comment"># - Cookie=username,zhangsan</span></span><br><span class="line">          <span class="comment"># 包含指定请求头，并且值是数字</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 带指定请求头的参数的CURL命令</span><br><span class="line">curl http:<span class="comment">//localhost:9527/payment/lb -H &quot;X-Request-Id:123&quot;</span></span><br></pre></td></tr></table></figure><p>总结：Predicate就是为了实现一组匹配规则，让请求过来找到对应的Route进行处理。</p><h1 id="8、GateWay的Filter"><a href="#8、GateWay的Filter" class="headerlink" title="8、GateWay的Filter"></a>8、GateWay的Filter</h1><p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.1.RELEASE/reference/html/#gatewayfilter-factories">官方文档</a></p><p>路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用。Spring Cloud Gateway内置了多种路由过滤器，他们都由GatewayFilter的工厂类来产生。</p><p>常用的GatewayFilter：AddRequestParameter GatewayFilter</p><blockquote><p>Filter能干什么</p></blockquote><ul><li>全局日志记录</li><li>统一网关鉴权</li></ul><blockquote><p>自定义Filter</p></blockquote><p>新增<code>MyLogGateWayFilter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogGateWayFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span>, Ordered &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;***********come in MyLogGateWayFilter:  &quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">uname</span> <span class="operator">=</span> exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;uname&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (uname == <span class="literal">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;*******用户名为null，非法用户，o(╥﹏╥)o&quot;</span>);</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>重启<code>spring-cloud-starter-gateway</code></p><p>浏览器访问:<a href="http://localhost:9527/payment/lb">http://localhost:9527/payment/lb</a></p><p>访问异常</p><p>浏览器访问:<a href="http://localhost:9527/payment/lb?uname=abc">http://localhost:9527/payment/lb?uname=abc</a></p><p>正常访问</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud(五) 服务降级、熔断Hystrix</title>
      <link href="/post/41e96124.html"/>
      <url>/post/41e96124.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、Hystrix是什么"><a href="#1、Hystrix是什么" class="headerlink" title="1、Hystrix是什么"></a>1、Hystrix是什么</h1><blockquote><p>分布式系统面临的问题</p></blockquote><p>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免地失败。</p><blockquote><p>服务雪崩</p></blockquote><p>多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，这就是所谓的“扇出”。如果扇出的链路上某个微服务的调用响应时间过长或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”。</p><p>对于高流量的应用来说，单一的后避依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。<br>所以，通常当你发现一个模块下的某个实例失败后，这时候这个模块依然还会接收流量，然后这个有问题的模块还调用了其他的模块，这样就会发生级联故障，或者叫雪崩。</p><blockquote><p>Hystrix是什么</p></blockquote><p>Hystrix是一个用于处理分布式系统的<strong>延迟</strong>和<strong>容错</strong>的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个依赖出问题的情况下，<strong>不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性</strong>。</p><p>“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似熔断保险丝)，向调用方返回一个符合预期的、可处理的备选响应（FallBack)，而不是长时间的等待或者抛出调用方无法处理的异常，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。<br><strong>Hystrix可以服务降级、服务熔断、接近实对的监控</strong></p><p><strong>Hystrix目前已经停止更新、进入维护</strong></p><h1 id="2、Hystrix的服务降级熔断限流概念"><a href="#2、Hystrix的服务降级熔断限流概念" class="headerlink" title="2、Hystrix的服务降级熔断限流概念"></a>2、Hystrix的服务降级熔断限流概念</h1><blockquote><p>服务降级</p></blockquote><p>服务器忙，请稍后再试，不让客户端等待并立刻返回一个友好提示，fallback</p><p><strong>哪些情况会出发降级</strong></p><ul><li>程序运行导常</li><li>超时</li><li>服务熔断触发服务降级</li><li>线程池/信号量打满也会导致服务降级</li></ul><blockquote><p>服务熔断</p></blockquote><p><strong>类比保险丝</strong>达到最大服务访问后，直接拒绝访问，拉闸限电，然后调用服务降级的方法并返回友好提示。</p><p>服务的降级 -&gt; 进而熔断 -&gt; 恢复调用链路</p><blockquote><p>服务限流</p></blockquote><p>秒杀高并发等操作，严禁一窝蜂的过来拥挤，大家排队，一秒钟N个，有序进行。</p><h1 id="3、Hystrix支付微服务构建"><a href="#3、Hystrix支付微服务构建" class="headerlink" title="3、Hystrix支付微服务构建"></a>3、Hystrix支付微服务构建</h1><blockquote><p>新建模块cloud-provider-hystrix-payment8001</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-hystrix-payment8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--hystrix--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-hystrix-payment</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixPayment</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HystrixPayment.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_OK</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池:  &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;  paymentInfo_OK,id:  &quot;</span> + id + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;O(∩_∩)O哈哈~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_TimeOut</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池:  &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; id:  &quot;</span> + id + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;O(∩_∩)O哈哈~&quot;</span> + <span class="string">&quot;  耗时(秒): 3&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">&quot;*****result: &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.paymentInfo_TimeOut(id);</span><br><span class="line">        log.info(<span class="string">&quot;*****result: &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>启动<code>cloud-eureka-server7001``cloud-provider-hystrix-payment8001</code></p><p>浏览器访问：<a href="http://localhost:8001/payment/hystrix/ok/1">http://localhost:8001/payment/hystrix/ok/1</a></p><p><img src="https://images.hckun.cn/image-20221226140915899.png" alt="image-20221226140915899"></p><p>正常秒级响应</p><p>浏览器访问：<a href="http://localhost:8001/payment/hystrix/timeout/1">http://localhost:8001/payment/hystrix/timeout/1</a></p><p><img src="https://images.hckun.cn/image-20221226140915899-20221226140932462.png"></p><p>程序等待3秒后也正常响应</p><h1 id="4、JMeter高并发压测"><a href="#4、JMeter高并发压测" class="headerlink" title="4、JMeter高并发压测"></a>4、JMeter高并发压测</h1><p>JMeter官网：<a href="https://jmeter.apache.org/index.html">https://jmeter.apache.org/index.html</a></p><p>Apache JMeter应用程序是一个开源软件，是一个100%纯Java应用程序，旨在负载测试功能行为和测量性能。它最初是为测试Web应用程序而设计的，但后来扩展到其他测试功能。</p><p>开启Jmeter，来20000个并发压死8001，20000个请求都去访问paymentInfo_TimeOut服务</p><ul><li>测试计划中右键添加-》线程-》线程组（线程组202102，线程数：200，线程数：100，其他参数默认）</li><li>刚刚新建线程组202102，右键它-》添加-》取样器-》Http请求-》基本 输入<a href="http://localhost:8001/payment/hystrix/ok/1">http://localhost:8001/payment/hystrix/ok/1</a></li><li>点击绿色三角形图标启动。</li></ul><p>结果：服务响应速度明显减慢。</p><p>原因：tomcat的默认的工作线程数被打满了，没有多余的线程来分解压力和处理业务。</p><h1 id="5、订单微服务调用支付服务"><a href="#5、订单微服务调用支付服务" class="headerlink" title="5、订单微服务调用支付服务"></a>5、订单微服务调用支付服务</h1><blockquote><p>新建模块cloud-consumer-feign-hystrix-order80</p></blockquote><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-feign-hystrix-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--hystrix--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般基础通用配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixOrder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HystrixOrder.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Feign接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentHystrixService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    String <span class="title function_">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    String <span class="title function_">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderHystirxController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentHystrixService.paymentInfo_OK(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentHystrixService.paymentInfo_TimeOut(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>浏览器访问：<a href="http://localhost/payment/hystrix/ok/1">http://localhost/payment/hystrix/ok/1</a></p><p><img src="https://images.hckun.cn/image-20221226143932677.png" alt="image-20221226143932677"></p><p><strong>高并发测试</strong></p><p>2W个线程请求8001</p><p>消费端80微服务再去访问正常的Ok微服务8001地址</p><p><a href="http://localhost/payment/hystrix/ok/1">http://localhost/payment/hystrix/ok/1</a></p><p>消费者80响应很慢</p><p><strong>原因：8001同一层次的其它接口服务被困死，因为tomcat线程池里面的工作线程已经被挤占完毕。</strong></p><p><strong>正因为有上述故障或不佳表现才有我们的降级/容错/限流等技术诞生。</strong></p><h1 id="6、降级容错解决的维度"><a href="#6、降级容错解决的维度" class="headerlink" title="6、降级容错解决的维度"></a>6、降级容错解决的维度</h1><p>超时导致服务器变慢(转圈) - 超时不再等待</p><p>出错(宕机或程序运行出错) - 出错要有兜底</p><blockquote><p>解决</p></blockquote><ul><li>对方服务(8001)超时了，调用者(80)不能一直卡死等待，必须有服务降级。</li><li>对方服务(8001)down机了，调用者(80)不能一直卡死等待，必须有服务降级。</li><li>对方服务(8001)OK，调用者(80)自己出故障或有自我要求(自己的等待时间小于服务提供者)，自己处理降级。</li></ul><h1 id="7、Hystrix之服务降级-支付"><a href="#7、Hystrix之服务降级-支付" class="headerlink" title="7、Hystrix之服务降级-支付"></a>7、Hystrix之服务降级-支付</h1><p>降级配置 - <code>@HystrixCommand</code></p><p><strong>设置自身调用超时时间的峰值，峰值内可以正常运行，超过了需要有兜底的方法处埋，作服务降级fallback</strong>。</p><p>业务类启用 - <code>@HystrixCommand</code></p><p>—旦调用服务方法失败并抛出了错误信息后，会自动调用<code>@HystrixCommand</code>标注好的<code>fallbackMethod</code>调用类中的指定方法。</p><p>对<code>cloud-provider-hystrix-payment8001``PaymentService</code>进行改造，加入服务降级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeOutHandler&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;3000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_TimeOut</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池:  &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; id:  &quot;</span> + id + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;O(∩_∩)O哈哈~&quot;</span> + <span class="string">&quot;  耗时(秒): 3&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//降级方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_TimeOutHandler</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池:  &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;  8001系统繁忙或者运行报错，请稍后再试,id:  &quot;</span> + id + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;o(╥﹏╥)o&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主启动类增加：<code>@EnableCircuitBreaker</code></p><blockquote><p>测试</p></blockquote><p>制造两种异常</p><ul><li>int num = 1/0，计算异常</li><li>超时5秒钟  超时异常</li></ul><p>我们发现以上2种情况当服务不可用的时候，会做服务降级，都会走我们的<code>paymentInfo_TimeOutHandler</code>方法</p><p><img src="https://images.hckun.cn/image-20221226150013000.png" alt="image-20221226150013000"></p><h1 id="8、Hystrix之服务降级-订单"><a href="#8、Hystrix之服务降级-订单" class="headerlink" title="8、Hystrix之服务降级-订单"></a>8、Hystrix之服务降级-订单</h1><p>80订单微服务，也可以更好的保护自己，进行降级处理</p><blockquote><p>YML开启服务降级</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>主启动类增加：<code>@EnableHystrix</code></p><blockquote><p>业务类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderHystirxController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentTimeOutFallbackMethod&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;1500&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentHystrixService.paymentInfo_TimeOut(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentTimeOutFallbackMethod</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是消费者80,对方支付系统繁忙请10秒钟后再试或者自己运行出错请检查自己,o(╥﹏╥)o&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器访问：<a href="http://localhost/payment/hystrix/timeout/1">http://localhost/payment/hystrix/timeout/1</a></p><p><img src="https://images.hckun.cn/image-20221226151430834.png" alt="image-20221226151430834"></p><h1 id="9、Hystrix全局服务降级"><a href="#9、Hystrix全局服务降级" class="headerlink" title="9、Hystrix全局服务降级"></a>9、Hystrix全局服务降级</h1><p><strong>目前存在问题</strong>：如果都按照上述方法进行服务降级，那么每一个业务方法都需要一个降级之后的处理方法。</p><p>代码混淆在一起、并且大量重复。</p><p><strong>解决方法</strong>:使用<code>@DefaultProperties(defaultFallback = “”)</code>跳转到统一处理结果页面</p><p>改造<code>cloud-consumer-feign-hystrix-order80</code> 的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderHystirxController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentHystrixService paymentHystrixService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentHystrixService.paymentInfo_OK(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="comment">/* @HystrixCommand(fallbackMethod = &quot;paymentTimeOutFallbackMethod&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="comment">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;1500&quot;)</span></span><br><span class="line"><span class="comment">    &#125;)*/</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> paymentHystrixService.paymentInfo_TimeOut(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentTimeOutFallbackMethod</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是消费者80,对方支付系统繁忙请10秒钟后再试或者自己运行出错请检查自己,o(╥﹏╥)o&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">payment_Global_FallbackMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Global异常处理信息，请稍后再试，/(ㄒoㄒ)/~~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器访问：<a href="http://localhost/payment/hystrix/timeout/1">http://localhost/payment/hystrix/timeout/1</a></p><h1 id="10、Hystrix通配服务降级FeignFallback"><a href="#10、Hystrix通配服务降级FeignFallback" class="headerlink" title="10、Hystrix通配服务降级FeignFallback"></a><img src="https://images.hckun.cn/image-20221226153120776.png" alt="image-20221226153120776">10、Hystrix通配服务降级FeignFallback</h1><p><strong>服务降级，客户端去调用服务端，碰上服务端宕机或关闭</strong></p><p>只需要为<a href="https://so.csdn.net/so/search?q=Feign&spm=1001.2101.3001.7020">Feign</a>客户端定义的接口添加一个服务降级处理的实现类即可实现服务降级并解耦</p><p>修改<code>cloud-consumer-feign-hystrix-order80</code></p><p>新增<code>PaymentFallbackService</code>类实现<code>PaymentHystrixService</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title class_">PaymentHystrixService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_OK</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-----PaymentFallbackService fall back-paymentInfo_OK ,o(╥﹏╥)o&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo_TimeOut</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-----PaymentFallbackService fall back-paymentInfo_TimeOut ,o(╥﹏╥)o&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>PaymentHystrixService</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PROVIDER-HYSTRIX-PAYMENT&quot;,fallback = PaymentFallbackService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentHystrixService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    String <span class="title function_">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    String <span class="title function_">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>先启动<code>cloud-eureka-server7001</code> 在启动<code>cloud-provider-hystrix-payment8001</code> 最后启动 </p><p><code>cloud-consumer-feign-hystrix-order80</code></p><p>浏览器访问：<a href="http://localhost/payment/hystrix/timeout/1">http://localhost/payment/hystrix/timeout/1</a></p><p><img src="https://images.hckun.cn/image-20221226154355817.png" alt="image-20221226154355817"></p><p>停止<code>cloud-provider-hystrix-payment8001</code>服务</p><p>再次访问</p><p><img src="https://images.hckun.cn/image-20221226154431688.png" alt="image-20221226154431688"></p><h1 id="11、Hystrix服务熔断"><a href="#11、Hystrix服务熔断" class="headerlink" title="11、Hystrix服务熔断"></a>11、Hystrix服务熔断</h1><blockquote><p>熔断机制概述</p></blockquote><p>熔断机制是应对雪崩效应的一种微服务链路保护机制。当扇出链路的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。<strong>当检测到该节点微服务调用响应正常后，恢复调用链路</strong>。</p><p>在Spring Cloud框架里，熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阈值，缺省是5秒内20次调用失败，就会启动熔断机制。熔断机制的注解是<code>@HystrixCommand</code>。</p><p><img src="https://images.hckun.cn/84d60234d01c4b7e9cae515066eb711b.png" alt="84d60234d01c4b7e9cae515066eb711b"></p><p>修改<code>cloud-provider-hystrix-payment8001</code></p><blockquote><p>PaymentService</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;, value = &quot;true&quot;),// 是否开启断路器</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;10&quot;),// 请求次数</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;, value = &quot;10000&quot;), // 时间窗口期</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;, value = &quot;60&quot;),// 失败率达到多少后跳闸</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;******id 不能负数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serialNumber</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;调用成功，流水号: &quot;</span> + serialNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentCircuitBreaker_fallback</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;id 不能负数，请稍后再试，/(ㄒoㄒ)/~~   id: &quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PaymentController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/circuit/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.paymentCircuitBreaker(id);</span><br><span class="line">        log.info(<span class="string">&quot;****result: &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>浏览器访问:<a href="http://localhost:8001//payment/circuit/1">http://localhost:8001//payment/circuit/1</a></p><p><img src="https://images.hckun.cn/image-20221226163309587.png" alt="image-20221226163309587"></p><p>访问错误地址：<a href="http://localhost:8001//payment/circuit/-1">http://localhost:8001//payment/circuit/-1</a></p><p><img src="https://images.hckun.cn/image-20221226163529804.png" alt="image-20221226163529804"></p><p>当大量的访问错误地址，服务会发生熔断，待服务熔断之后在访问正确地址，此时服务仍会显示熔断，稍等会，慢慢的熔断就会恢复正常。</p><blockquote><p>熔断类型</p></blockquote><ul><li>熔断打开：请求不再进行调用当前服务，内部设置时钟一般为MTTR(平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态。</li><li>熔断关闭：熔断关闭不会对服务进行熔断。</li><li>熔断半开：部分请求根据规则调用当前服务，如果请求成功且符合规则则认为当前服务恢复正常，关闭熔断。</li></ul><blockquote><p>断路器在什么情况下开始起作用</p></blockquote><p>涉及到断路器的三个重要参数：</p><ol><li><strong>快照时间窗</strong>：断路器确定是否打开需要统计一些请求和错误数据，而统计的时间范围就是快照时间窗，默认为最近的10秒。</li><li><strong>请求总数阀值</strong>：在快照时间窗内，必须满足请求总数阀值才有资格熔断。默认为20，意味着在10秒内，如果该hystrix命令的调用次数不足20次7,即使所有的请求都超时或其他原因失败，断路器都不会打开。</li><li><strong>错误百分比阀值</strong>：当请求总数在快照时间窗内超过了阀值，比如发生了30次调用，如果在这30次调用中，有15次发生了超时异常，也就是超过50%的错误百分比，在默认设定50%阀值情况下，这时候就会将断路器打开。</li></ol><blockquote><p>断路器开启或者关闭的条件</p></blockquote><ul><li>到达以下阀值，断路器将会开启：<ul><li>当满足一定的阀值的时候（默认10秒内超过20个请求次数)</li><li>当失败率达到一定的时候（默认10秒内超过50%的请求失败)</li></ul></li><li>当开启的时候，所有请求都不会进行转发</li><li>一段时间之后（默认是5秒)，这个时候断路器是半开状态，会让其中一个请求进行转发。如果成功，断路器会关闭，若失败，继续开启。</li></ul><blockquote><p>断路器打开之后</p></blockquote><p>再有请求调用的时候，将不会调用主逻辑，而是直接调用降级fallback。通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果</p><blockquote><p>hystrix自动恢复功能</p></blockquote><p>当断路器打开，对主逻辑进行熔断之后，hystrix会启动一个休眠时间窗，在这个时间窗内，降级逻辑是临时的成为主逻辑，当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将继续闭合，主逻辑恢复，如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计时。</p><blockquote><p>熔断所有配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;fallbackMethod&quot;, </span></span><br><span class="line"><span class="meta">                groupKey = &quot;strGroupCommand&quot;, </span></span><br><span class="line"><span class="meta">                commandKey = &quot;strCommand&quot;, </span></span><br><span class="line"><span class="meta">                threadPoolKey = &quot;strThreadPool&quot;,</span></span><br><span class="line"><span class="meta">                </span></span><br><span class="line"><span class="meta">                commandProperties = &#123;</span></span><br><span class="line"><span class="meta">                    // 设置隔离策略，THREAD 表示线程池 SEMAPHORE：信号池隔离</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;execution.isolation.strategy&quot;, value = &quot;THREAD&quot;),</span></span><br><span class="line"><span class="meta">                    // 当隔离策略选择信号池隔离的时候，用来设置信号池的大小（最大并发数）</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;execution.isolation.semaphore.maxConcurrentRequests&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">                    // 配置命令执行的超时时间</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;execution.isolation.thread.timeoutinMilliseconds&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">                    // 是否启用超时时间</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;execution.timeout.enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                    // 执行超时的时候是否中断</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;execution.isolation.thread.interruptOnTimeout&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                    </span></span><br><span class="line"><span class="meta">                    // 执行被取消的时候是否中断</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;execution.isolation.thread.interruptOnCancel&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                    // 允许回调方法执行的最大并发数</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;fallback.isolation.semaphore.maxConcurrentRequests&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">                    // 服务降级是否启用，是否执行回调函数</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;fallback.enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                    // 是否启用断路器</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                    // 该属性用来设置在滚动时间窗中，断路器熔断的最小请求数。例如，默认该值为 20 的时候，如果滚动时间窗（默认10秒）内仅收到了19个请求， 即使这19个请求都失败了，断路器也不会打开。</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;20&quot;),</span></span><br><span class="line"><span class="meta">                    </span></span><br><span class="line"><span class="meta">                    // 该属性用来设置在滚动时间窗中，表示在滚动时间窗中，在请求数量超过 circuitBreaker.requestVolumeThreshold 的情况下，如果错误请求数的百分比超过50, 就把断路器设置为 &quot;打开&quot; 状态，否则就设置为 &quot;关闭&quot; 状态。</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;, value = &quot;50&quot;),</span></span><br><span class="line"><span class="meta">                    // 该属性用来设置当断路器打开之后的休眠时间窗。 休眠时间窗结束之后，会将断路器置为 &quot;半开&quot; 状态，尝试熔断的请求命令，如果依然失败就将断路器继续设置为 &quot;打开&quot; 状态，如果成功就设置为 &quot;关闭&quot; 状态。</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;circuitBreaker.sleepWindowinMilliseconds&quot;, value = &quot;5000&quot;),</span></span><br><span class="line"><span class="meta">                    // 断路器强制打开</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;circuitBreaker.forceOpen&quot;, value = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">                    // 断路器强制关闭</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;circuitBreaker.forceClosed&quot;, value = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">                    // 滚动时间窗设置，该时间用于断路器判断健康度时需要收集信息的持续时间</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;metrics.rollingStats.timeinMilliseconds&quot;, value = &quot;10000&quot;),</span></span><br><span class="line"><span class="meta">                    </span></span><br><span class="line"><span class="meta">                    // 该属性用来设置滚动时间窗统计指标信息时划分&quot;桶&quot;的数量，断路器在收集指标信息的时候会根据设置的时间窗长度拆分成多个 &quot;桶&quot; 来累计各度量值，每个&quot;桶&quot;记录了一段时间内的采集指标。</span></span><br><span class="line"><span class="meta">                    // 比如 10 秒内拆分成 10 个&quot;桶&quot;收集这样，所以 timeinMilliseconds 必须能被 numBuckets 整除。否则会抛异常</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;metrics.rollingStats.numBuckets&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">                    // 该属性用来设置对命令执行的延迟是否使用百分位数来跟踪和计算。如果设置为 false, 那么所有的概要统计都将返回 -1。</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;metrics.rollingPercentile.enabled&quot;, value = &quot;false&quot;),</span></span><br><span class="line"><span class="meta">                    // 该属性用来设置百分位统计的滚动窗口的持续时间，单位为毫秒。</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;metrics.rollingPercentile.timeInMilliseconds&quot;, value = &quot;60000&quot;),</span></span><br><span class="line"><span class="meta">                    // 该属性用来设置百分位统计滚动窗口中使用 “ 桶 ”的数量。</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;metrics.rollingPercentile.numBuckets&quot;, value = &quot;60000&quot;),</span></span><br><span class="line"><span class="meta">                    // 该属性用来设置在执行过程中每个 “桶” 中保留的最大执行次数。如果在滚动时间窗内发生超过该设定值的执行次数，</span></span><br><span class="line"><span class="meta">                    // 就从最初的位置开始重写。例如，将该值设置为100, 滚动窗口为10秒，若在10秒内一个 “桶 ”中发生了500次执行，</span></span><br><span class="line"><span class="meta">                    // 那么该 “桶” 中只保留 最后的100次执行的统计。另外，增加该值的大小将会增加内存量的消耗，并增加排序百分位数所需的计算时间。</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;metrics.rollingPercentile.bucketSize&quot;, value = &quot;100&quot;),</span></span><br><span class="line"><span class="meta">                    </span></span><br><span class="line"><span class="meta">                    // 该属性用来设置采集影响断路器状态的健康快照（请求的成功、 错误百分比）的间隔等待时间。</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;metrics.healthSnapshot.intervalinMilliseconds&quot;, value = &quot;500&quot;),</span></span><br><span class="line"><span class="meta">                    // 是否开启请求缓存</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;requestCache.enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta">                    // HystrixCommand的执行和事件是否打印日志到 HystrixRequestLog 中</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;requestLog.enabled&quot;, value = &quot;true&quot;),</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">                &#125;,</span></span><br><span class="line"><span class="meta">                threadPoolProperties = &#123;</span></span><br><span class="line"><span class="meta">                    // 该参数用来设置执行命令线程池的核心线程数，该值也就是命令执行的最大并发量</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;coreSize&quot;, value = &quot;10&quot;),</span></span><br><span class="line"><span class="meta">                    // 该参数用来设置线程池的最大队列大小。当设置为 -1 时，线程池将使用 SynchronousQueue 实现的队列，否则将使用 LinkedBlockingQueue 实现的队列。</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;maxQueueSize&quot;, value = &quot;-1&quot;),</span></span><br><span class="line"><span class="meta">                    // 该参数用来为队列设置拒绝阈值。 通过该参数， 即使队列没有达到最大值也能拒绝请求。</span></span><br><span class="line"><span class="meta">                    // 该参数主要是对 LinkedBlockingQueue 队列的补充,因为 LinkedBlockingQueue 队列不能动态修改它的对象大小，而通过该属性就可以调整拒绝请求的队列大小了。</span></span><br><span class="line"><span class="meta">                    @HystrixProperty(name = &quot;queueSizeRejectionThreshold&quot;, value = &quot;5&quot;),</span></span><br><span class="line"><span class="meta">                &#125;</span></span><br><span class="line"><span class="meta">               )</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="12、Hystrix图形化Dashboard"><a href="#12、Hystrix图形化Dashboard" class="headerlink" title="12、Hystrix图形化Dashboard"></a>12、Hystrix图形化Dashboard</h1><p>除了隔离依赖服务的调用以外，Hystrix还提供了准实时的调用监控(Hystrix Dashboard)，Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。</p><p>Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。</p><blockquote><p>新建模块cloud-consumer-hystrix-dashboard9001</p></blockquote><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-hystrix-dashboard9001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixDashboard</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HystrixDashboard.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动<code>cloud-consumer-hystrix-dashboard9001</code></p><p>浏览器访问：<a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></p><p><img src="https://images.hckun.cn/image-20221226164520731.png" alt="image-20221226164520731"></p><p>修改<code>cloud-provider-hystrix-payment8001</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HystrixPayment</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HystrixPayment.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此配置是为了服务监控而配置，与服务容错本身无关，springcloud升级后的坑</span></span><br><span class="line"><span class="comment">     * ServletRegistrationBean因为springboot的默认路径不是&quot;/hystrix.stream&quot;，</span></span><br><span class="line"><span class="comment">     * 只要在自己的项目里配置上下面的servlet就可以了</span></span><br><span class="line"><span class="comment">     * 否则，Unable to connect to Command Metric Stream 404</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">getServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">HystrixMetricsStreamServlet</span> <span class="variable">streamServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HystrixMetricsStreamServlet</span>();</span><br><span class="line">        <span class="type">ServletRegistrationBean</span> <span class="variable">registrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(streamServlet);</span><br><span class="line">        registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">        registrationBean.addUrlMappings(<span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">        registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>启动<code>cloud-eureka-server7001</code>  <code>cloud-provider-hystrix-payment8001</code></p><p>填写监控地址：<a href="http://localhost:8001/hystrix.stream">http://localhost:8001/hystrix.stream</a></p><p><img src="https://images.hckun.cn/image-20221226164837659.png" alt="image-20221226164837659"></p><p>访问<a href="http://localhost:8001//payment/circuit/1">http://localhost:8001//payment/circuit/1</a> <a href="http://localhost:8001//payment/circuit/-1">http://localhost:8001//payment/circuit/-1</a> 模拟上述服务熔断操作，观察可视化界面变化</p><p><img src="https://images.hckun.cn/image-20221226165039212.png" alt="image-20221226165039212"></p><p><img src="https://images.hckun.cn/image-20221226165059952.png" alt="image-20221226165059952"></p><blockquote><p>图片说明</p></blockquote><p><img src="https://images.hckun.cn/8a8c682ab027e313e4d9af9e4bd96206.png" alt="8a8c682ab027e313e4d9af9e4bd96206"></p><p><img src="https://images.hckun.cn/7fe0003d738028e6e20a3bf8f802cd2d.png" alt="7fe0003d738028e6e20a3bf8f802cd2d"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud(四) 远程调用OpenFeign</title>
      <link href="/post/84967a2c.html"/>
      <url>/post/84967a2c.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、OpenFeign简介"><a href="#1、OpenFeign简介" class="headerlink" title="1、OpenFeign简介"></a>1、OpenFeign简介</h1><blockquote><p>OpenFeign是什么</p></blockquote><p>Feign是一个声明式WebService客户端。使用Feign能让编写Web Service客户端更加简单。它的使用方法是定义一个服务接口然后在上面添加注解。Feign也支持可拔插式的编码器和解码器。Spring Cloud对Feign进行了封装，使其支持了Spring MVC标准注解和HttpMessageConverters。Feign可以与Eureka和Ribbon组合使用以支持负载均衡。<br>官网文档：<a href="https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/#spring-cloud-openfeign">https://cloud.spring.io/spring-cloud-static/Hoxton.SR1/reference/htmlsingle/#spring-cloud-openfeign</a></p><p>Github地址：<a href="https://gitcode.net/mirrors/spring-cloud/spring-cloud-openfeign?utm_source=csdn_github_accelerator">https://gitcode.net/mirrors/spring-cloud/spring-cloud-openfeign?utm_source=csdn_github_accelerator</a></p><blockquote><p>Feign能干什么</p></blockquote><p>Feign旨在使编写Java Http客户端变得更容易。</p><p>前面在使用Ribbon+RestTemplate时，利用RestTemplate对http请求的封装处理，形成了一套模版化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步封装，由他来帮助我们定义和实现依赖服务接口的定义。在Feign的实现下，我们只需创建一个接口并使用注解的方式来配置它(以前是Dao接口上面标注Mapper注解,现在是一个微服务接口上面标注一个Feign注解即可)，即可完成对服务提供方的接口绑定，简化了使用Spring cloud Ribbon时，自动封装服务调用客户端的开发量。</p><blockquote><p>Feign集成了Ribbon</p></blockquote><p>利用Ribbon维护了Payment的服务列表信息，并且通过轮询实现了客户端的负载均衡。而与Ribbon不同的是，<strong>通过feign只需要定义服务绑定接口且以声明式的方法</strong>，优雅而简单的实现了服务调用。</p><blockquote><p>Feign和OpenFeign两者区别</p></blockquote><p><strong>Feign</strong>是Spring Cloud组件中的一个轻量级RESTful的HTTP服务客户端Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign的使用方式是:使用Feign的注解定义接口，调用这个接口，就可以调用服务注册中心的服务。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>OpenFeign是Spring Cloud在Feign的基础上支持了SpringMVC的注解，如@RequesMapping等等。OpenFeign的@Feignclient可以解析SpringMVc的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2、OpenFeign服务调用"><a href="#2、OpenFeign服务调用" class="headerlink" title="2、OpenFeign服务调用"></a>2、OpenFeign服务调用</h1><blockquote><p>新建cloud-consumer-feign-order80</p></blockquote><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-feign-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--openfeign--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderFeignMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        SpringApplication.run(OrderFeignMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>业务类</p></blockquote><p>新建<code>PaymentFeignService</code>接口并新增注解<code>@FeignClient</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentFeignService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    CommonResult&lt;Payment&gt; <span class="title function_">getPaymentById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderFeignController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><p>启动eureka7001</p><p>再启动2个微服务提供者<code>cloud-provider-payment8001</code>/<code>cloud-provider-payment8002</code></p><p>最后启动<code>cloud-consumer-feign-order80</code></p><p>浏览器访问：<a href="http://localhost/consumer/payment/get/1">http://localhost/consumer/payment/get/1</a></p><p><img src="https://images.hckun.cn/image-20221221193449297.png" alt="image-20221221193449297"></p><p>可以看到8001\8002交替提供服务，说明<code>Feign</code>自带<strong>负载均衡</strong>配置项</p><h1 id="3、OpenFeign不同参数调用"><a href="#3、OpenFeign不同参数调用" class="headerlink" title="3、OpenFeign不同参数调用"></a>3、OpenFeign不同参数调用</h1><h2 id="3-1、单个或多个参数"><a href="#3-1、单个或多个参数" class="headerlink" title="3.1、单个或多个参数"></a>3.1、单个或多个参数</h2><blockquote><p>单个参数</p></blockquote><p><strong>普通传参</strong></p><p><code>PaymentController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get1</span><span class="params">(String id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;普通方式传参:单个参数：id=&quot;</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PaymentFeignService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get1&quot;)</span></span><br><span class="line">String <span class="title function_">get1</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> String id)</span>;</span><br></pre></td></tr></table></figure><p><code>OrderFeignController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> paymentFeignService.get1(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221226093639542.png" alt="image-20221226093639542"></p><p><strong>路径传参</strong></p><p><code>PaymentController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get2/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">get2</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;路径方式传参:单个参数：id=&quot;</span> + id;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>PaymentFeignService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get2/&#123;id&#125;&quot;)</span></span><br><span class="line">String <span class="title function_">get2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id)</span>;</span><br></pre></td></tr></table></figure><p><code>OrderFeignController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> paymentFeignService.get2(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221226094301474.png" alt="image-20221226094301474"></p><blockquote><p>多个参数</p></blockquote><p><strong>普通传参</strong></p><p><code>PaymentController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get3</span><span class="params">(String id1, String id2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;普通方式传参:多个参数：id1=&quot;</span> + id1 +<span class="string">&quot; id2=&quot;</span> + id2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PaymentFeignService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get3&quot;)</span></span><br><span class="line">String <span class="title function_">get3</span><span class="params">(<span class="meta">@RequestParam(&quot;id1&quot;)</span> String id1, <span class="meta">@RequestParam(&quot;id2&quot;)</span>String id2)</span>;</span><br></pre></td></tr></table></figure><p><code>OrderFeignController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> paymentFeignService.get3(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221226094947392.png" alt="image-20221226094947392"></p><p><strong>路径传参</strong></p><p><code>PaymentController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get4/&#123;id1&#125;/&#123;id2&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get4</span><span class="params">(<span class="meta">@PathVariable(&quot;id1&quot;)</span> String id1,<span class="meta">@PathVariable(&quot;id2&quot;)</span> String id2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;路径方式传参:多个参数：id1=&quot;</span> + id1 +<span class="string">&quot; id2=&quot;</span> + id2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PaymentFeignService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get4/&#123;id1&#125;/&#123;id2&#125;&quot;)</span></span><br><span class="line">String <span class="title function_">get4</span><span class="params">(<span class="meta">@PathVariable(&quot;id1&quot;)</span> String id1, <span class="meta">@PathVariable(&quot;id2&quot;)</span> String id2)</span>;</span><br></pre></td></tr></table></figure><p><code>OrderFeignController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get4</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> paymentFeignService.get4(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221226095337924.png" alt="image-20221226095337924"></p><h2 id="3-2、数组参数"><a href="#3-2、数组参数" class="headerlink" title="3.2、数组参数"></a>3.2、数组参数</h2><p><code>PaymentController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get5</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot;)</span> String[] ids)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;数组类型参数：&quot;</span>+ Arrays.toString(ids);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PaymentFeignService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get5&quot;)</span></span><br><span class="line">String <span class="title function_">get5</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot;)</span> String[] ids)</span>;</span><br></pre></td></tr></table></figure><p><code>OrderFeignController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get5</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> paymentFeignService.get5(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221226100148227.png" alt="image-20221226100148227"></p><h2 id="3-3、集合参数"><a href="#3-3、集合参数" class="headerlink" title="3.3、集合参数"></a>3.3、集合参数</h2><blockquote><p>List集合</p></blockquote><p><code>PaymentController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/payment/get6&quot;)</span></span><br><span class="line"><span class="keyword">public</span>  String <span class="title function_">get6</span><span class="params">(<span class="meta">@RequestBody</span> ArrayList&lt;String&gt; ids)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;集合类型参数：&quot;</span>+ ids;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PaymentFeignService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/payment/get6&quot;)</span></span><br><span class="line">String <span class="title function_">get6</span><span class="params">(List&lt;String&gt; ids)</span>;</span><br></pre></td></tr></table></figure><p><code>OrderFeignController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get6</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> paymentFeignService.get6(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221226102508333.png" alt="image-20221226102508333"></p><blockquote><p>Set集合</p></blockquote><p><code>PaymentController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/payment/get7&quot;)</span></span><br><span class="line"><span class="keyword">public</span>  String <span class="title function_">get7</span><span class="params">(<span class="meta">@RequestBody</span> HashSet&lt;String&gt; ids)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;集合类型参数：&quot;</span>+ ids;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PaymentFeignService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/payment/get7&quot;)</span></span><br><span class="line">String <span class="title function_">get7</span><span class="params">(Set&lt;String&gt; ids)</span>;</span><br></pre></td></tr></table></figure><p><code>OrderFeignController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get7&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get7</span><span class="params">()</span> &#123;</span><br><span class="line">    Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">   set.add(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">   set.add(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">   set.add(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> paymentFeignService.get7(set);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221226102820456.png" alt="image-20221226102820456"></p><blockquote><p>Map集合</p></blockquote><p><code>PaymentController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/payment/get8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get8</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;集合类型参数：&quot;</span> + map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PaymentFeignService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/payment/get8&quot;)</span></span><br><span class="line">String <span class="title function_">get8</span><span class="params">(Map&lt;String, String&gt; map)</span>;</span><br></pre></td></tr></table></figure><p><code>OrderFeignController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get8</span><span class="params">()</span> &#123;</span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> paymentFeignService.get8(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221226103201223.png" alt="image-20221226103201223"></p><h2 id="3-4、对象参数"><a href="#3-4、对象参数" class="headerlink" title="3.4、对象参数"></a>3.4、对象参数</h2><p>首先创建<code>People</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PaymentController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/payment/get9&quot;)</span></span><br><span class="line"><span class="keyword">public</span>  String <span class="title function_">get9</span><span class="params">(<span class="meta">@RequestBody</span> People people)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;对象类型参数：&quot;</span> + people.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PaymentFeignService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/payment/get9&quot;)</span></span><br><span class="line">String <span class="title function_">get9</span><span class="params">(People people)</span>;</span><br></pre></td></tr></table></figure><p><code>OrderFeignController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/get9&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">get9</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">People</span> <span class="variable">people</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">People</span>();</span><br><span class="line">    people.setName(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">            .setAge(<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> paymentFeignService.get9(people);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221226103806377.png" alt="image-20221226103806377"></p><h1 id="4、OpenFeign超时控制"><a href="#4、OpenFeign超时控制" class="headerlink" title="4、OpenFeign超时控制"></a>4、OpenFeign超时控制</h1><p><strong>超时设置，故意设置超时演示出错情况</strong></p><p><code>PaymentController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/timeout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentFeignTimeout</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 业务逻辑处理正确，但是需要耗费3秒钟</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> serverPort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PaymentFeignService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/timeout&quot;)</span></span><br><span class="line">String <span class="title function_">paymentFeignTimeout</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p><code>OrderFeignController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/timeout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">paymentFeignTimeout</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// OpenFeign客户端一般默认等待1秒钟</span></span><br><span class="line">    <span class="keyword">return</span> paymentFeignService.paymentFeignTimeout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多次访问发现都是同一错误：<strong>调用超时</strong></p><p><strong>OpenFeign默认等待1秒钟，超过后报错</strong></p><p><img src="https://images.hckun.cn/image-20221226104414095.png" alt="image-20221226104414095"></p><p><strong>YML文件里需要开启OpenFeign客户端超时控制</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置feign客户端超时时间(OpenF</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment">#指的是建立连接所用的时间，适用于网络</span></span><br><span class="line">  <span class="attr">ConnectionTimeout:</span> </span><br><span class="line">  <span class="comment">#指的是建立连接后从服务器读取到可用资</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure><h1 id="5、OpenFeign日志增强"><a href="#5、OpenFeign日志增强" class="headerlink" title="5、OpenFeign日志增强"></a>5、OpenFeign日志增强</h1><p><strong>日志打印功能</strong></p><p>Feign提供了日志打印功能，我们可以通过配置来调整日恙级别，从而了解Feign 中 Http请求的细节</p><p>说白了就是对Feign接口的调用情况进行监控和输出</p><p><strong>日志级别</strong></p><ul><li>NONE：默认的，不显示任何日志</li><li>BASIC：仅记录请求方法、URL、响应状态码及执行时间</li><li>HEADERS：除了BASIC中定义的信息之外，还有请求和响应的头信息</li><li>FULL：除了HEADERS中定义的信息之外，还有请求和响应的正文及元数据</li></ul><blockquote><p>配置日志bean</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.Level <span class="title function_">feignLoggerLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>YML文件里需要开启日志的Feign客户端</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment"># feign日志以什么级别监控哪个接口</span></span><br><span class="line">    <span class="attr">org.example.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>可以看到控制台会打印出比较详细的请求信息</p><p><img src="https://images.hckun.cn/image-20221226105538170.png" alt="image-20221226105538170"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud(三) 负载均衡Ribbon</title>
      <link href="/post/d5d356e3.html"/>
      <url>/post/d5d356e3.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、Rabbion介绍"><a href="#1、Rabbion介绍" class="headerlink" title="1、Rabbion介绍"></a>1、Rabbion介绍</h1><p>Spring Cloud Ribbon是基于Netflix Ribbon实现的一套<strong>客户端负载均衡的工具</strong>。</p><p>简单的说，Ribbon是Netflix发布的开源项目，主要功能是提供<strong>客户端的软件负载均衡算法和服务调用</strong>。Ribbon客户端组件提供一系列完善的配置项如连接超时，重试等。</p><p>简单的说，就是在配置文件中列出Load Balancer(简称LB)后面所有的机器，Ribbon会自动的帮助你基于某种规则(如简单轮询，随机连接等）去连接这些机器。我们很容易使用Ribbon实现自定义的负载均衡算法。</p><p>Ribbon目前也进入维护模式。</p><p>Ribbon未来可能被Spring Cloud LoadBalacer替代。</p><blockquote><p><strong>LB负载均衡(Load Balance)</strong></p></blockquote><p>简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA (高可用)。</p><p>常见的负载均衡有软件Nginx，LVS，硬件F5等。</p><blockquote><p><strong>Ribbon本地负载均衡客户端VS Nginx服务端负载均衡区别</strong></p></blockquote><p>Nginx是服务器负载均衡，客户端所有请求都会交给nginx，然后由nginx实现转发请求。即负载均衡是由服务端实现的。<br>Ribbon本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到JVM本地，从而在本地实现RPC远程服务调用技术。</p><blockquote><p><strong>集中式LB</strong></p></blockquote><p>即在服务的消费方和提供方之间使用独立的LB设施(可以是硬件，如F5, 也可以是软件，如nginx)，由该设施负责把访问请求通过某种策略转发至服务的提供方。</p><blockquote><p><strong>进程内LB</strong></p></blockquote><p>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。</p><p><strong>Ribbon就属于进程内LB</strong>，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</p><p>**一句话:**负载均衡 + RestTemplate调用</p><h1 id="2、Ribbon的负载均衡和Rest调用"><a href="#2、Ribbon的负载均衡和Rest调用" class="headerlink" title="2、Ribbon的负载均衡和Rest调用"></a>2、Ribbon的负载均衡和Rest调用</h1><blockquote><p>架构说明</p></blockquote><p>Ribbon其实就是一个软负载均衡的客户端组件，它可以和其他所需请求的客户端结合使用，和Eureka结合只是其中的一个实例。</p><p><img src="https://images.hckun.cn/145b915e56a85383b3ad40f0bb2256e0.png" alt="145b915e56a85383b3ad40f0bb2256e0"></p><blockquote><p>Ribbon工作步骤</p></blockquote><ul><li><p>第一步先选择EurekaServer ,它优先选择在同一个区域内负载较少的server。</p></li><li><p>第二步再根据用户指定的策略，在从server取到的服务注册列表中选择一个地址。</p></li></ul><p>其中Ribbon提供了多种策略：比如轮询、随机和根据响应时间加权。</p><p>先前工程项目没有引入spring-cloud-starter-ribbon也可以使用ribbon。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupld</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupld</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是因为spring-cloud-starter-netflix-eureka-client自带了spring-cloud-starter-ribbon引用。</p><p><img src="https://images.hckun.cn/image-20221219213525842.png" alt="image-20221219213525842"></p><h1 id="3、RestTemplate的使用"><a href="#3、RestTemplate的使用" class="headerlink" title="3、RestTemplate的使用"></a>3、RestTemplate的使用</h1><p>RestTemplate官方文档：<a href="https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html">https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html</a></p><p><strong>getForObject() / getForEntity()</strong> - GET请求方法</p><p>getForObject()：返回对象为响应体中数据转化成的对象，基本上可以理解为Json。</p><p>getForEntity()：返回对象为ResponseEntity对象，包含了响应中的一些重要信息，比如响应头、响应状态码、响应体等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//getForObject</span></span><br><span class="line">        <span class="type">CommonResult</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);</span><br><span class="line">        log.info(<span class="string">&quot;返回值：&#123;&#125;&quot;</span>, result);</span><br><span class="line">        ResponseEntity&lt;CommonResult&gt; entity = restTemplate.getForEntity(PAYMENT_URL + <span class="string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);</span><br><span class="line">        log.info(<span class="string">&quot;状态码：&#123;&#125;&quot;</span>, entity.getStatusCode());</span><br><span class="line">        log.info(<span class="string">&quot;响应体：&#123;&#125;&quot;</span>, entity.getBody());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221219215631454.png" alt="image-20221219215631454"></p><p><strong>postForObject() / postForEntity()</strong> - POST请求方法(作用如上，只是请求的方式不一样)</p><h1 id="4、Ribbon默认负载规则"><a href="#4、Ribbon默认负载规则" class="headerlink" title="4、Ribbon默认负载规则"></a>4、Ribbon默认负载规则</h1><p><code>lRule</code>：根据特定算法中从服务列表中选取一个要访问的服务</p><p><img src="https://images.hckun.cn/87243c00c0aaea211819c0d8fc97e445.png" alt="87243c00c0aaea211819c0d8fc97e445"></p><ul><li><code>RoundRobinRule</code> 轮询</li><li><code>RandomRule </code>随机</li><li><code>RetryRule</code> 先按照<code>RoundRobinRule</code>的策略获取服务，如果获取服务失败则在指定时间内会进行重试</li><li><code>WeightedResponseTimeRule</code> 对<code>RoundRobinRule</code>的扩展，响应速度越快的实例选择权重越大，越容易被选择</li><li><code>BestAvailableRule</code> 会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务</li><li><code>AvailabilityFilteringRule</code> 先过滤掉故障实例，再选择并发较小的实例</li><li><code>ZoneAvoidanceRule</code> 默认规则,复合判断server所在区域的性能和server的可用性选择服务器</li></ul><h1 id="5、Ribbon负载规则修改"><a href="#5、Ribbon负载规则修改" class="headerlink" title="5、Ribbon负载规则修改"></a>5、Ribbon负载规则修改</h1><p>修改<code>cloud-consumer-order80</code></p><blockquote><p>注意配置细节</p></blockquote><p>这个自定义配置类不能放在<code>@ComponentScan</code>所扫描的当前包下以及子包下，否则我们自定义的这个配置类就会被所有的Ribbon客户端所共享，达不到特殊化定制的目的了。</p><p><strong>也就是说不要将Ribbon配置类与主启动类同包</strong>）</p><blockquote><p>新建package - org.myrule</p></blockquote><blockquote><p>在org.myrule下新建MySelfRule规则类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.myrule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.IRule;</span><br><span class="line"><span class="keyword">import</span> com.netflix.loadbalancer.RandomRule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySelfRule</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> IRule <span class="title function_">myRule</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//随机规则</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>主启动类添加@RibbonClient</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;,configuration = MySelfRule.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        SpringApplication.run(Main.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>启动<code>cloud-eureka-server7001</code>，<code>cloud-consumer-order80</code>，<code>cloud-provider-payment8001</code>，<code>cloud-provider-payment8002</code></p><p>浏览器访问：<a href="http://localhost/consumer/payment/get/1">http://localhost/consumer/payment/get/1</a></p><p>返回结果中的serverPort在8001与8002两种间随机出现。</p><h1 id="6、Ribbon默认负载轮询算法原理"><a href="#6、Ribbon默认负载轮询算法原理" class="headerlink" title="6、Ribbon默认负载轮询算法原理"></a>6、Ribbon默认负载轮询算法原理</h1><p><strong>默认负载轮训算法: rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标，每次服务重启动后rest接口计数从1开始</strong>。</p><p><code>List&lt;Servicelnstance&gt; instances = discoveryClient.getInstances(&quot;CLOUD-PAYMENT-SERVICE&quot;);</code></p><p>如:</p><ul><li>List [0] instances = 127.0.0.1:8002</li><li>List [1] instances = 127.0.0.1:8001</li></ul><p>8001+ 8002组合成为集群，它们共计2台机器，集群总数为2，按照轮询算法原理：</p><ul><li>当总请求数为1时:1%2=1对应下标位置为1，则获得服务地址为127.0.0.1:8001</li><li>当总请求数位2时:2%2=О对应下标位置为0，则获得服务地址为127.0.0.1:8002</li><li>当总请求数位3时:3%2=1对应下标位置为1，则获得服务地址为127.0.0.1:8001</li><li>当总请求数位4时:4%2=О对应下标位置为0，则获得服务地址为127.0.0.1:8002</li><li>如此类推…</li></ul><h1 id="7、RoundRobinRule源码"><a href="#7、RoundRobinRule源码" class="headerlink" title="7、RoundRobinRule源码"></a>7、RoundRobinRule源码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.netflix.loadbalancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRule</span> &#123;</span><br><span class="line">    Server <span class="title function_">choose</span><span class="params">(Object var1)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setLoadBalancer</span><span class="params">(ILoadBalancer var1)</span>;</span><br><span class="line"></span><br><span class="line">    ILoadBalancer <span class="title function_">getLoadBalancer</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.netflix.loadbalancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.client.config.IClientConfig;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoundRobinRule</span> <span class="keyword">extends</span> <span class="title class_">AbstractLoadBalancerRule</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger nextServerCyclicCounter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">AVAILABLE_ONLY_SERVERS</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">ALL_SERVERS</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(RoundRobinRule.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RoundRobinRule</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nextServerCyclicCounter = <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RoundRobinRule</span><span class="params">(ILoadBalancer lb)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        <span class="built_in">this</span>.setLoadBalancer(lb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lb == <span class="literal">null</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;no load balancer&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (server == <span class="literal">null</span> &amp;&amp; count++ &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                    List&lt;Server&gt; reachableServers = lb.getReachableServers();</span><br><span class="line">                    List&lt;Server&gt; allServers = lb.getAllServers();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">upCount</span> <span class="operator">=</span> reachableServers.size();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">serverCount</span> <span class="operator">=</span> allServers.size();</span><br><span class="line">                    <span class="keyword">if</span> (upCount != <span class="number">0</span> &amp;&amp; serverCount != <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">nextServerIndex</span> <span class="operator">=</span> <span class="built_in">this</span>.incrementAndGetModulo(serverCount);</span><br><span class="line">                        server = (Server)allServers.get(nextServerIndex);</span><br><span class="line">                        <span class="keyword">if</span> (server == <span class="literal">null</span>) &#123;</span><br><span class="line">                            Thread.yield();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (server.isAlive() &amp;&amp; server.isReadyToServe()) &#123;</span><br><span class="line">                                <span class="keyword">return</span> server;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            server = <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    log.warn(<span class="string">&quot;No up servers available from load balancer: &quot;</span> + lb);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (count &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">                    log.warn(<span class="string">&quot;No available alive servers after 10 tries from load balancer: &quot;</span> + lb);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> server;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">incrementAndGetModulo</span><span class="params">(<span class="type">int</span> modulo)</span> &#123;</span><br><span class="line">        <span class="type">int</span> current;</span><br><span class="line">        <span class="type">int</span> next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            current = <span class="built_in">this</span>.nextServerCyclicCounter.get();</span><br><span class="line">            next = (current + <span class="number">1</span>) % modulo;</span><br><span class="line">        &#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.nextServerCyclicCounter.compareAndSet(current, next));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Server <span class="title function_">choose</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.choose(<span class="built_in">this</span>.getLoadBalancer(), key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initWithNiwsConfig</span><span class="params">(IClientConfig clientConfig)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8、Ribbon之手写轮询算法"><a href="#8、Ribbon之手写轮询算法" class="headerlink" title="8、Ribbon之手写轮询算法"></a>8、Ribbon之手写轮询算法</h1><p>自己试着写一个类似RoundRobinRule的本地负载均衡器。</p><p>启动<code>cloud-eureka-server7001</code></p><blockquote><p>cloud-provider-payment8001/8002微服务改造- controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/lb&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPaymentLB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> serverPort;<span class="comment">//返回服务接口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>cloud-consumer-order80订单微服务改造</p></blockquote><p><code>ApplicationContextConfig</code>去掉注解<code>@LoadBalanced</code>，主启动类去掉注解<code>@RibbonClient</code></p><blockquote><p>创建LoadBalancer接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LoadBalancer</span> &#123;</span><br><span class="line"></span><br><span class="line">    ServiceInstance <span class="title function_">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>MyLB</p></blockquote><p>实现LoadBalancer接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLB</span> <span class="keyword">implements</span> <span class="title class_">LoadBalancer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> current;</span><br><span class="line">        <span class="type">int</span> next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            current = <span class="built_in">this</span>.atomicInteger.get();</span><br><span class="line">            next = current &gt;= <span class="number">2147483647</span> ? <span class="number">0</span> : current + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!<span class="built_in">this</span>.atomicInteger.compareAndSet(current, next));</span><br><span class="line">        System.out.println(<span class="string">&quot;*****第几次访问，次数next: &quot;</span> + next);</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//负载均衡算法：rest接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标  ，每次服务重启动后rest接口计数从1开始。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServiceInstance <span class="title function_">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstances)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getAndIncrement() % serviceInstances.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> serviceInstances.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>OrderController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancer LoadBalancer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/lb&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPaymentLB</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (instances == <span class="literal">null</span> || instances.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ServiceInstance</span> <span class="variable">serviceInstance</span> <span class="operator">=</span> LoadBalancer.instances(instances);</span><br><span class="line">        <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> serviceInstance.getUri();</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(uri + <span class="string">&quot;/payment/lb&quot;</span>, String.class);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>浏览器访问：<a href="http://localhost/consumer/payment/lb">http://localhost/consumer/payment/lb</a></p><p>可以看到8001/8002交替出现</p><p><img src="https://images.hckun.cn/image-20221219222619567.png" alt="image-20221219222619567"></p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud(二) 服务注册与发现</title>
      <link href="/post/4d0dbdcb.html"/>
      <url>/post/4d0dbdcb.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、Eureka基础知识"><a href="#1、Eureka基础知识" class="headerlink" title="1、Eureka基础知识"></a>1、Eureka基础知识</h1><blockquote><p>什么是服务治理</p></blockquote><p>Spring Cloud封装了Netflix 公司开发的Eureka模块来实现服务治理。</p><p>在传统的RPC远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间依赖关系，可以实现服务调用、负载均衡、容错等，实现服务发现与注册。</p><blockquote><p>什么是服务注册与发现</p></blockquote><p>Eureka采用了CS的设计架构，Eureka Sever作为服务注册功能的服务器，它是服务注册中心。而系统中的其他微服务，使用Eureka的客户端连接到 Eureka Server并维持心跳连接。这样系统的维护人员就可以通过Eureka Server来监控系统中各个微服务是否正常运行。<br>在服务注册与发现中，有一个注册中心。当服务器启动的时候，会把当前自己服务器的信息比如服务地址通讯地址等以别名方式注册到注册中心上。另一方(消费者服务提供者)，以该别名的方式去注册中心上获取到实际的服务通讯地址，然后再实现本地RPC调用RPC远程调用框架核心设计思想:在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理概念)。在任何RPC远程框架中，都会有一个注册中心存放服务地址相关信息(接口地址)。</p><p><strong>Eureka包含两个组件:Eureka Server和Eureka Client</strong></p><p><strong>Eureka Server</strong>提供服务注册服务</p><p>各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直观看到。</p><p><strong>EurekaClient</strong>通过注册中心进行访问</p><p>它是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会向Eureka Server发送心跳(默认周期为30秒)。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除（默认90秒)</p><h1 id="2、EurekaServer服务端搭建"><a href="#2、EurekaServer服务端搭建" class="headerlink" title="2、EurekaServer服务端搭建"></a>2、EurekaServer服务端搭建</h1><blockquote><p>创建名为<code>cloud-eureka-server7001</code>的Maven工程</p></blockquote><blockquote><p>修改pom.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-eureka-server7001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--eureka-server--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--boot web actuator--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一般通用配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>添加application.yml</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span> <span class="comment">#eureka服务端实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>  <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#false表示自己就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span>  <span class="comment">//注册中心声明注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Main.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试运行<code>EurekaMain7001</code>，浏览器输入<code>http://localhost:7001/</code>回车，会查看到Spring Eureka服务主页</p><p><img src="https://images.hckun.cn/image-20221215225605337.png" alt="image-20221215225605337"></p><h1 id="3、支付微服务8001入驻进EurekaServer"><a href="#3、支付微服务8001入驻进EurekaServer" class="headerlink" title="3、支付微服务8001入驻进EurekaServer"></a>3、支付微服务8001入驻进EurekaServer</h1><p>EurekaClient端<code>cloud-provider-payment8001</code>将注册进EurekaServer成为服务提供者provider。</p><blockquote><p>pom增加依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>修改yml配置</p></blockquote><p>增加以下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进Eurekaserver默认为true。</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类增加@EnableEurekaClient</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Main.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>启动<code>cloud-provider-payment8001</code>和<code>cloud-eureka-server7001</code>工程</p><p>浏览器访问 <a href="http://localhost:7001/">http://localhost:7001/</a> </p><p><img src="https://images.hckun.cn/image-20221215231145561.png" alt="image-20221215231145561"></p><h1 id="4、订单微服务80入驻进EurekaServer"><a href="#4、订单微服务80入驻进EurekaServer" class="headerlink" title="4、订单微服务80入驻进EurekaServer"></a>4、订单微服务80入驻进EurekaServer</h1><p>订单微服务80入驻进EurekaServer跟支付微服务8001入驻进EurekaServer的步骤完全一致，按上述操作即可</p><p>yml配置文件增加服务名称</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221215231646350.png" alt="image-20221215231646350"></p><h1 id="5、Eureka集群原理说明"><a href="#5、Eureka集群原理说明" class="headerlink" title="5、Eureka集群原理说明"></a>5、Eureka集群原理说明</h1><p><img src="https://images.hckun.cn/14570c4b7c4dd8653be6211da2675e45.png" alt="14570c4b7c4dd8653be6211da2675e45"></p><p>服务注册：将服务信息注册进注册中心</p><p>服务发现：从注册中心上获取服务信息</p><p>实质：存key服务名称，取value调用地址</p><ol><li>先启动eureka注主册中心</li><li>启动服务提供者payment支付服务</li><li>支付服务启动后会把自身信息(比服务地址L以别名方式注朋进eureka</li><li>消费者order服务在需要调用接口时，使用服务别名去注册中心获取实际的RPC远程调用地址</li><li>消去者调用地址后，底屋实际是利用HttpClient技术实现远程调用</li><li>消费者实获取服务地址后会缓存在本地jvm内存中，默认每间隔30秒更新—次服务调用地址</li></ol><blockquote><p>微服务RPC远程服务调用最核心的是什么</p></blockquote><p>高可用，试想你的注册中心只有一个only one，万一它出故障了，会导致整个为服务环境不可用。</p><p>解决办法：搭建Eureka注册中心集群，实现负载均衡+故障容错。</p><p><strong>互相注册，相互守望</strong>。</p><h1 id="6、Eureka集群环境构建"><a href="#6、Eureka集群环境构建" class="headerlink" title="6、Eureka集群环境构建"></a>6、Eureka集群环境构建</h1><p>创建<code>cloud-eureka-server7002</code>工程参考<code>cloud-eureka-server7001</code>的创建步骤</p><p><img src="https://images.hckun.cn/image-20221216205427687.png" alt="image-20221216205427687"></p><blockquote><p>修改hosts映射文件</p></blockquote><ul><li><code>Windows</code>    C:\Windows\System32\drivers\etc路径下的hosts文件</li><li><code>Linux</code>        /etc/hosts</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">增加以下映射</span></span><br><span class="line">127.0.0.1 eureka7001.com</span><br><span class="line">127.0.0.1 eureka7002.com</span><br></pre></td></tr></table></figure><blockquote><p>修改cloud-eureka-server7001配置文件</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment">#eureka服务端实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>  <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#false表示自己就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#集群指向其它eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br><span class="line">      <span class="comment">#单机就是7001自己</span></span><br><span class="line">      <span class="comment">#defaultZone: http://eureka7001.com:7001/eureka/  #设置与Eureka server交互的地址 查询服务和注册服务都需要依赖这个地址。</span></span><br></pre></td></tr></table></figure><blockquote><p>修改cloud-eureka-server7002配置文件</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span> <span class="comment">#eureka服务端实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span>  <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span> <span class="comment">#false表示自己就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#集群指向其它eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span>  <span class="string">http://eureka7001.com:7001/eureka/</span></span><br><span class="line">      <span class="comment">#单机就是7002自己</span></span><br><span class="line">      <span class="comment">#defaultZone: http://eureka7002.com:7002/eureka/  #设置与Eureka server交互的地址 查询服务和注册服务都需要依赖这个地址。</span></span><br></pre></td></tr></table></figure><h1 id="7、订单支付两微服务注册进Eureka集群"><a href="#7、订单支付两微服务注册进Eureka集群" class="headerlink" title="7、订单支付两微服务注册进Eureka集群"></a>7、订单支付两微服务注册进Eureka集群</h1><p>将支付服务<code>cloud-provider-payment8001</code>微服务，订单服务<code>cloud-consumer-order80</code>微服务发布到上面2台Eureka集群配置中</p><p>将它们的配置文件的<code>eureka.client.service-url.defaultZone</code>统一修改为如下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册进Eurekaserver默认为true。</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>先要启动EurekaServer，7001/7002服务</p><p>再要启动服务提供者provider，8001</p><p>再要启动消费者，80</p><p>浏览器输入 - <a href="http://localhost/consumer/payment/get/1">http://localhost/consumer/payment/get/1</a></p><p><img src="https://images.hckun.cn/image-20221216211428602.png" alt="image-20221216211428602"></p><h1 id="8、支付微服务集群配置"><a href="#8、支付微服务集群配置" class="headerlink" title="8、支付微服务集群配置"></a>8、支付微服务集群配置</h1><p>参考<code>cloud-provicer-payment8001</code>新建模块<code>参考cloud-provicer-payment8002</code></p><p><img src="https://images.hckun.cn/image-20221216211920542.png" alt="image-20221216211920542"></p><blockquote><p>修改8001/8002的Controller，添加serverPort</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/payment/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">&quot;*****插入结果：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result &gt; <span class="number">0</span> ? <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>, <span class="string">&quot;插入数据库成功，serverPort:&quot;</span> + serverPort + result) : <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">201</span>, <span class="string">&quot;插入数据库失败,serverPort:&quot;</span> + serverPort + result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">Payment</span> <span class="variable">payment</span> <span class="operator">=</span> paymentService.getPaymentById(id);</span><br><span class="line">        <span class="keyword">return</span> payment != <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>, <span class="string">&quot;查询成功,serverPort:&quot;</span> + serverPort + payment) : <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">201</span>, <span class="string">&quot;没有对应记录,查询ID: &quot;</span> + id, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动访问：<a href="http://localhost/consumer/payment/get/1">http://localhost/consumer/payment/get/1</a></p><p><img src="https://images.hckun.cn/image-20221216212426319.png" alt="image-20221216212426319"></p><p>我们发现，无论访问多少次，始终都是8001为我们提供服务,为什么那？</p><p>这是因为我们在订单服务<code>cloud-consumer-order80</code>中远程调用地址写死的是<code>http://localhost:8001</code></p><p><img src="https://images.hckun.cn/image-20221216212644647-20221216212649330.png" alt="image-20221216212644647"></p><blockquote><p>实现负载均衡访问</p></blockquote><p>我们想要实现的效果是让<code>cloud-provider-payment8001</code>和<code>cloud-provider-payment8001</code>都给我们提供服务</p><p>需要对<code>OrderController</code>进行如下修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// public static final String PAYMENT_URL = &quot;http://localhost:8001&quot;;</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>先要启动EurekaServer，7001/7002服务</p><p>再要启动服务提供者provider，8001/8002服务</p><p>浏览器输入 - <a href="http://localhost/consumer/payment/get/31">http://localhost/consumer/payment/get/31</a></p><p><strong>结果：负载均衡效果达到，8001/8002端口交替出现</strong></p><h1 id="9、actuator微服务信息完善"><a href="#9、actuator微服务信息完善" class="headerlink" title="9、actuator微服务信息完善"></a>9、actuator微服务信息完善</h1><p><img src="https://images.hckun.cn/image-20221216213402405.png" alt="image-20221216213402405"></p><p>在eureka的Status中，我们发现展示的都是服务的<code>ip</code>+<code>服务名</code>+<code>端口号</code></p><p>我们可以将<code>ip</code>地址进行修改，换成可读性高的名字</p><p>修改<code>cloud-provider-payment8001</code>，<code>cloud-provider-payment8002</code>配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span>  <span class="comment">#添加此处</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8002</span>  <span class="comment">#添加此处</span></span><br></pre></td></tr></table></figure><p>修改之后</p><p><img src="https://images.hckun.cn/image-20221216213959838.png" alt="image-20221216213959838"></p><p>eureka主页将显示payment8001，payment8002代替原来显示的IP地址。</p><h1 id="10、服务发现Discovery"><a href="#10、服务发现Discovery" class="headerlink" title="10、服务发现Discovery"></a>10、服务发现Discovery</h1><p>对于注册进eureka里面的微服务，可以通过服务发现来获得该服务的信息</p><p>修改<code>cloud-provider-payment8001</code>的Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/discovery&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">discovery</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">        <span class="keyword">for</span> (String element : services) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;*****element: &quot;</span> + element);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">            log.info(instance.getServiceId() + <span class="string">&quot;\t&quot;</span> + instance.getHost() + <span class="string">&quot;\t&quot;</span> + instance.getPort() + <span class="string">&quot;\t&quot;</span> + instance.getUri());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.discoveryClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8001主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span><span class="comment">//添加该注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Main.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器访问：<a href="http://localhost:8001//payment/discovery">http://localhost:8001//payment/discovery</a></p><p><img src="https://images.hckun.cn/image-20221216220614783.png" alt="image-20221216220614783"></p><p>控制台输出</p><p><img src="https://images.hckun.cn/image-20221216220632925.png" alt="image-20221216220632925"></p><h1 id="11、Eureka自我保护"><a href="#11、Eureka自我保护" class="headerlink" title="11、Eureka自我保护"></a>11、Eureka自我保护</h1><p>保护模式主要用于一组客户端和Eureka Server之间存在网络分区场景下的保护。一旦进入保护模式，Eureka Server将会尝试保护其服务注册表中的信息，不再删除服务注册表中的数据，也就是不会注销任何微服务。</p><p>如果在Eureka Server的首页看到以下这段提示，则说明Eureka进入了保护模式:</p><p><img src="https://images.hckun.cn/image-20221216220807740.png" alt="image-20221216220807740"></p><p>某时刻某一个微服务不可用了，Eureka不会立刻清理，依旧会对该微服务的信息进行保存。</p><blockquote><p>为什么会产生Eureka自我保护机制</p></blockquote><p>为了EurekaClient可以正常运行，防止与EurekaServer网络不通情况下，EurekaServer不会立刻将EurekaClient服务剔除。</p><blockquote><p>什么是自我保护模式</p></blockquote><p>默认情况下，如果EurekaServer在一定时间内没有接收到某个微服务实例的心跳，EurekaServer将会注销该实例(默认90秒)。但是当网络分区故障发生(延时、卡顿、拥挤)时，微服务与EurekaServer之间无法正常通信，以上行为可能变得非常危险了——因为微服务本身其实是健康的，此时本不应该注销这个微服务。Eureka通过“自我保护模式”来解决这个问题——当EurekaServer节点在短时间内丢失过多客户端时(可能发生了网络分区故障)，那么这个节点就会进入自我保护模式。<br>自我保护机制∶默认情况下EurekaClient定时向EurekaServer端发送心跳包</p><p>如果Eureka在server端在一定时间内(默认90秒)没有收到EurekaClient发送心跳包，便会直接从服务注册列表中剔除该服务，但是在短时间( 90秒中)内丢失了大量的服务实例心跳，这时候Eurekaserver会开启自我保护机制，不会剔除该服务（该现象可能出现在如果网络不通但是EurekaClient为出现宕机，此时如果换做别的注册中心如果一定时间内没有收到心跳会将剔除该服务，这样就出现了严重失误，因为客户端还能正常发送心跳，只是网络延迟问题，而保护机制是为了解决此问题而产生的)。</p><p><strong>在自我保护模式中，Eureka Server会保护服务注册表中的信息，不再注销任何服务实例</strong>。</p><p>综上，自我保护模式是一种应对网络异常的安全保护措施。它的架构哲学是宁可同时保留所有微服务（健康的微服务和不健康的微服务都会保留）也不盲目注销任何健康的微服务。使用自我保护模式，可以让Eureka集群更加的健壮、稳定。</p><h1 id="12、eureka禁止自我保护"><a href="#12、eureka禁止自我保护" class="headerlink" title="12、eureka禁止自我保护"></a>12、eureka禁止自我保护</h1><p>在eurekaServer端7001处设置关闭自我保护机制，默认是开启</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="comment">#关闭自我保护机制，保证不可用服务被及时踢除</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><p>关闭效果：<img src="https://images.hckun.cn/image-20221216221342126.png" alt="image-20221216221342126"></p><p>生产者客户端eureakeClient端8001</p><p>默认：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka.instance.lease-renewal-interval-in-seconds</span>=<span class="string">30</span></span><br><span class="line"><span class="attr">eureka.instance.lease-expiration-duration-in-seconds</span>=<span class="string">90</span></span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span></span><br><span class="line">    <span class="comment">#心跳检测与续约时间</span></span><br><span class="line">    <span class="comment">#开发时没置小些，保证服务关闭后注册中心能即使剔除服务</span></span><br><span class="line">    <span class="comment">#Eureka客户端向服务端发送心跳的时间间隔，单位为秒(默认是30秒)</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment">#Eureka服务端在收到最后一次心跳后等待时间上限，单位为秒(默认是90秒)，超时将剔除服务</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><ul><li>7001和8001都配置完成</li><li>先启动7001再启动8001</li></ul><p>关闭8001，发现eureka马上被把8001删除了</p><blockquote><p>Eureka停更说明</p></blockquote><p><a href="https://github.com/Netflix/eureka/wiki">https://github.com/Netflix/eureka/wiki</a></p><p>Eureka 2.0 (Discontinued)</p><p>The existing open source work on eureka 2.0 is discontinued. The code base and artifacts that were released as part of the existing repository of work on the 2.x branch is considered use at your own risk.</p><p>Eureka 1.x is a core part of Netflix’s service discovery system and is still an active project.</p><h1 id="13、支付服务注册进zookeeper"><a href="#13、支付服务注册进zookeeper" class="headerlink" title="13、支付服务注册进zookeeper"></a>13、支付服务注册进zookeeper</h1><p>Zookeeper是一个分布式协调工具，可以实现注册中心功能</p><p>zookeeper服务器取代Eureka服务器，zk作为服务注册中心</p><blockquote><p>建名为cloud-provider-payment8004的Maven工程</p></blockquote><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment8004<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--先排除自带的zookeeper3.5.3 防止与3.4.9起冲突--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加zookeeper3.4.9版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#8004表示注册到zookeeper服务器的支付服务提供者端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务别名----注册zookeeper到注册中心名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span><span class="comment">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Payment8004</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Payment8004.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/payment/zk&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentzk</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with zookeeper: &quot;</span>+serverPort+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动8004注册进zookeeper（要先启动zookeeper的server）</p><p>浏览器 访问- <a href="http://localhost:8004/payment/zk">http://localhost:8004/payment/zk</a></p><p><img src="https://images.hckun.cn/image-20221216234906834.png" alt="image-20221216234906834"></p><p>使用用zookeeper客户端查看注册进的服务</p><p><img src="https://images.hckun.cn/image-20221216235000154.png" alt="image-20221216235000154"></p><p>json格式化<code>get /services/cloud-provider-payment/5763b4a3-d7c3-44d9-9047-218f27ed279d</code>的结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cloud-provider-payment&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5763b4a3-d7c3-44d9-9047-218f27ed279d&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192.168.0.101&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">8004</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sslPort&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application-1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cloud-provider-payment&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;registrationTimeUTC&quot;</span><span class="punctuation">:</span> <span class="number">1671205530668</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;serviceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DYNAMIC&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;uriSpec&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;parts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;scheme&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;://&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;address&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;:&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;port&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>ZooKeeper的服务节点是<strong>临时节点</strong></p></blockquote><h1 id="14、订单服务注册进zookeeper"><a href="#14、订单服务注册进zookeeper" class="headerlink" title="14、订单服务注册进zookeeper"></a>14、订单服务注册进zookeeper</h1><p>新建<code>cloud-consumerzk-order80</code></p><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumerzk-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--先排除自带的zookeeper--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--添加zookeeper3.4.9版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#服务别名----注册zookeeper到注册中心名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2181</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderZKMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        SpringApplication.run(OrderZKMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderZKController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INVOKE_URL</span> <span class="operator">=</span> <span class="string">&quot;http://cloud-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/zk&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(INVOKE_URL + <span class="string">&quot;/payment/zk&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Config</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>运行ZooKeeper服务端，<code>cloud-consumerzk-order80</code>，<code>cloud-provider-payment8004</code></p><p>打开ZooKeeper客户端：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 3] ls /</span><br><span class="line">[services, zookeeper]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 4] ls /services</span><br><span class="line">[cloud-consumer-order, cloud-provider-payment]</span><br></pre></td></tr></table></figure><p>浏览器访问 - <a href="http://localhost/consumer/payment/zk">http://localhost/consumer/payment/zk</a></p><p><img src="https://images.hckun.cn/image-20221216235954896.png" alt="image-20221216235954896"></p><h1 id="15、Consul简介"><a href="#15、Consul简介" class="headerlink" title="15、Consul简介"></a>15、Consul简介</h1><p>Consul是一个服务网格解决方案，它提供了一个功能齐全的控制平面，具有服务发现、配置和分段功能。这些特性中的每一个都可以根据需要单独使用，也可以一起用于构建全服务网格。Consul需要一个数据平面，并支持代理和本机集成模型。Consul船与一个简单的内置代理，使一切工作的开箱即用，但也支持第三方代理集成，如Envoy。<br>官网地址：<a href="https://www.consul.io/">https://www.consul.io/</a></p><p>Consul是一套开源的分布式服务发现和配置管理系统，由HashiCorp 公司用Go语言开发。</p><p>提供了微服务系统中的服务治理、配置中心、控制总线等功能。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建全方位的服务网格，总之Consul提供了一种完整的服务网格解决方案。</p><p>它具有很多优点。包括：基于raft协议，比较简洁；支持健康检查，同时支持HTTP和DNS协议支持跨数据中心的WAN集群提供图形界面跨平台，支持Linux、Mac、Windows。</p><h1 id="16、安装并运行Consul"><a href="#16、安装并运行Consul" class="headerlink" title="16、安装并运行Consul"></a>16、安装并运行Consul</h1><p>选择对应操作系统安装即可</p><p><img src="https://images.hckun.cn/image-20221217000154566.png" alt="image-20221217000154566"></p><p>查看consul版本号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro environment % consul -v</span><br><span class="line">Consul v1.14.3</span><br><span class="line">Revision bd257019</span><br><span class="line">Build Date 2022-12-13T17:13:55Z</span><br><span class="line">Protocol 2 spoken by default, understands 2 to 3 (agent will automatically use protocol &gt;2 when speaking to compatible agents)</span><br></pre></td></tr></table></figure><p>启动consul</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul agent -dev</span><br></pre></td></tr></table></figure><p>浏览器访问： <a href="http://localhost:8500/">http://localhost:8500/</a> - 打开Consul控制页</p><p><img src="https://images.hckun.cn/image-20221217000641275.png" alt="image-20221217000641275"></p><h1 id="17、服务提供者注册进Consul"><a href="#17、服务提供者注册进Consul" class="headerlink" title="17、服务提供者注册进Consul"></a>17、服务提供者注册进Consul</h1><p>新建Module支付服务<code>provider8006</code></p><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>provider8006<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###consul服务端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-provider-payment</span></span><br><span class="line">  <span class="comment">####consul注册中心地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#hostname: 127.0.0.1</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentMain8006</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        SpringApplication.run(PaymentMain8006.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/payment/consul&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentConsul</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with consul: &quot;</span> + serverPort + <span class="string">&quot;\t   &quot;</span> + UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>浏览器访问：<a href="http://localhost:8006/payment/consul">http://localhost:8006/payment/consul</a></p><p><img src="https://images.hckun.cn/image-20221217001235985.png" alt="image-20221217001235985"></p><p>浏览器访问： <a href="http://localhost:8500/">http://localhost:8500/</a></p><p><img src="https://images.hckun.cn/image-20221217001302006.png" alt="image-20221217001302006"></p><h1 id="18、服务消费者注册进Consul"><a href="#18、服务消费者注册进Consul" class="headerlink" title="18、服务消费者注册进Consul"></a>18、服务消费者注册进Consul</h1><p>新建Module消费服务order80 - <code>cloud-consumerconsul-order80</code></p><blockquote><p>POM</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumerconsul-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud consul-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot整合Web组件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>YML</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">###consul服务端口号</span><br><span class="line">server:</span><br><span class="line">  port: 80</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: cloud-consumer-order</span><br><span class="line">  ####consul注册中心地址</span><br><span class="line">  cloud:</span><br><span class="line">    consul:</span><br><span class="line">      host: localhost</span><br><span class="line">      port: 8500</span><br><span class="line">      discovery:</span><br><span class="line">        #hostname: 127.0.0.1</span><br><span class="line">        service-name: $&#123;spring.application.name&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderConsulMain80</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderConsulMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderConsulController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INVOKE_URL</span> <span class="operator">=</span> <span class="string">&quot;http://consul-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/consul&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">paymentInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> restTemplate.getForObject(INVOKE_URL + <span class="string">&quot;/payment/consul&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Config</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span> <span class="comment">//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>运行<code>consul</code>，<code>cloud-providerconsul-payment8006</code>，<code>cloud-consumerconsul-order80</code></p><p>浏览器访问：<a href="http://localhost/consumer/payment/consul">http://localhost/consumer/payment/consul</a></p><p><img src="https://images.hckun.cn/image-20221217001852594.png" alt="image-20221217001852594"></p><p>浏览器访问： <a href="http://localhost:8500/">http://localhost:8500/</a></p><p><img src="https://images.hckun.cn/image-20221217001910470.png" alt="image-20221217001910470"></p><h1 id="19、三个注册中心比较"><a href="#19、三个注册中心比较" class="headerlink" title="19、三个注册中心比较"></a>19、三个注册中心比较</h1><table><thead><tr><th>组件名</th><th>语言</th><th>服务健康检查</th><th>暴露端口</th><th>Spring Cloud集成</th></tr></thead><tbody><tr><td>Eureka</td><td>Java</td><td>AP</td><td>可配支持</td><td>HTTP</td></tr><tr><td>Consul</td><td>Go</td><td>CP</td><td>支持</td><td>HTTP/DNS</td></tr><tr><td>Zookeeper</td><td>Java</td><td>CP</td><td>支持客户端</td><td>已集成</td></tr></tbody></table><blockquote><p>什么是CAP</p></blockquote><ul><li>C: Consistency（强一致性）</li><li>A: Availability（可用性）</li><li>P: Partition tolerance（分区容错性）</li></ul><p><strong>最多只能同时较好的满足两个</strong>。</p><p>AP理论的核心是：<strong>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求</strong>。</p><p>因此，根据CAP原理将NoSQL数据库分成了满足CA原则、满足CP原则和满足AP原则三大类:</p><ul><li>CA - 单点集群，满足—致性，可用性的系统，通常在可扩展性上不太强大。</li><li>CP - 满足一致性，分区容忍必的系统，通常性能不是特别高。</li><li>AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。</li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud(一) 微服务介绍与搭建</title>
      <link href="/post/5ce2f1a2.html"/>
      <url>/post/5ce2f1a2.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、什么是微服务"><a href="#1、什么是微服务" class="headerlink" title="1、什么是微服务"></a>1、什么是微服务</h1><p>微服务就是一种架构风格，通俗的讲微服务就是把一个项目拆分成独立的多个服务，并且多个服务是可以独立运行的，而每个服务都会占用线程。</p><blockquote><p>微服务的特点</p></blockquote><ul><li>微服务是一种架构风格</li><li>一个应用拆分为一组小型服务</li><li>每个服务运行在自己的进程内，也就是可独立部署和升级</li><li>服务之间使用轻量级HTTP交互</li><li>服务围绕业务功能拆分</li><li>可以由全自动部署机制独立部署</li><li>去中心化，服务自治。服务可以使用不同的语言、不同的存储技术</li></ul><blockquote><p>实现微服务依赖的技术</p></blockquote><ul><li>服务调用</li><li>服务降级</li><li>服务注册与发现</li><li>服务熔断</li><li>负载均衡</li><li>服务消息队列</li><li>服务网关</li><li>配置中心管理</li><li>自动化构建部署</li><li>服务监控</li><li>全链路追踪</li><li>服务定时任务</li><li>调度操作</li></ul><blockquote><p>SpringCloud</p></blockquote><p><strong>SpringCloud=分布式微服务架构的站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶</strong></p><p>SpringCloud俨然已成为微服务开发的主流技术栈，在国内开发者社区非常火爆。</p><p><strong>SpringCloud技术栈</strong></p><p><img src="https://images.hckun.cn/fa347f3da197c3df86bf5d36961c8cde.png" alt="fa347f3da197c3df86bf5d36961c8cde"></p><p><img src="https://images.hckun.cn/b39a21012bed11a837c1edff840e5024.png" alt="b39a21012bed11a837c1edff840e5024"></p><h1 id="2、SpringBoot和SpringCloud版本选择"><a href="#2、SpringBoot和SpringCloud版本选择" class="headerlink" title="2、SpringBoot和SpringCloud版本选择"></a>2、SpringBoot和SpringCloud版本选择</h1><p>本次学习将采用Spring Boot.2.2.2与Cloud - Hoxton.SR1</p><ul><li>Spring Boot 2.X 版</li><li>Spring Cloud H版</li><li>Spring Boot 与 Spring Cloud 兼容性查看</li></ul><p><img src="https://images.hckun.cn/image-20221215193208362.png" alt="image-20221215193208362"></p><ul><li>开发用到的组件版本<ul><li>Cloud - Hoxton.SR1</li><li>Boot - 2.2.2.RELEASE</li><li>Cloud Alibaba - 2.1.0.RELEASE</li><li>Java - Java 8</li><li>Maven - 3.5及以上</li><li>MySQL - 5.7及以上</li></ul></li></ul><h1 id="3、SpringCloud停更说明"><a href="#3、SpringCloud停更说明" class="headerlink" title="3、SpringCloud停更说明"></a>3、SpringCloud停更说明</h1><p>SpringCloud目前已有好多组件不在进行维护，取而代之的是别的一些开源组件</p><p>下图便是SpringCloud已停更组件及该组件的替代品</p><p><img src="https://images.hckun.cn/08851378-A9F8-4E1F-B6A0-9684931DFEF6-20221215193628519.png" alt="img"></p><h1 id="4、微服务搭建"><a href="#4、微服务搭建" class="headerlink" title="4、微服务搭建"></a>4、微服务搭建</h1><blockquote><p>父工程创建</p></blockquote><ul><li>New Project - maven工程 - create from archetype: maven-archetype-site</li><li>父工程名字</li><li>Maven选版本</li><li>工程名字</li></ul><p><img src="https://images.hckun.cn/image-20221215194636536.png" alt="image-20221215194636536"></p><blockquote><p>父工程pom文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里添加，注意不是jar或war --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>DependencyManagement和Dependencies的区别</p></blockquote><p>Maven使用<code>dependencyManagement</code>元素来提供了一种管理依赖版本号的方式。</p><p>通常会在一个组织或者项目的最顶层的父POM中看到<code>dependencyManagement</code>元素。</p><p>使用pom.xml中的<code>dependencyManagement</code>元素能让所有在子项目中引用这个依赖而不用显式的列出版本号。</p><p>Maven会沿着父子层次向上走，直到找到一个拥有<code>dependencyManagement</code>元素的项目，然后它就会使用这个<br><code>dependencyManagement</code>元素中指定的版本号。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysq1<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在子项目里就可以添加<code>mysql-connector</code>时可以不指定版本号，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysq1<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样做的好处就是：如果有多个子项目都引用同一样依赖，则可以避免在每个使用的子项目里都声明一个版本号，这样当想升级或切换到另一个版本时，只需要在顶层父容器里更新，而不需要一个一个子项目的修改；另外如果某个子项目需要另外的一个版本，只需要声明version就可。</p><p>注意事项：</p><blockquote><p><code>dependencyManagement</code>里只是声明依赖，<strong>并不实现引入</strong>，因此<strong>子项目需要显示的声明需要用的依赖</strong>。</p><p>如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项,并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom。</p><p>如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。</p></blockquote><h1 id="5、支付模块搭建【上】"><a href="#5、支付模块搭建【上】" class="headerlink" title="5、支付模块搭建【上】"></a>5、支付模块搭建【上】</h1><p>创建微服务模块基本步骤：创建Module==》改pom.xml==》写yml配置==》编写主启动类==》编写业务</p><p>下面我们创建两个服务：<code>微服务提供者8001 payment</code> <code>客户端消费者80 order</code> </p><p><img src="https://images.hckun.cn/image-20221215205613273.png" alt="image-20221215205613273"></p><p><strong>创建cloud-provider-payment8001微服务提供者支付Module模块</strong></p><blockquote><p>建名为cloud-provider-payment8001的Maven工程</p></blockquote><blockquote><p>修改pom.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--包含了sleuth+zipkin--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql-connector-java--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jdbc--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>编写yml配置文件</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span>  <span class="comment">#服务端口号</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span>   <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>            <span class="comment"># 当前数据源操作类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span>           <span class="comment"># mysql驱动包</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/my??serverTimezone=GMT%2B8&amp;characterEncoding=utf8&amp;useSSL=false&amp;allowMultiQueries=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span>       <span class="comment">#扫描mapper文件</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">org.example.entities</span>    <span class="comment"># 所有Entity别名类所在包</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Main.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6、支付模块搭建【下】"><a href="#6、支付模块搭建【下】" class="headerlink" title="6、支付模块搭建【下】"></a>6、支付模块搭建【下】</h1><blockquote><p>创建表<code>payment</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE my;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `payment` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `serial` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>实体类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Payment</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String serial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>统一返回结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(code, message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>DAO</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.example.entities.Payment;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">create</span><span class="params">(Payment payment)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Payment <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>MyBatis映射文件PaymentMapper.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.example.dao.PaymentDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;create&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Payment&quot;</span>&gt;</span></span><br><span class="line">        insert into payment(serial)</span><br><span class="line">        values (#&#123;serial&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;org.example.entities.Payment&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">property</span>=<span class="string">&quot;serial&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPaymentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from payment</span><br><span class="line">        where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Service</p></blockquote><p>接口PaymentService    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.example.entities.Payment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">create</span><span class="params">(Payment payment)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Payment <span class="title function_">getPaymentById</span><span class="params">( Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.example.dao.PaymentDao;</span><br><span class="line"><span class="keyword">import</span> org.example.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.example.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentDao paymentDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">create</span><span class="params">(Payment payment)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.create(payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Payment <span class="title function_">getPaymentById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.example.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> org.example.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.example.service.PaymentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/payment/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">create</span><span class="params">(Payment payment)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">&quot;*****插入结果：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result &gt; <span class="number">0</span> ? <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>, <span class="string">&quot;插入数据库成功&quot;</span> + result) : <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">201</span>, <span class="string">&quot;插入数据库失败: &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">Payment</span> <span class="variable">payment</span> <span class="operator">=</span> paymentService.getPaymentById(id);</span><br><span class="line">        <span class="keyword">return</span> payment != <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>, <span class="string">&quot;查询成功&quot;</span> + payment) : <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">201</span>, <span class="string">&quot;没有对应记录,查询ID: &quot;</span> + id, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>Apifox - <a href="http://localhost:8001/payment/create?serial=hello">http://localhost:8001/payment/create?serial=hello</a></p><p><img src="https://images.hckun.cn/image-20221215220714359.png" alt="image-20221215220714359"></p><p>浏览器 - <a href="http://localhost:8001/payment/get/1">http://localhost:8001/payment/get/1</a></p><p><img src="https://images.hckun.cn/image-20221215220734539.png" alt="image-20221215220734539"></p><h1 id="7、消费者订单模块"><a href="#7、消费者订单模块" class="headerlink" title="7、消费者订单模块"></a>7、消费者订单模块</h1><blockquote><p>创建建消费者Module</p></blockquote><p>创建名为cloud-consumer-order80的maven工程</p><blockquote><p>修改pom</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>配置文件</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><blockquote><p>主启动类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        SpringApplication.run(Main.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实体类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(code, message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Payment</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String serial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.example.entities.CommonResult;</span><br><span class="line"><span class="keyword">import</span> org.example.entities.Payment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAYMENT_URL</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">create</span><span class="params">(Payment payment)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL + <span class="string">&quot;/payment/create&quot;</span>, payment, CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title function_">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationContextConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">getRestTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试</p></blockquote><p>运行<code>cloud-consumer-order80</code>与<code>cloud-provider-payment8001</code>两工程</p><p>浏览器 - <a href="http://localhost/consumer/payment/get/1">http://localhost/consumer/payment/get/1</a></p><p><img src="https://images.hckun.cn/image-20221215221001784.png" alt="image-20221215221001784"></p><blockquote><p><a href="https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html">RestTemplate</a></p></blockquote><p>RestTemplate提供了多种便捷访问远程Http服务的方法，是一种简单便捷的访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具集</p><p>使用restTemplate访问restful接口非常的简单,<code>(url, requestMap, ResponseBean.class)</code>这三个参数分别代表REST请求地址、请求参数、HTTP响应转换被转换成的对象类型</p><p>浏览器 - <a href="http://localhost/consumer/payment/create?serial=hello">http://localhost/consumer/payment/create?serial=hello</a></p><p>虽然，返回成功，但是观测数据库中，并没有创建<code>serial</code>为<code>hello</code>的行。</p><p>解决之道：在loud-provider-payment8001工程的<code>PaymentController</code>中添加<code>@RequestBody</code>注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/payment/create&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> CommonResult <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> paymentService.create(payment);</span><br><span class="line">       log.info(<span class="string">&quot;*****插入结果：&quot;</span> + result);</span><br><span class="line">       <span class="keyword">return</span> result &gt; <span class="number">0</span> ? <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">200</span>, <span class="string">&quot;插入数据库成功&quot;</span> + result) : <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="number">201</span>, <span class="string">&quot;插入数据库失败: &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="8、工程重构"><a href="#8、工程重构" class="headerlink" title="8、工程重构"></a>8、工程重构</h1><p>观察<code>cloud-consumer-order80</code>与<code>cloud-provider-payment8001</code>两工程有重复代码（entities包下的实体类）我们需要对实体类进行重构。</p><blockquote><p>新建 - cloud-api-commons模块</p></blockquote><blockquote><p>修改pom</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clooud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将<code>cloud-consumer-order80</code>与<code>cloud-provider-payment8001</code>两工程的公有<code>entities</code>包移至<code>cloud-api-commons</code>工程下。</p><p>执行<code>maven clean、install</code> cloud-api-commons工程，以供给<code>cloud-consumer-order80</code>与<code>cloud-provider-payment8001</code>两工程调用。</p><p><img src="https://images.hckun.cn/image-20221215221235520.png" alt="image-20221215221235520"></p><blockquote><p>订单80和支付8001服务分别改造</p></blockquote><ul><li><p>将<code>cloud-consumer-order80</code>与<code>cloud-provider-payment8001</code>两工程的公有<code>entities</code>包移除</p></li><li><p>引入<code>cloud-api-commons</code>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>测试</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker(基础篇)</title>
      <link href="/post/9e7ac5cf.html"/>
      <url>/post/9e7ac5cf.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、Docker概述"><a href="#1、Docker概述" class="headerlink" title="1、Docker概述"></a>1、Docker概述</h1><h2 id="1-1、Docker简介"><a href="#1-1、Docker简介" class="headerlink" title="1.1、Docker简介"></a>1.1、Docker简介</h2><p>Docker是基于Go语言实现的云开源项目。</p><p>Docker的主要目标是：<code>Build, Ship and Run Any App, Anywhere</code>，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP及其运行环境能做到<strong>一次镜像,处处运行。</strong></p><h2 id="1-2、传统虚拟机和容器"><a href="#1-2、传统虚拟机和容器" class="headerlink" title="1.2、传统虚拟机和容器"></a>1.2、传统虚拟机和容器</h2><blockquote><p>传统虚拟机</p></blockquote><p>传统虚拟机技术基于安装在主操作系统上的虚拟机管理系统（如VirtualBox、VMware等），创建虚拟机（虚拟出各种硬件），在虚拟机上安装从操作系统，在从操作系统中安装部署各种应用。</p><p>缺点：资源占用多、冗余步骤多、启动慢。</p><blockquote><p>Linux容器</p></blockquote><p>Linux容器是与系统其他部分分隔开的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。</p><p>Linux容器不是模拟一个完整的操作系统，而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一的运行。</p><p><img src="https://images.hckun.cn/virtual-machine-vs-docker-container.jpeg" alt="virtual-machine-vs-docker-container"></p><blockquote><p>对比</p></blockquote><table><thead><tr><th>特性</th><th>容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动</td><td>秒级</td><td>分钟级</td></tr><tr><td>大小</td><td>一般为Mb</td><td>一般为Gb</td></tr><tr><td>速度</td><td>接近原生</td><td>比较慢</td></tr><tr><td>系统支持数量</td><td>单机支持上千个容器</td><td>一般几十个</td></tr></tbody></table><h2 id="1-3、Docker运行速度快的原因"><a href="#1-3、Docker运行速度快的原因" class="headerlink" title="1.3、Docker运行速度快的原因"></a>1.3、Docker运行速度快的原因</h2><blockquote><p>Docker有比虚拟机更少的抽象层</p></blockquote><p>由于Docker不需要Hypervisor（虚拟机）实现硬件资源虚拟化，运行在Docker容器上的程序直接使用的都是实际物理机的硬件资源，因此在CPU、内存利用率上docker有明显优势。</p><p>Docker利用的是宿主机的内核，而不需要加载操作系统OS内核：</p><p>当新建一个容器时，Docker不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核返回等比较耗时耗资源的过程。当新建一个虚拟机时，虚拟机软件需要加载OS，返回新建过程是分钟级别的。而Docker由于直接利用宿主机的操作系统，则省略了返回过程，因此新建一个docker容器只需要几秒钟</p><p>Docker容器的本质就是一个进程。</p><h2 id="1-4、Docker软件"><a href="#1-4、Docker软件" class="headerlink" title="1.4、Docker软件"></a>1.4、Docker软件</h2><p>Docker并非一个通用的容器工具，它依赖于已经存在并运行的Linux内核环境。（在Windows上安装Docker时需要依赖WLS，也即Windows下的Linux子系统）。</p><p>Docker实质上是在已经运行的Linux下制造了一个隔离的文件环境，因此它执行的效率几乎等同于所部署的Linux主机。</p><h2 id="1-5、Docker的基本组成"><a href="#1-5、Docker的基本组成" class="headerlink" title="1.5、Docker的基本组成"></a>1.5、Docker的基本组成</h2><p>Docker的基本组成部分<code>镜像(image)</code>、<code>容器(contailer)</code>、<code>仓库(repository)</code></p><blockquote><p>Docker镜像</p></blockquote><p>Docker镜像就是一个只读的模板。镜像可以用来创建Docker容器，一个镜像可以创建多个容器。</p><blockquote><p>Docker容器</p></blockquote><p>Docker利用容器独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境，容器是用镜像创建的运行实例。</p><blockquote><p>Docker仓库</p></blockquote><p>Docker仓库是集中存放镜像文件的场所。</p><p>仓库分为公开仓库和私有仓库两种。</p><p>最大的公开仓库是Docker官方的Docker Hub：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h1 id="2、Docker安装与卸载"><a href="#2、Docker安装与卸载" class="headerlink" title="2、Docker安装与卸载"></a>2、Docker安装与卸载</h1><p>前提条件</p><p>查看CentOS的版本<code>cat /etc/redhat-release</code>确保是7以上的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Desktop]# cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.2.1511 (Core)</span><br></pre></td></tr></table></figure><blockquote><p>卸载旧版本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><blockquote><p>yum安装gcc相关环境</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><blockquote><p>安装需要的软件包</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><blockquote><p>设置stable镜像仓库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><blockquote><p>更新yum软件包索引</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><blockquote><p>安装DOCKER CE</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><blockquote><p>启动docker</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><blockquote><p>查看docker版本信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><blockquote><p>运行hello-world</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><blockquote><p>卸载docker</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure><h1 id="3、阿里云镜像加速"><a href="#3、阿里云镜像加速" class="headerlink" title="3、阿里云镜像加速"></a>3、阿里云镜像加速</h1><p>注册一个属于自己的阿里云账户(可复用淘宝账号)<a href="https://promotion.aliyun.com/ntms/act/kubernetes.html">https://promotion.aliyun.com/ntms/act/kubernetes.html</a></p><blockquote><p>获得加速器地址连接</p></blockquote><p>登陆阿里云开发者平台、点击控制台、选择容器镜像服务</p><p><img src="https://images.hckun.cn/image-20221204151313023.png" alt="image-20221204151313023"></p><p>获取加速器地址</p><p><img src="https://images.hckun.cn/image-20221204151442605.png" alt="image-20221204151442605"></p><p>粘贴脚本直接执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> mkdir -p /etc/docker</span><br><span class="line"> tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://lexy2.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="4、Docker帮助启动类命令"><a href="#4、Docker帮助启动类命令" class="headerlink" title="4、Docker帮助启动类命令"></a>4、Docker帮助启动类命令</h1><blockquote><p>启动docker</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><blockquote><p>停止docker</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><blockquote><p>重启docker</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><blockquote><p>查看docker状态</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><blockquote><p>开机启动</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><blockquote><p>查看docker概要信息    </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><blockquote><p>查看docker总体帮助文档</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --help</span><br></pre></td></tr></table></figure><blockquote><p>查看docker命令帮助文档</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker 具体命令 --help</span><br></pre></td></tr></table></figure><h1 id="5、Docker镜像命令"><a href="#5、Docker镜像命令" class="headerlink" title="5、Docker镜像命令"></a>5、Docker镜像命令</h1><blockquote><p>列出本地主机上的镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">参数</span><br><span class="line">-a 列出所有镜像（含历史镜像）</span><br><span class="line">-q 只显示镜像ID</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221204171725104.png" alt="image-20221204171725104"></p><p><code>REPOSITORY</code>:表示镜像的仓库源</p><p><code>TAG</code>:镜像的标签版本号</p><p><code>IMAGE ID</code>:镜像ID</p><p><code>CREATED</code>:镜像创建时间</p><p><code>SIZE</code>:镜像大小</p><p>同一仓库源可以有多个 TAG版本，代表这个仓库源的不同个版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</p><p>如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest(最新) 镜像</p><blockquote><p>在远程仓库中搜索镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名称</span><br><span class="line">参数</span><br><span class="line">--limit : 只列出N个镜像，默认25个</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221204172638421.png" alt="image-20221204172638421"></p><p><code>NAME</code>:镜像名称</p><p><code>DESCRIPTION</code>:镜像说明</p><p><code>STARS</code>:点赞数量</p><p><code>OFFICIAL</code>：是否是官方的</p><p><code>AUTOMATED</code>:是否是自动构建的</p><blockquote><p>下载镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 某个XXX镜像名字</span><br></pre></td></tr></table></figure><p>不加 tag 时，默认下载最新的镜像（即tag为<code>latest</code>）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis     #不指定版本，默认下载最新版</span><br><span class="line">docker pull redis:6.0.8    #指定版本</span><br></pre></td></tr></table></figure><blockquote><p>查看镜像/容器/数据卷所占的空间</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system df</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221204173537469-20221204173541796.png" alt="image-20221204173537469"></p><blockquote><p>删除镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">删除单个: docker rmi  -f 镜像ID</span><br><span class="line">删除多个:docker rmi -f 镜像名1:TAG 镜像名2:TAG</span><br><span class="line">删除全部:docker rmi -f $(docker images -qa)</span><br></pre></td></tr></table></figure><p><code>-f</code>为强制删除，默认可不加，如果删除报错，即可加上-f</p><h1 id="6、Docker容器命令"><a href="#6、Docker容器命令" class="headerlink" title="6、Docker容器命令"></a>6、Docker容器命令</h1><blockquote><p>新建启动容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><p>OPTION参数说明：</p><p><code>--name=&quot;容器新名字&quot;</code>:为容器指定一个名称</p><p><code>-d</code>:后台运行容器并返回容器ID，也即启动守护式容器(后台运行)</p><p><code>-i</code>:以交互模式运行容器，通常与 -t 同时使用</p><p><code>-t</code>:为容器重新分配一个伪输入终端，通常与 -i 同时使用,也即启动交互式容器</p><p><code>-P</code>:随机端口映射</p><p><code>-p</code>:指定端口映射</p><p><code>-p</code>指定端口映射的几种不同形式</p><table><thead><tr><th>参数</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>-p hostPort:containerPort</td><td>端口映射</td><td>-p 8080:80</td></tr><tr><td>-p ip:hostPort:containerPort</td><td>配置监听地址</td><td>-p 10.0.0.1:8080:80</td></tr><tr><td>-p ip::containerPort</td><td>随机分配端口</td><td>-p 10.0.0.1::80</td></tr><tr><td>-p hostPort1:containerPort1 -p hostPort2:containerPort2</td><td>指定多个端口映射</td><td>-p 8080:80 -p 8888:3306</td></tr></tbody></table><p><strong>启动交互式容器</strong></p><p>以交互方式启动ubuntu镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu #拉取ubuntu镜像</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-i 交互模式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-t 分配一个伪输入终端<span class="built_in">tty</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ubuntu 镜像名称</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/bin/bash（或者bash） shell交互的接口</span></span><br><span class="line">docker run -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>退出交互模式：</p><p>方式一</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在交互shell中<span class="built_in">exit</span>即可退回宿主机</span></span><br><span class="line">exit; #退出后，容器会停止；</span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用快捷键ctrl + P + Q #退出后容器依然正在运行</span><br></pre></td></tr></table></figure><p><strong>启动守护式容器</strong></p><p>大部分情况下，我们系统docker容器服务时在后台运行的，可以通过<code>-d</code>指定容器的后台运行模式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d 容器名</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d ubuntu</span><br></pre></td></tr></table></figure><p>如果使用<code>docker run -d ubuntu</code>尝试启动守护式的ubuntu，会发现容器启动后就自动退出了。</p><blockquote><p>列出正在运行的容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps [OPTIONS]</span><br></pre></td></tr></table></figure><p>OPTIONS：参数说明</p><p><code>-a</code>:列出当前所有正在运行的容器+历史上运行过的</p><p><code>-l</code>:显示最近创建的容器</p><p><code>-n</code>:显示最近n个创建的容器</p><p><code>-q</code>:静默模式，只显示容器编号</p><blockquote><p>退出容器</p></blockquote><p>方式一</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在交互shell中<span class="built_in">exit</span>即可退回宿主机</span></span><br><span class="line">exit; #退出后，容器会停止；</span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用快捷键ctrl + P + Q #退出后容器依然正在运行</span><br></pre></td></tr></table></figure><blockquote><p>启动已停止运行的容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器ID或者容器名</span><br></pre></td></tr></table></figure><blockquote><p>重启容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart 容器ID或者容器名</span><br></pre></td></tr></table></figure><blockquote><p>停止容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器ID或者容器名</span><br></pre></td></tr></table></figure><blockquote><p>强制停止容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker kill 容器ID或者容器名</span><br></pre></td></tr></table></figure><blockquote><p>删除容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器ID或者容器名</span><br><span class="line">docker rm -f 容器ID或者容器名   #强制删除容器</span><br></pre></td></tr></table></figure><p><strong>有镜像才能创建容器，下面以Redis6.0.8镜像演示以下镜像命令</strong></p><p>下载Redis6.0.8镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:6.0.8</span><br></pre></td></tr></table></figure><p>在大部分的场景下，我们希望 docker 的服务是在后台运行的， 我们可以过 <code>-d</code> 指定容器的后台运行模式</p><blockquote><p>启动守护式容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d redis:6.0.8</span><br></pre></td></tr></table></figure><blockquote><p>查看容器日志</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs 容器ID</span><br></pre></td></tr></table></figure><blockquote><p>查看容器内运行的进程</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器ID</span><br></pre></td></tr></table></figure><blockquote><p>查看容器内部细节</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器ID</span><br></pre></td></tr></table></figure><blockquote><p>进入正在运行的容器并以命令行交互</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器ID bashShell</span><br><span class="line">docker exec -it 5955c18101d8  /bin/bash #进入redis容器</span><br></pre></td></tr></table></figure><blockquote><p>从容器内拷贝文件到主机上</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp  容器ID:容器内路径 目的主机路径</span><br><span class="line">docker cp 12811980d2eb:/1.txt /opt #将容器中1.txt 拷贝到宿主机的opt下</span><br></pre></td></tr></table></figure><blockquote><p>从主机上拷贝文件到容器内</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp 主机文件路径 容器ID:容器内路径</span><br><span class="line">docker cp  /opt/2.txt 12811980d2eb:/usr  #将主机/opt/2.txt 拷贝到容器内的/usr下</span><br></pre></td></tr></table></figure><blockquote><p>导出容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">export</span> 导出容器的内容留作为一个tar归档文件</span></span><br><span class="line">docker export 容器ID &gt; 文件名.tar</span><br><span class="line">docker export 12811980d2eb &gt; a.tar</span><br></pre></td></tr></table></figure><blockquote><p>导入容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat 文件名.tar | docker import - 镜像用户/镜像名:镜像版本号</span><br><span class="line">cat a.tar | docker import - hck/ubuntu:1.0</span><br></pre></td></tr></table></figure><h1 id="7、Docker镜像"><a href="#7、Docker镜像" class="headerlink" title="7、Docker镜像"></a>7、Docker镜像</h1><p>镜像是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好行程一个可交付的运行环境（包括代码、运行时需要的库、环境变量和配置文件等），这个打包好的运行环境就是image镜像文件。</p><blockquote><p>Docker 镜像加载原理</p></blockquote><p><strong>联合文件系统</strong></p><p>Docker 中的文件存储驱动叫做 storage driver。</p><p>Docker 最早支持的stotage driver是 AUFS，它实际上由一层一层的文件系统组成，这种层级的文件系统叫UnionFS。</p><p>联合文件系统（UnionFS）：Union 文件系统，是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下（unite serveral directories into a single virtual filesystem）。</p><p>Union文件系统是Docker镜像的基础。镜像可以通过分层来进行集成，基于基础镜像可以制作具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><p>后来出现的docker版本中，除了AUFS，还支持OverlayFS、Btrfs、Device Mapper、VFS、ZFS等storage driver。</p><p><strong>bootfs和rootfs</strong></p><p>bootfs（boot file system）主要包含 bootloader 和 kernel，bootloader主要是引导加载 kernel，Linux刚启动时会加载bootfs文件系统。</p><p>在Docker镜像的最底层是引导文件系统bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已经由 bootfs 转交给内核，此时系统也会卸载 bootfs。</p><p>rootfs（root file system），在bootfs之上，包含的就是典型Linux系统中的 <code>/dev</code>、<code>/proc</code>、<code>/bin</code>、<code>/etc</code>等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu、CentOS等。</p><blockquote><p>docker镜像底层层次：</p></blockquote><p><img src="https://images.hckun.cn/layer01.jpeg" alt="layer01"></p><p>对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接使用Host的Kernel，自己只需要提供rootfs就可以。所以，对于不同的Linux发行版，bootfs基本是一致的，rootfs会有差别，不同的发行版可以共用bootfs。</p><p>有差别的rootfs：</p><p><img src="https://images.hckun.cn/layer02.jpeg" alt="layer02"></p><blockquote><p>镜像分层</p></blockquote><p>Docker支持扩展现有镜像，创建新的镜像。新镜像是从base镜像一层一层叠加生成的。</p><p>举例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Version: 0.0.1</span></span><br><span class="line">FROM debian  # 直接在debain base镜像上构建</span><br><span class="line">MAINTAINER mylinux</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y emacs # 安装emacs</span><br><span class="line">RUN apt-get install -y apache2 # 安装apache2</span><br><span class="line">CMD [&quot;/bin/bash&quot;] # 容器启动时运行bash</span><br></pre></td></tr></table></figure><p>镜像创建过程：</p><p><img src="https://images.hckun.cn/layer03.png" alt="layer03"></p><blockquote><p>镜像分层的优势</p></blockquote><p>镜像分层的一个最大好处就是共享资源，方便复制迁移，方便复用。</p><blockquote><p>容器层</p></blockquote><p>当容器启动时，一个新的<strong>可写层</strong>将被加载到镜像的顶部，这一层通常被称为<code>容器层</code>，容器层之下的都叫<code>镜像层</code>。</p><p>所有对容器的改动，无论添加、删除、还是修改文件都只会发生在容器层中。</p><p>只有容器层是可写的，容器层下面的所有镜像层都是只读的。</p><p><img src="https://images.hckun.cn/layer04.jpeg" alt="layer04"></p><blockquote><p>Docker镜像commit操作实例</p></blockquote><p> docker commit提交容器副本使之成为一个新的镜像。</p><p>commit基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 要创建的目标镜像名:[标签名]</span><br></pre></td></tr></table></figure><p>以ubuntu容器安装vim为例：</p><p>原始的默认Ubuntu镜像是不带着vim命令的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-15-centos ~]# docker run -it ubuntu /bin/bash</span><br><span class="line">root@9c5ae410011d:/# ls </span><br><span class="line">bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">root@9c5ae410011d:/# vim</span><br><span class="line">bash: vim: command not found</span><br></pre></td></tr></table></figure><p>执行以下命令安装vim：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update#更新包管理管理工具</span><br><span class="line">apt-get install vim #安装vim</span><br></pre></td></tr></table></figure><p>安装完成后，commit我们自己的新镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m=&#x27;add vim&#x27; -a=&#x27;hck&#x27;  fca21bd7a5d1 vimubuntu:latest</span><br></pre></td></tr></table></figure><p>执行成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-15-centos ~]# docker commit -m=&#x27;add vim&#x27; -a=&#x27;hck&#x27;  fca21bd7a5d1 vimubuntu:latest</span><br><span class="line">sha256:cdae8967769b71f4307507690a94c735bd2f96aea89b52bf0bed58a749ffe8f7</span><br><span class="line">[root@VM-4-15-centos ~]# </span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221208194458625.png" alt="image-20221208194458625"></p><p>启动我们的新镜像并和原来的对比，发现新镜像中已经包含vim</p><h1 id="8、本地镜像发布到阿里云"><a href="#8、本地镜像发布到阿里云" class="headerlink" title="8、本地镜像发布到阿里云"></a>8、本地镜像发布到阿里云</h1><blockquote><p>本地镜像发布到阿里云流程</p></blockquote><p><img src="https://images.hckun.cn/image-20221208194848755.png" alt="image-20221208194848755"></p><blockquote><p>将本地镜像推送到阿里云</p></blockquote><p>就以我们刚才commit的新镜像推送到阿里云为例</p><p>登录<code>阿里云开发者平台</code>创建<code>仓库镜像</code></p><p><img src="https://images.hckun.cn/image-20221208195625032.png" alt="image-20221208195625032"></p><p><img src="https://images.hckun.cn/image-20221208195657994.png" alt="image-20221208195657994"></p><p><img src="https://images.hckun.cn/image-20221208195826666.png" alt="image-20221208195826666"></p><blockquote><p>将镜像推送到Registry</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker login --username=故事给风听kun registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/hckimages/hckimages:[镜像版本号]</span><br><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/hckimages/hckimages:[镜像版本号]</span><br></pre></td></tr></table></figure><p>执行完毕后就会向阿里云推送我们自己的镜像</p><p><img src="https://images.hckun.cn/image-20221208200242401.png" alt="image-20221208200242401"></p><p><img src="https://images.hckun.cn/image-20221208200516332.png" alt="image-20221208200516332"></p><blockquote><p>将阿里云上的镜像下载到本地</p></blockquote><p>执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/hckimages/hckimages:[镜像版本号]</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221208200605953.png" alt="image-20221208200605953"></p><p>成功的拉取到了我们刚刚上传的镜像。</p><p>当然我们也可以搭建私有仓库， Docker Registry是官方提供的工具，可以用于构建私有镜像仓库，这里不在演示，感兴趣的朋友可以自行百度。</p><h1 id="9、Docker容器数据卷"><a href="#9、Docker容器数据卷" class="headerlink" title="9、Docker容器数据卷"></a>9、Docker容器数据卷</h1><blockquote><p>Docker容器数据卷是什么</p></blockquote><p>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性：</p><p>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，<font color="red">因此Docker不会在容器删除时删除其挂载的数据卷</font></p><p>一句话：有点类似我们Redis里面的rdb和aof文件。</p><p>将docker容器内的数据保存进宿主机的磁盘中，运行一个带有容器卷存储功能的容器实例。</p><p>基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录 镜像名</span><br></pre></td></tr></table></figure><blockquote><p>Docker容器数据卷有什么用</p></blockquote><p>将运用与运行的环境打包镜像，run后形成容器实例运行 ，但是我们对数据的要求希望是持久化的。</p><p>Docker容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。为了能保存数据在docker中我们使用卷。</p><p>特点：</p><ul><li><strong>数据卷可在容器之间共享或重用数据</strong></li><li><strong>卷中的更改可以直接实时生效</strong></li><li><strong>数据卷中的更改不会包含在镜像的更新中</strong></li><li><strong>数据卷的生命周期一直持续到没有容器使用它为止</strong></li></ul><blockquote><p>宿主vs容器之间映射添加容器卷</p></blockquote><p>将我们的ubuntu容器进行映射启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name myubuntu --privileged=true -v /tmp/myHostData:/tmp/myDockerData ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>当路径不存在时会自动创建</p><p><img src="https://images.hckun.cn/image-20221210210548729.png" alt="image-20221210210548729"></p><p><img src="https://images.hckun.cn/image-20221210210621100.png" alt="image-20221210210621100">查看数据卷是否挂载成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect myubuntu</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221210210749365.png" alt="image-20221210210749365">容器和宿主机之间数据共享</p><ul><li>docker修改，主机同步获得</li><li>主机修改，docker同步获得</li><li>docker容器stop，主机修改，docker容器重启后仍能获得</li></ul><blockquote><p>读写规则映射添加</p></blockquote><p><strong>读写(默认)</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录:rw 镜像名</span><br></pre></td></tr></table></figure><p><strong>只读</strong></p><p>容器实例内部被限制，只能读取不能写。</p><p>此时如果宿主机写入内容，可以同步给容器内，容器可以读取到，但是容器不能写。</p><p>基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录:ro 镜像名</span><br></pre></td></tr></table></figure><p>启动只读ubuntu</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name myubuntu --privileged=true -v /tmp/myHostData:/tmp/myDockerData:ro ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>尝试在容器内写入</p><p><img src="https://images.hckun.cn/image-20221210211533471.png" alt="image-20221210211533471"></p><blockquote><p>卷的继承和共享</p></blockquote><p>容器1完成和宿主机的映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it  --privileged=true -v /mydocker/u:/tmp --name u1 ubuntu</span><br></pre></td></tr></table></figure><p>容器2继承容器1的卷规则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it  --privileged=true --volumes-from 父类  --name u2 ubuntu</span><br></pre></td></tr></table></figure><h1 id="10、Docker安装Tomcat8-5"><a href="#10、Docker安装Tomcat8-5" class="headerlink" title="10、Docker安装Tomcat8.5"></a>10、Docker安装Tomcat8.5</h1><blockquote><p>拉取Tomcat</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat:8.5.82</span><br></pre></td></tr></table></figure><blockquote><p>查看拉取的镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221210213127263.png" alt="image-20221210213127263"></p><blockquote><p>启动Tomcat容器</p></blockquote><p>先创建一个tomcat-backup容器（记得两个容器不一样），这个tomca-backup目的是为了复制它自己conf,logs,webapps下的内容到宿主机的挂载目录，然后把这个目录挂载给tomcat-test，不然下面挂载tomcat-test的时候无法启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name tomcat-backup -p 8080:8080 -d tomcat:8.5.82</span><br></pre></td></tr></table></figure><blockquote><p>复制目录到宿主机 </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp tomcat-backup:/usr/local/tomcat/conf /opt/tomcat/</span><br><span class="line">docker cp tomcat-backup:/usr/local/tomcat/logs /opt/tomcat/</span><br><span class="line">docker cp tomcat-backup:/usr/local/tomcat/webapps /opt/tomcat/</span><br></pre></td></tr></table></figure><blockquote><p>停止tomcat容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop tomcat-backup</span><br></pre></td></tr></table></figure><blockquote><p>移除tomcat容器</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f tomcat-backup</span><br></pre></td></tr></table></figure><blockquote><p>创建第二个容器、并挂载到宿主机</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name tomcat-test -p 8080:8080 --privileged=true --restart always -v /opt/tomcat/webapps/:/usr/local/tomcat/webapps -v /opt/tomcat/logs/:/usr/local/tomcat/logs tomcat:8.5.82</span><br></pre></td></tr></table></figure><p>访问8080发现404</p><p><img src="https://images.hckun.cn/image-20221210221114190.png" alt="image-20221210221114190"></p><p>我们去宿主机挂载目录中查看webaaps，发现为空</p><p><img src="https://images.hckun.cn/image-20221210221223912.png" alt="image-20221210221223912"></p><p>进入tomcat容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it tomcat-test /bin/bash</span><br></pre></td></tr></table></figure><p>将webaaps.dist目录中的所有东西复制到webapps中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv webapps.dist/* webapps</span><br></pre></td></tr></table></figure><p>重启容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart tomcat-test</span><br></pre></td></tr></table></figure><p>访问成功</p><p><img src="https://images.hckun.cn/image-20221210221559986.png" alt="image-20221210221559986"></p><h1 id="11、Docker安装MySQL5-7-单机"><a href="#11、Docker安装MySQL5-7-单机" class="headerlink" title="11、Docker安装MySQL5.7(单机)"></a>11、Docker安装MySQL5.7(单机)</h1><blockquote><p>拉取MySQL5.7镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><blockquote><p>启动MySQL容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要使用 -e 配置环境变量 MYSQL_ROOT_PASSWORD（mysql root用户的密码）</span></span><br><span class="line">docker run -p 3306:3006 -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7</span><br></pre></td></tr></table></figure><p>这样启动MySQL容器会存在以下问题：</p><ul><li>中文乱码(向表中插入数据含有中文时)</li><li>没有容器卷映射</li></ul><p>启动docker容器后，可以正常的连接、创建数据库，创建表，插入数据。但是插入中文则会报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it a590d3269c0a /bin/bash #进入MySQL容器</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221208202053921.png" alt="image-20221208202053921"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建db01数据库</span></span><br><span class="line"><span class="keyword">create</span> database db01;</span><br><span class="line"><span class="comment">-- 切换到db01;</span></span><br><span class="line">use db01;</span><br><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1(id <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入英文可以正常插入</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入中文报错</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span>(<span class="number">2</span>, <span class="string">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这是因为docker默认的字符集的问题，可以在mysql中使用以下命令查看数据库字符集：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;character%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221208202253112.png" alt="image-20221208202253112"></p><p>返回的字符集中，<code>character_set_database</code>、<code>character_set_server</code>等都为<code>latin1</code>字符集，所以会报错。</p><p><font color='red'> 注意：因为启动容器时没有配置容器卷映射，当容器意外被删时，数据无法找回。</font></p><p>实际应用中我们都是要配置容器卷映射的,下面将进行演示</p><blockquote><p>启动 Mysql 容器，并配置容器卷映射</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 \</span><br><span class="line">           --privileged=true \</span><br><span class="line">           -v /app/mysql/log:/var/log/mysql \</span><br><span class="line">           -v /app/mysql/data:/var/lib/mysql \</span><br><span class="line">           -v /app/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">           -e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">           --name mysql \</span><br><span class="line">           mysql:5.7</span><br></pre></td></tr></table></figure><p>在<code>/app/mysql/conf</code>下新建 <code>my.cnf</code>，通过容器卷同步给mysql实例，解决中文乱码问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default_character_set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">collation_server = utf8_general_ci</span><br><span class="line">character_set_server = utf8</span><br></pre></td></tr></table></figure><p>重启mysql容器，使得容器重新加载配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure><p>此时便解决了中文乱码（中文插入报错）问题。</p><blockquote><p>而且因为启动时将容器做了容器卷映射，将mysql的配置（映射到<code>/app/mysql/conf</code>）、数据（映射到<code>/app/mysql/data</code>）、日志（映射到<code>/app/mysql/log</code>）都映射到了宿主机实际目录，所以即使删除了容器，也不会产生太大影响。只需要再执行一下启动Mysql容器命令，容器卷还按相同位置进行映射，所有的数据便都可以正常恢复。</p></blockquote><h1 id="12、Docker安装MySQL5-7-主从复制"><a href="#12、Docker安装MySQL5-7-主从复制" class="headerlink" title="12、Docker安装MySQL5.7(主从复制)"></a>12、Docker安装MySQL5.7(主从复制)</h1><blockquote><p>安装主服务器容器实例(端口3307)</p></blockquote><p>启动容器实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3307:3306 \</span><br><span class="line">           --name mysql-master \</span><br><span class="line">           --privileged=true \</span><br><span class="line">           -v /app/mysql-master/log:/var/log/mysql \</span><br><span class="line">           -v /app/mysql-master/data:/var/lib/mysql \</span><br><span class="line">           -v /app/mysql-master/conf:/etc/mysql/conf.d \</span><br><span class="line">           -e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">           -d mysql:5.7</span><br></pre></td></tr></table></figure><p>进入<code>/app/mysql-master/conf</code>，新建<code>my.cnf</code>配置文件： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置server_id, 同一个局域网中需要唯一</span></span></span><br><span class="line">server_id=101</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 指定不需要同步的数据库名称</span></span></span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 开启二进制日志功能</span></span></span><br><span class="line">log-bin=mall-mysql-bin</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置二进制日志使用内存大小（事务）</span></span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置使用的二进制日志格式（mixed,statement,row）</span></span></span><br><span class="line">binlog_format=mixed</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 二进制日志过期清理时间。默认值为0，表示不自动清理</span></span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span></span><br><span class="line">slave_skip_errors=1062</span><br></pre></td></tr></table></figure><p>重启容器实例 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql-master</span><br></pre></td></tr></table></figure><p>进入容器实例内 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql-master /bin/bash</span><br></pre></td></tr></table></figure><p>登录mysql，创建数据同步用户 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 首先使用 mysql -uroot -p 登录mysql</span></span><br><span class="line"><span class="comment">-- 创建数据同步用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;slave&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment">-- 授权</span></span><br><span class="line"><span class="keyword">grant</span> replication slave, replication client <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><blockquote><p>安装从服务器容器实例(端口3308)</p></blockquote><p>启动容器服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3308:3306 \</span><br><span class="line">           --name mysql-slave \</span><br><span class="line">           --privileged=true \</span><br><span class="line">           -v /app/mysql-slave/log:/var/log/mysql \</span><br><span class="line">           -v /app/mysql-slave/data:/var/lib/mysql \</span><br><span class="line">           -v /app/mysql-slave/conf:/etc/mysql/conf.d  \</span><br><span class="line">           -e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">           -d mysql:5.7</span><br></pre></td></tr></table></figure><p>进入<code>/app/mysql-slave/conf</code>目录，创建<code>my.cnf</code>配置文件： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置server_id, 同一个局域网内需要唯一</span></span></span><br><span class="line">server_id=102</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 指定不需要同步的数据库名称</span></span></span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 开启二进制日志功能，以备slave作为其它数据库实例的Master时使用</span></span></span><br><span class="line">log-bin=mall-mysql-slave1-bin</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置二进制日志使用内存大小（事务）</span></span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置使用的二进制日志格式（mixed,statement,row）</span></span></span><br><span class="line">binlog_format=mixed</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 二进制日志过期清理时间。默认值为0，表示不自动清理</span></span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 如：1062错误是指一些主键重复，1032是因为主从数据库数据不一致</span></span></span><br><span class="line">slave_skip_errors=1062</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># relay_log配置中继日志</span></span></span><br><span class="line">relay_log=mall-mysql-relay-bin</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># log_slave_updates表示slave将复制事件写进自己的二进制日志</span></span></span><br><span class="line">log_slave_updates=1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># slave设置只读（具有super权限的用户除外）</span></span></span><br><span class="line">read_only=1</span><br></pre></td></tr></table></figure><p>重启slave容器实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql-slave</span><br></pre></td></tr></table></figure><blockquote><p>在主数据库中查看主从同步状态</p></blockquote><p>进入主数据库容器： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql-master /bin/bash</span><br></pre></td></tr></table></figure><p>查看主从同步状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">show master status;</span><br></pre></td></tr></table></figure><p>主要查看返回结果的文件名<code>File</code>、当前位置<code>Position</code> </p><p><img src="https://images.hckun.cn/image-20221208213347191.png" alt="image-20221208213347191"></p><blockquote><p>进入从数据库容器，配置主从复制</p></blockquote><p>进入从数据库容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql-slave /bin/bash</span><br></pre></td></tr></table></figure><p>配置从数据库所属的主数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 格式：</span><br><span class="line">-- change master to master_host=&#x27;宿主机ip&#x27;,master_user=&#x27;主数据库配置的主从复制用户名&#x27;,master_password=&#x27;主数据库配置的主从复制用户密码&#x27;,master_port=宿主机主数据库端口,master_log_file=&#x27;主数据库主从同步状态的文件名File&#x27;,master_log_pos=主数据库主从同步状态的Position,master_connect_retry=连接失败重试时间间隔（秒）;</span><br><span class="line"></span><br><span class="line">change master to master_host=&#x27;192.168.xxx.xxx&#x27;,master_user=&#x27;slave&#x27;,master_password=&#x27;123456&#x27;,master_port=3307,master_log_file=&#x27;mall-mysql-bin.000001&#x27;,master_log_pos=769,master_connect_retry=30;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">change master to master_host=&#x27;主机ip&#x27;,master_user=&#x27;slave&#x27;,master_password=&#x27;123456&#x27;,master_port=3307,master_log_file=&#x27;mall-mysql-bin.000009&#x27;,master_log_pos=777,master_connect_retry=30;</span><br></pre></td></tr></table></figure><p>查看主从同步状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">\G 可以将横向的结果集表格转换成纵向展示。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slave status的字段比较多，纵向展示比友好</span></span><br><span class="line">show slave status \G;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221208213803933.png" alt="image-20221208213803933"></p><p>除了展示刚刚配置的主数据库信息外，主要关注 <code>Slave_IO_Running</code>、<code>Slave_SQL_Running</code>。目前两个值应该都为 <code>No</code>，表示还没有开始。 </p><p>开启主从同步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure><p>再次查看主从同步状态，<code>Slave_IO_Running</code>、<code>Slave_SQL_Running</code>都变为<code>Yes</code>。</p><p><img src="https://images.hckun.cn/image-20221211125511213.png" alt="image-20221211125511213"></p><blockquote><p>主从复制测试</p></blockquote><p>在主数据库上新建库、使用库、新建表、插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database db01;</span><br><span class="line">use db01;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1 (id <span class="type">int</span>, name <span class="type">varchar</span>(<span class="number">20</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t1 <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;abc&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在从数据库上使用库、查看记录 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line">use db01;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1;</span><br></pre></td></tr></table></figure><h1 id="13、Docker安装Redis"><a href="#13、Docker安装Redis" class="headerlink" title="13、Docker安装Redis"></a>13、Docker安装Redis</h1><blockquote><p>拉取Redis</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><blockquote><p>从官网获取 <a href="http://download.redis.io/redis-stable/redis.conf">redis.conf</a> 配置文件</p></blockquote><p>这里我们获取redis.conf主要为后面做挂载准备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/redis   //进入目录</span><br><span class="line">wget http://download.redis.io/redis-stable/redis.conf   //下载redis配置文件</span><br><span class="line">vim redis.conf  //修改配置文件</span><br></pre></td></tr></table></figure><p>需修改内容项如下：</p><ul><li><p>requirepass #redis连接密码</p></li><li><p>bind 127.0.0.1 #注释掉这部分，这是限制redis只能本地访问</p></li><li><p>protected-mode no #默认yes，开启保护模式，限制为本地访问</p></li><li><p>daemonize no#默认no，改为yes意为以守护进程方式启动，可后台运行，除非kill进程（可选），改为yes会使配置文件方式启动redis失败</p></li><li><p>dir ./ #输入本地redis数据库存放文件夹（可选）</p></li><li><p>appendonly yes #redis持久化（可选）</p></li></ul><blockquote><p>启动redis容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis  --privileged=true -v /opt/redis/redis.conf:/etc/redis/redis.conf -v /opt/redis/data:/data -d redis redis-server  /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><blockquote><p>查看redis容器状态</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps </span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221211115553979.png" alt="image-20221211115553979"></p><blockquote><p>进入redis</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221211121513595.png" alt="image-20221211121513595"></p><h1 id="14、Docker安装Nginx"><a href="#14、Docker安装Nginx" class="headerlink" title="14、Docker安装Nginx"></a>14、Docker安装Nginx</h1><blockquote><p>拉取nginx</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><blockquote><p>查看下载的镜像</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221211122105221.png" alt="image-20221211122105221"></p><blockquote><p>创建Nginx配置文件 </p></blockquote><p>启动前需要先创建Nginx外部挂载的配置文件（ /home/nginx/conf/nginx.conf）<br>之所以要先创建 , 是因为Nginx本身容器只存在/etc/nginx 目录 , 本身就不创建 nginx.conf 文件<br>当服务器和容器都不存在 nginx.conf 文件时, 执行启动命令的时候 docker会将nginx.conf 作为目录创建 , 这并不是我们想要的结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建挂载目录</span></span><br><span class="line">mkdir -p /home/nginx/conf</span><br><span class="line">mkdir -p /home/nginx/log</span><br><span class="line">mkdir -p /home/nginx/html</span><br></pre></td></tr></table></figure><blockquote><p>容器中的nginx.conf文件和conf.d文件夹复制到宿主机</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成容器</span></span><br><span class="line">docker run --name nginx -p 9001:80 -d nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将容器nginx.conf文件复制到宿主机</span></span><br><span class="line">docker cp nginx:/etc/nginx/nginx.conf /home/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将容器conf.d文件夹下内容复制到宿主机</span></span><br><span class="line">docker cp nginx:/etc/nginx/conf.d /home/nginx/conf/conf.d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将容器中的html文件夹复制到宿主机</span></span><br><span class="line">docker cp nginx:/usr/share/nginx/html /home/nginx/</span><br></pre></td></tr></table></figure><blockquote><p>创建Nginx容器并运行</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接执行docker <span class="built_in">rm</span> nginx或者以容器<span class="built_in">id</span>方式关闭容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找到nginx对应的容器<span class="built_in">id</span></span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭该容器</span></span><br><span class="line">docker stop nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除该容器</span></span><br><span class="line">docker rm nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除正在运行的nginx容器</span></span><br><span class="line">docker rm -f nginx</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8080:80 --name nginx -v /home/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /home/nginx/conf/conf.d:/etc/nginx/conf.d -v /home/nginx/log:/var/log/nginx -v /home/nginx/html:/usr/share/nginx/html -d nginx:latest</span><br></pre></td></tr></table></figure><p>访问nginx</p><p><img src="https://images.hckun.cn/image-20221211122622173.png" alt="image-20221211122622173"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK8新特性</title>
      <link href="/post/bcab918b.html"/>
      <url>/post/bcab918b.html</url>
      
        <content type="html"><![CDATA[<h1 id="1、Lambda表达式"><a href="#1、Lambda表达式" class="headerlink" title="1、Lambda表达式"></a>1、Lambda表达式</h1><h2 id="1-1、Lambda表达式介绍"><a href="#1-1、Lambda表达式介绍" class="headerlink" title="1.1、Lambda表达式介绍"></a>1.1、Lambda表达式介绍</h2><p>​    Lambda是一个匿名函数 ,我们可以把Lambda表达式理解成为是一段可以传递的代码(将代码像数据一样进行传递)使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使java的语言表达能力得到了提升。</p><p>下面通过3个例子进行对比</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 演示一</span></span><br><span class="line">        <span class="comment">// 1. 未使用Lambda表达式</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;未使用Lambda表达式&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        runnable1.run();</span><br><span class="line">        <span class="comment">//使用Lambda表达式</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable12</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;使用了Lambda表达式&quot;</span>);</span><br><span class="line">        runnable12.run();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//演示二</span></span><br><span class="line">        <span class="comment">//2、未Lambda表达式</span></span><br><span class="line">        Comparator&lt;Integer&gt; comparable1 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(o1, o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(comparable1.compare(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">        <span class="comment">//2、使用Lambda表达式</span></span><br><span class="line">        Comparator&lt;Integer&gt; comparator2 = ((o1, o2) -&gt; o1.compareTo(<span class="number">02</span>));</span><br><span class="line">        System.out.println(comparator2.compare(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、方法引用</span></span><br><span class="line">        Comparator&lt;Integer&gt; comparator3 = Integer::compareTo;</span><br><span class="line">        System.out.println(comparator3.compare(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2、Lambda表达式语法"><a href="#1-2、Lambda表达式语法" class="headerlink" title="1.2、Lambda表达式语法"></a>1.2、Lambda表达式语法</h2><h3 id="1-2-1、Lambda基本格式"><a href="#1-2-1、Lambda基本格式" class="headerlink" title="1.2.1、Lambda基本格式"></a>1.2.1、Lambda基本格式</h3><p>举例:<code>(o1,o2)-&gt;Integer.compare(o1,o2);</code></p><p>格式：：</p><p>​        <code>-&gt;</code>：lambda操作符或箭头操作符</p><p>​        <code>-&gt;</code>:左边lambda形参列表(其实就是接口中的抽象方法的形参列表)</p><p>​      <code>-&gt;</code>:右边lambda体(其实就是重写的抽象方法的方法体)</p><h3 id="1-2-2、Lambda表达式常见用法"><a href="#1-2-2、Lambda表达式常见用法" class="headerlink" title="1.2.2、Lambda表达式常见用法"></a>1.2.2、Lambda表达式常见用法</h3><blockquote><p>无参、无返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">Runnable</span> <span class="variable">runnable1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;无参、无返回值&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       runnable1.run();</span><br><span class="line"></span><br><span class="line">       <span class="type">Runnable</span> <span class="variable">runnable2</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;无参、无返回值&quot;</span>);</span><br><span class="line">       &#125;;</span><br><span class="line">       runnable2.run();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>lambda需要一个参数、但无返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        Consumer&lt;String&gt; consumer1 = <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        consumer1.accept(<span class="string">&quot;有一个参数、但无返回值&quot;</span>);</span><br><span class="line">        Consumer&lt;String&gt; consumer2 = (String s) -&gt; &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;;</span><br><span class="line">        consumer2.accept(<span class="string">&quot;有一个参数、但无返回值&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>数据类型可以省略，因为可由编译器推断得出，成为”类型推断”</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">       Consumer&lt;String&gt; consumer2 = (s) -&gt; &#123;</span><br><span class="line">           System.out.println(s);</span><br><span class="line">       &#125;;</span><br><span class="line">       consumer2.accept(<span class="string">&quot;数据类型可以省略，因为可由编译器推断得出，成为\&quot;类型推断\&quot;&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>lambda若只需要一个参数时，参数的小括号可以省略</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">        Consumer&lt;String&gt; consumer2 = s -&gt; &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;;</span><br><span class="line">        consumer2.accept(<span class="string">&quot;若只需要一个参数时，参数的小括号可以省略&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>lambda需要两个或以上参数，多条执行语句，并且可以有返回值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">        Comparator&lt;Integer&gt; comparable1 = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                System.out.println(o1);</span><br><span class="line">                System.out.println(o2);</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(o1, o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(comparable1.compare(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        Comparator&lt;Integer&gt; comparator2 = (o1, o2) -&gt; &#123;</span><br><span class="line">            System.out.println(o1);</span><br><span class="line">            System.out.println(o2);</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(o1, o2);</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(comparator2.compare(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>当lambda体只有一条语句时，return与大括号若有，都可以省略</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line">        Comparator&lt;Integer&gt; comparator = (o1, o2) -&gt; Integer.compare(o1, o2);</span><br><span class="line">        System.out.println(comparator.compare(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结</p></blockquote><p><code>-&gt;</code>左边lambda形参列表的参数类型可以省略(类型推断)；如果lambda形参列表只有一个参数，其一对()也可以省略</p><p><code>-&gt;</code>右边lambda体应使用一对{}包裹；如果lambda体只有一条执行语句(可能是return语句)，省略这一对{}和return关键字</p><blockquote><p>lambda表达式的本质：作为函数式接口的实例</p></blockquote><blockquote><p>函数式接口：如果一个接口中，只声明了一个抽象方法。则此接口就称为函数式接口</p></blockquote><h1 id="2、函数式接口"><a href="#2、函数式接口" class="headerlink" title="2、函数式接口"></a>2、函数式接口</h1><h2 id="2-1、什么是函数式接口"><a href="#2-1、什么是函数式接口" class="headerlink" title="2.1、什么是函数式接口"></a>2.1、什么是函数式接口</h2><ul><li>只包含一个抽象方法的接口，成为函数式接口</li><li>你可以通过Lambda表达式来创建该接口的对象。若Lambda表达式抛出一个受检异常(即：非运行时异常)，那么该异常需要在目标接口的抽象方法上进行声明</li><li>我们可以在一个接口上使用<code>@Functionallnterface</code>注解，这样做可以检查它是否是一个函数式接口。同时javadoc也会包含一条声明，说明这个接口是一个函数式接口</li><li>在<code>java.util.function</code>包下定义了java8的丰富的函数式接口</li></ul><h2 id="2-2、Java内置函数式接口"><a href="#2-2、Java内置函数式接口" class="headerlink" title="2.2、Java内置函数式接口"></a>2.2、Java内置函数式接口</h2><p>Java内置四大核心函数式接口</p><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th></tr></thead><tbody><tr><td>Consumer<T>消费型接口</td><td>T</td><td>void</td><td>对类型为T的对象应用操作，包含方法void accept(T t)</td></tr><tr><td>Supplier<T>供给型接口</td><td>无</td><td>R</td><td>返回T类型的方法。包含方法：T get()</td></tr><tr><td>Function&lt;T,R&gt;</td><td>T</td><td>R</td><td>对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法：R apply(T t)</td></tr><tr><td>Predicate<T>断定型接口</td><td>T</td><td>boolean</td><td>确定类型为T的对象是否满足某约束，并返回boolean值。包含方法：boolean test(T t)</td></tr></tbody></table><blockquote><p>消费型接口示例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消费型接口</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 传统写法</span></span><br><span class="line">       consumerTest(<span class="number">100</span>, <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Integer&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Integer money)</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;我今天一共消费了&quot;</span> + money + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//lambda表达式写法</span></span><br><span class="line">       consumerTest(<span class="number">100</span>, money -&gt; System.out.println(<span class="string">&quot;我今天一共消费了&quot;</span> + money + <span class="string">&quot;元&quot;</span>));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">consumerTest</span><span class="params">(Integer money, Consumer&lt;Integer&gt; consumer)</span> &#123;</span><br><span class="line">       consumer.accept(money);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>断定型接口示例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//断定型型接口</span></span><br><span class="line"><span class="comment">//找出下列城市中包含京的</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;上海&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;天津&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;杭州&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;南京&quot;</span>);</span><br><span class="line">    <span class="comment">//传统写法</span></span><br><span class="line">    predicateTest(list, <span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> s.contains(<span class="string">&quot;京&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//lambda表达式写法</span></span><br><span class="line">    predicateTest(list, s -&gt; s.contains(<span class="string">&quot;京&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">predicateTest</span><span class="params">(List&lt;String&gt; lists, Predicate&lt;String&gt; predicate)</span> &#123;</span><br><span class="line">    lists.forEach(list -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate.test(list)) &#123;</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其它函数接口</p><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th></tr></thead><tbody><tr><td>BiFunction&lt;T,U,R&gt;</td><td>T,U</td><td>R</td><td>对类型为T,U参数应用操作,返回R类型的结果。包含方法为：R apply(T t, U u)</td></tr><tr><td>UnaryOperator<T>(Function子接口)</td><td>T</td><td>T</td><td>对类型为T的对象进行一元运算，并返回T类型的结果。包含方法为：T appl(T t)</td></tr><tr><td>BinaryOperator<T>(BiFunction子接口)</td><td>T ,T</td><td>T</td><td>对类型为T的对象进行二元运算，并返回T类型的结果。包含方法为：T appl(T t1，T  t2)</td></tr><tr><td>BiConsumer&lt;T,U&gt;</td><td>T，U</td><td>void</td><td>对类型为T，U参数应用操作。其包含方法为：void accept(T t,U u)</td></tr><tr><td>BiPredicate&lt;T,U&gt;</td><td>T,U</td><td>boolean</td><td>包含方法为：boolean test(T t,U u)</td></tr><tr><td>ToIntFunction<T><br />ToLongFunction<T><br />ToDoubleFunction<T></td><td>T</td><td>int<br />long<br />double</td><td>分别计算int、long、double值的函数</td></tr><tr><td>IntFunction<R><br />LongFunction<R><br />DoubleFunction<R></td><td>int<br />long<br />double</td><td>R</td><td>参数分别为int、long、double类型的函数</td></tr></tbody></table><h1 id="3、方法引用与构造器引用"><a href="#3、方法引用与构造器引用" class="headerlink" title="3、方法引用与构造器引用"></a>3、方法引用与构造器引用</h1><h2 id="3-1、方法引用"><a href="#3-1、方法引用" class="headerlink" title="3.1、方法引用"></a>3.1、方法引用</h2><p>当要传递给Lambda体内的操作，已经有实现的方法了，就可以使用方法引用了</p><blockquote><p>方法引用使用的前提条件是什么呢？</p></blockquote><ul><li>方法引用所引用的方法的参数列表必须要和函数式接口中抽象方法的参数列表相同(完全一致)</li><li>方法引用所引用的方法的返回值必须要和函数式接口中抽象方法的返回值相同(完全相同)</li></ul><blockquote><p>方法引用一般有三种方式:</p></blockquote><ul><li>实例对象名::实例方法名</li><li>类名::静态方法名</li><li>类名::实例方法名</li></ul><p>通过以下实例，展示如何使用方法引用</p><p>新建<code>Employee</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(<span class="type">int</span> id, String name, <span class="type">int</span> age, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, salary=&quot;</span> + salary +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> (Employee) o;</span><br><span class="line">        <span class="type">return</span> <span class="variable">id</span> <span class="operator">=</span>= employee.id &amp;&amp; age == employee.age &amp;&amp; Double.compare(employee.salary, salary) == <span class="number">0</span> &amp;&amp; Objects.equals(name, employee.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, name, age, salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建提供用于测试的数据的类<code>EmployeeData</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeData</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Employee&gt; <span class="title function_">getEmployees</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">34</span>, <span class="number">6000.38</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>, <span class="string">&quot;李四&quot;</span>, <span class="number">12</span>, <span class="number">9876.12</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1003</span>, <span class="string">&quot;王五&quot;</span>, <span class="number">33</span>, <span class="number">3000.82</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1004</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">26</span>, <span class="number">7657.37</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1005</span>, <span class="string">&quot;jerry&quot;</span>, <span class="number">65</span>, <span class="number">5555.32</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1006</span>, <span class="string">&quot;lihua&quot;</span>, <span class="number">42</span>, <span class="number">4333.32</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1007</span>, <span class="string">&quot;kangkang&quot;</span>, <span class="number">26</span>, <span class="number">9500.43</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1008</span>, <span class="string">&quot;liming&quot;</span>, <span class="number">35</span>, <span class="number">2500.32</span>));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法引用测试类<code>MethodRefTest</code></p><blockquote><p>对象::实例方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1、对象::实例方法</span></span><br><span class="line">    <span class="comment">//Consumer中的void accept(T t)</span></span><br><span class="line">    <span class="comment">//PrintStream中的void println(T t)</span></span><br><span class="line">    Consumer&lt;String&gt; consumer1 = s -&gt; System.out.println(s);</span><br><span class="line">    consumer1.accept(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    <span class="comment">//方法引用</span></span><br><span class="line">    <span class="type">PrintStream</span> <span class="variable">printStream</span> <span class="operator">=</span> System.out;</span><br><span class="line">    Consumer&lt;String&gt; consumer2 = printStream::println; <span class="comment">//System.out::println</span></span><br><span class="line">    consumer1.accept(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//2、对象::实例方法</span></span><br><span class="line">    <span class="comment">//Supplier中的T get()</span></span><br><span class="line">    <span class="comment">//Employee中的String getName()</span></span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">34</span>, <span class="number">6000.38</span>);</span><br><span class="line">    Supplier&lt;String&gt; supplier1 = () -&gt; employee.getName();</span><br><span class="line">    System.out.println(supplier1.get());</span><br><span class="line">    <span class="comment">//方法引用</span></span><br><span class="line">    Supplier&lt;String&gt; supplier2 = employee::getName;</span><br><span class="line">    System.out.println(supplier2.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类::静态方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//3、类::静态方法</span></span><br><span class="line">    <span class="comment">//Comparactor中的int compare(T t1,T t2)</span></span><br><span class="line">    <span class="comment">//Interger中的int compare(T t1,T t2)</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator1 = (i1, i2) -&gt; Integer.compare(i1, i2);</span><br><span class="line">    System.out.println(comparator1.compare(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    <span class="comment">//方法引用</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator2 = Integer::compare;</span><br><span class="line">    System.out.println(comparator2.compare(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//4、类::静态方法</span></span><br><span class="line">    <span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">    <span class="comment">//Math中的Long round(Double d)</span></span><br><span class="line">    Function&lt;Double, Long&gt; function1 = (l) -&gt; Math.round(l);</span><br><span class="line">    System.out.println(function1.apply(<span class="number">3.14</span>));</span><br><span class="line">    <span class="comment">//方法引用</span></span><br><span class="line">    Function&lt;Double, Long&gt; function2 = Math::round;</span><br><span class="line">    System.out.println(function2.apply(<span class="number">1.6</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类::实例方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">//4、类::实例方法</span></span><br><span class="line">     <span class="comment">//Comparator中的compare(T t1,T t2)</span></span><br><span class="line">     <span class="comment">//String中的int t1.compareTo(t2)</span></span><br><span class="line">     Comparator&lt;String&gt; comparator1 = (s1, s2) -&gt; s1.compareTo(s2);</span><br><span class="line">     System.out.println(comparator1.compare(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;ab&quot;</span>));</span><br><span class="line">     <span class="comment">//方法引用</span></span><br><span class="line">     Comparator&lt;String&gt; comparator2 = String::compareTo;</span><br><span class="line">     System.out.println(comparator2.compare(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;ab&quot;</span>));</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//6、类::实例方法</span></span><br><span class="line">    <span class="comment">//BiPredicate中的boolean test(T t1, T t2)</span></span><br><span class="line">    <span class="comment">//String中的boolean t1.equals(t2)</span></span><br><span class="line">    BiPredicate&lt;String, String&gt; predicate1 = (s1, s2) -&gt; s1.equals(s2</span><br><span class="line">    System.out.println(predicate1.test(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abc&quot;</span>));</span><br><span class="line">    <span class="comment">//方法引用</span></span><br><span class="line">    BiPredicate&lt;String, String&gt; predicate2 = String::equals;</span><br><span class="line">    System.out.println(predicate2.test(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abc&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//7、类::实例方法</span></span><br><span class="line">    <span class="comment">//Function中的 R apply(T t)</span></span><br><span class="line">    <span class="comment">//Employee中的String getName()</span></span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">34</span>, <span class="number">6000.38</span>);</span><br><span class="line">    Function&lt;Employee, String&gt; function1 = (e) -&gt; e.getName();</span><br><span class="line">    System.out.println(function1.apply(employee));</span><br><span class="line">    <span class="comment">//方法引用</span></span><br><span class="line">    Function&lt;Employee, String&gt; function2 = Employee::getName;</span><br><span class="line">    System.out.println(function2.apply(employee));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2、构造器引用和数组引用"><a href="#3-2、构造器引用和数组引用" class="headerlink" title="3.2、构造器引用和数组引用"></a>3.2、构造器引用和数组引用</h2><p>构造器引用说明:构造器参数列表要与接口中抽象方法的参数列表一致</p><p>语法格式:    <code>类名::new</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//构造器引用</span></span><br><span class="line">    <span class="comment">//Supplier中的T get()</span></span><br><span class="line">    Supplier&lt;Employee&gt; supplier1 = () -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    System.out.println(supplier1);</span><br><span class="line">    Supplier&lt;Employee&gt; supplier2 = Employee::<span class="keyword">new</span>;</span><br><span class="line">    System.out.println(supplier2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">    Function&lt;Integer, Employee&gt; function1 = (age) -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>(age);</span><br><span class="line">    System.out.println(function1.apply(<span class="number">15</span>));</span><br><span class="line">    Function&lt;Integer, Employee&gt; function2 = Employee::<span class="keyword">new</span>;</span><br><span class="line">    System.out.println(function2.apply(<span class="number">15</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//BiFunction中的R apply(T t,U u)</span></span><br><span class="line">    BiFunction&lt;Integer, String, Employee&gt; function1 = (id, name) -&gt; <span class="keyword">new</span> <span class="title class_">Employee</span>(id, name);</span><br><span class="line">    System.out.println(function1.apply(<span class="number">15</span>, <span class="string">&quot;tom&quot;</span>));</span><br><span class="line">    BiFunction&lt;Integer, String, Employee&gt; function2 = Employee::<span class="keyword">new</span>;</span><br><span class="line">    System.out.println(function2.apply(<span class="number">15</span>, <span class="string">&quot;tom&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//数组引用</span></span><br><span class="line">    <span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">    Function&lt;Integer, String[]&gt; function1 = (length) -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[length];</span><br><span class="line">    System.out.println(function1.apply(<span class="number">5</span>));</span><br><span class="line">    Function&lt;Integer, String[]&gt; function2 = String[]::<span class="keyword">new</span>;</span><br><span class="line">    String[] arrays = function1.apply(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span> (String array : arrays) &#123;</span><br><span class="line">        System.out.println(array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4、Stream-API"><a href="#4、Stream-API" class="headerlink" title="4、Stream API"></a>4、Stream API</h1><h2 id="4-1、Stream-API简介"><a href="#4-1、Stream-API简介" class="headerlink" title="4.1、Stream API简介"></a>4.1、Stream API简介</h2><p>​    Stream是Java8的一大亮点，是对容器对象功能的增强，它专注于对容器对象进行各种非常便利、高效的 <strong>聚合操作（aggregate operation）</strong>或者大批量数据操作。Stream API借助于同样新出现的Lambda表达式，极大的提高编程效率和程序可读性。同时，它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用fork/join并行方式来拆分任务和加速处理过程。所以说，Java8中首次出现的 **java.util.stream是一个函数式语言+多核时代综合影响的产物</p><h2 id="4-2、Stream-API特点"><a href="#4-2、Stream-API特点" class="headerlink" title="4.2、Stream API特点"></a>4.2、Stream API特点</h2><pre><code>1.  Stream关注的是对数据的运算，与CPU打交道而集合关注的是数据的存储，与内存打交道1.  Stream自己不会存储元素；Stream不会改变源对象。相反，他们会返回一个持有结果的新Sream；Stream操作是延迟执行的。这意味着他们会等到需要结果的时候才执行</code></pre><p>Stream执行流程</p><ul><li>Stream的实例化</li><li>一系列的中间操作(过滤、映射…)</li><li>终止操作</li></ul><p>中间操作链，对数据源的数据进行处理</p><p>一旦执行终止操作，就执行中间操作链，并产生结果，之后，不会再被使用</p><h2 id="4-3、Stream的实例化"><a href="#4-3、Stream的实例化" class="headerlink" title="4.3、Stream的实例化"></a>4.3、Stream的实例化</h2><blockquote><p>方式一:通过集合</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//方式一:通过集合</span></span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">    <span class="comment">//顺序流</span></span><br><span class="line">    Stream&lt;Employee&gt; stream = employees.stream();</span><br><span class="line">    <span class="comment">//并行流</span></span><br><span class="line">    Stream&lt;Employee&gt; employeeStream = employees.parallelStream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方式二:通过数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//方式二:通过数组</span></span><br><span class="line">    Stream&lt;Integer&gt; stream = Arrays.stream(<span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">e1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">e2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">2</span>, <span class="string">&quot;jerry&quot;</span>);</span><br><span class="line">    Employee[] employees = <span class="keyword">new</span> <span class="title class_">Employee</span>[]&#123;e1, e2&#125;;</span><br><span class="line">    Stream&lt;Employee&gt; stream1 = Arrays.stream(employees);</span><br></pre></td></tr></table></figure><blockquote><p>方式三:通过Stream.of()</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//方式三:通过Stream.of()</span></span><br><span class="line">    Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方式四:创建无限流</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//Stream实例化 方式四:创建无限流</span></span><br><span class="line">    <span class="comment">//迭代</span></span><br><span class="line">    <span class="comment">// public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">    <span class="comment">//遍历前10个偶数</span></span><br><span class="line">    Stream.iterate(<span class="number">0</span>, i -&gt; i + <span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">    <span class="comment">//生产</span></span><br><span class="line">    <span class="comment">//public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">    <span class="comment">//打印前10个随机数</span></span><br><span class="line">    Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4、Stream中间操作-筛选与切片"><a href="#4-4、Stream中间操作-筛选与切片" class="headerlink" title="4.4、Stream中间操作-筛选与切片"></a>4.4、Stream中间操作-筛选与切片</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>filter(Predicate p)</td><td>接收Lambda，从流中排除某些元素</td></tr><tr><td>distinct()</td><td>筛选，通过流所生成元素的hashCode()和equales()去除重复元素</td></tr><tr><td>limit(long maxSize)</td><td>截断流，使其元素不超过给定数量</td></tr><tr><td>skip(long n)</td><td>跳过元素，返回一个扔掉了前n个元素的流。若流中元素不足n个，则返回一个空流。与limit(n)互补</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1、找出员工薪资大于6000的员工信息</span></span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">    employees.stream().filter(e -&gt; e.getSalary() &gt; <span class="number">6000</span>).forEach(System.out::println);</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">//2、查询前3名员工信息</span></span><br><span class="line">    employees.stream().limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">//3、跳过前3个查询后面的员工信息</span></span><br><span class="line">    employees.stream().skip(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">    System.out.println();</span><br><span class="line">    <span class="comment">//4.去除信息重复的员工(需重写Employee的equals和hashCode方法)</span></span><br><span class="line">    employees.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">34</span>, <span class="number">6000.38</span>));</span><br><span class="line">    employees.stream().distinct().forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5、Stream中间操作-映射"><a href="#4-5、Stream中间操作-映射" class="headerlink" title="4.5、Stream中间操作-映射"></a>4.5、Stream中间操作-映射</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>map(Function f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，并映射成一个新的元素。</td></tr><tr><td>mapToDouble(To DoubleFunction f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上,产生一个新的DoubleStream。</td></tr><tr><td>mapToInt(ToIntFunction f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上,产生一个新的IntStream。</td></tr><tr><td>mapToLong(ToLongFunction f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上,产生一个新的LongStream。</td></tr><tr><td>flatMap(Function f)</td><td>接收一个函数作为参数,将流中的每个值都换成另一个流，然后把所有流连成一个流。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//map</span></span><br><span class="line">    <span class="comment">//将下列集合每个元素转成大写</span></span><br><span class="line">    List&lt;String&gt; lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    lists.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">    lists.add(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">    lists.add(<span class="string">&quot;cc&quot;</span>);</span><br><span class="line">    lists.stream().map(String::toUpperCase).forEach(System.out::println);</span><br><span class="line">    <span class="comment">//打印员工姓名长度超过3的员工姓名</span></span><br><span class="line">    EmployeeData.getEmployees().stream().map(Employee::getName).filter(name -&gt; name.length(</span><br><span class="line">    <span class="comment">//使用map和flatMap打印stringToCharacter执行的结果</span></span><br><span class="line">    <span class="comment">//map会将每个值映射单独作为一个流返回，类似与list集合的add()</span></span><br><span class="line">    Stream&lt;Stream&lt;Character&gt;&gt; stream = lists.stream().map(StreamApiTest::stringToCharacter)</span><br><span class="line">    stream.forEach(str -&gt; &#123;</span><br><span class="line">        str.forEach(System.out::println);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//flatMap会将每个值都换成另一个流，然后把所有流连成一个流返回,类似与list集合的addAll()</span></span><br><span class="line">    Stream&lt;Character&gt; characterStream = lists.stream().flatMap(StreamApiTest::stringToChara</span><br><span class="line">    characterStream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title function_">stringToCharacter</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    List&lt;Character&gt; characters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Character character : str.toCharArray()) &#123;</span><br><span class="line">        characters.add(character);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> characters.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-6、Stream中间操作-排序"><a href="#4-6、Stream中间操作-排序" class="headerlink" title="4.6、Stream中间操作-排序"></a>4.6、Stream中间操作-排序</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>sorted()</td><td>产生一个新流，其中按自然顺序排序</td></tr><tr><td>sorted(Comparator com)</td><td>产生一个新流，其中按比较器顺序排序</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//自然排序</span></span><br><span class="line">    <span class="type">int</span>[] arrays = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">11</span>, <span class="number">5</span>, -<span class="number">1</span>, <span class="number">20</span>, <span class="number">18</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    Arrays.stream(arrays).sorted().forEach(System.out::println);</span><br><span class="line">    <span class="comment">//java.lang.ClassCastException: cn.example.Employee cannot be cast to java.lan</span></span><br><span class="line">    <span class="comment">//抛出异常 原因:因为Employee没有实现Comparable接口</span></span><br><span class="line">    <span class="comment">//EmployeeData.getEmployees().stream().sorted().forEach(System.out::println);</span></span><br><span class="line">    <span class="comment">//定制排序</span></span><br><span class="line">    <span class="comment">//按员工年龄进行排序</span></span><br><span class="line">    EmployeeData.getEmployees().stream().sorted((e1, e2) -&gt; Integer.compare(e1.get</span><br><span class="line">    <span class="comment">//按员工年龄进行排序、年龄相同按薪资排</span></span><br><span class="line">    EmployeeData.getEmployees().stream().sorted((e1, e2) -&gt; &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ageValue</span> <span class="operator">=</span> Integer.compare(e1.getAge(), e2.getAge());</span><br><span class="line">        <span class="keyword">if</span> (ageValue != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//age不相等</span></span><br><span class="line">            <span class="keyword">return</span> ageValue;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//age相等</span></span><br><span class="line">            <span class="keyword">return</span> Double.compare(e1.getSalary(), e2.getSalary());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-7、Stream终止操作-匹配与查找"><a href="#4-7、Stream终止操作-匹配与查找" class="headerlink" title="4.7、Stream终止操作-匹配与查找"></a>4.7、Stream终止操作-匹配与查找</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>allMatch(Predicate p)</td><td>检查是否匹配所有元素</td></tr><tr><td>anyMatch(Predicate p)</td><td>检查是否至少匹配一个元素</td></tr><tr><td>noneMatch(Predicate p)</td><td>检查是否没有匹配所有元素</td></tr><tr><td>findFirst()</td><td>返回第一个元素</td></tr><tr><td>findAny()</td><td>返回当前流中的任意元素</td></tr><tr><td>count()</td><td>返回元素个数</td></tr><tr><td>max(Comparator c)</td><td>返回流中最大值</td></tr><tr><td>min(Comparator c)</td><td>返回流中最小值</td></tr><tr><td>forEach(Consumer c)</td><td>内部迭代</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test8</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1、是否所有员工年龄大于18</span></span><br><span class="line">    List&lt;Employee&gt; employees = EmployeeData.getEmployees();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">allMatch</span> <span class="operator">=</span> employees.stream().allMatch(employee -&gt; employee.getAge() &gt; <span class="number">18</span>);</span><br><span class="line">    System.out.println(allMatch);</span><br><span class="line">    <span class="comment">//2、是否存在员工的薪资大于1000</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">anyMatch</span> <span class="operator">=</span> employees.stream().anyMatch(employee -&gt; employee.getAge() &gt; <span class="number">10000</span>);</span><br><span class="line">    System.out.println(anyMatch);</span><br><span class="line">    <span class="comment">//3、是否存在员工性张（没有一个员工性张）</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">noneMatch</span> <span class="operator">=</span> employees.stream().noneMatch(employee -&gt; employee.getName().startsWith(<span class="string">&quot;张&quot;</span>));</span><br><span class="line">    System.out.println(noneMatch);</span><br><span class="line">    <span class="comment">//4、返回第一个员工</span></span><br><span class="line">    Optional&lt;Employee&gt; first = employees.stream().findFirst();</span><br><span class="line">    System.out.println(first);</span><br><span class="line">    <span class="comment">//5、返回任意员工（要使用并行流）</span></span><br><span class="line">    Optional&lt;Employee&gt; any = employees.parallelStream().findAny();</span><br><span class="line">    System.out.println(any);</span><br><span class="line">    <span class="comment">//6、返回员工个数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> employees.stream().count();</span><br><span class="line">    System.out.println(count);</span><br><span class="line">    <span class="comment">//7、返回年龄最大值</span></span><br><span class="line">    Optional&lt;Integer&gt; max = employees.stream().map(Employee::getAge).max(Integer::compare);</span><br><span class="line">    System.out.println(max);</span><br><span class="line">    <span class="comment">//8、返回年龄最小值</span></span><br><span class="line">    Optional&lt;Integer&gt; min = employees.stream().map(Employee::getAge).min(Integer::compare);</span><br><span class="line">    System.out.println(min);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-8、Stream终止操作-规约"><a href="#4-8、Stream终止操作-规约" class="headerlink" title="4.8、Stream终止操作-规约"></a>4.8、Stream终止操作-规约</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>reduce(T iden,BinaryOperator b)</td><td>可以将流中元素反复结合起来，得到一个值，返回T</td></tr><tr><td>reduce(BinaryOperator b)</td><td>可以将流中元素反复结合起来,得到一个值,返回Optional<T></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test9</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1、计算1-10自然数的和</span></span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> list.stream().reduce(<span class="number">0</span>, Integer::sum);</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">    <span class="comment">//2、计算所有员工工资之和</span></span><br><span class="line">    Optional&lt;Double&gt; salarySum = EmployeeData.getEmployees().stream().map(Employee::getSalary).reduce(Double::sum);</span><br><span class="line">    System.out.println(salarySum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-9、Stream终止操作-收集"><a href="#4-9、Stream终止操作-收集" class="headerlink" title="4.9、Stream终止操作-收集"></a>4.9、Stream终止操作-收集</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>collect(Collector c)</td><td>将流转换为其他形式。接收一个Collector接口的实现，用于给Stream中元素做汇总的方法</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test10</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1、查找薪资大于6000的员工，并返回一个List或Set</span></span><br><span class="line">    List&lt;Employee&gt; list = EmployeeData.getEmployees().stream().filter(employee -&gt; employee.getSalary() &gt; <span class="number">6000</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(list);</span><br><span class="line">    Set&lt;Employee&gt; set = EmployeeData.getEmployees().stream().filter(employee -&gt; employee.getSalary() &gt; <span class="number">6000</span>).collect(Collectors.toSet());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Collectors常用静态方法如下</p><table><thead><tr><th>方法</th><th>返回类型</th><th>作用</th></tr></thead><tbody><tr><td>toList</td><td>List<T></td><td>把流中元素收集到List</td></tr><tr><td>toSet</td><td>Set<T></td><td>把流中元素收集到Set</td></tr><tr><td>toCollection</td><td>Collection<T></td><td>把流中元素收集到创建的集合</td></tr><tr><td>counting</td><td>Long</td><td>计算流中元素的个数</td></tr><tr><td>summingInt</td><td>Integer</td><td>对流中元素的整数属性求和</td></tr><tr><td>averagingInt</td><td>Double</td><td>计算流中元素Integer属性的平均值</td></tr><tr><td>summarizingInt</td><td>IntSummaryStatistics</td><td>收集流中Integer属性的统计值。如：平均值</td></tr><tr><td>joining</td><td>String</td><td>连接流中每个字符串</td></tr><tr><td>maxBy</td><td>Optional<T></td><td>根据比较器选择最大值</td></tr><tr><td>reducing</td><td>规约产生的类型</td><td>从一个作为累加器的初始值开始，利用BinaryOperator与流中元素，逐个结合，从而归约成单个值</td></tr><tr><td>collectionAndThen</td><td>转换函数返回的类型</td><td>包裹另一个收集器，对其结果转换函数</td></tr><tr><td>groupingBy</td><td>Map&lt;K,List<T>&gt;</td><td>根据某属性值对流分组，属性为K，结果为V</td></tr><tr><td>partitioningBy</td><td>Map&lt;Boolean,List<T>&gt;</td><td>根据true或false进行分区</td></tr></tbody></table><h1 id="5、Optional类"><a href="#5、Optional类" class="headerlink" title="5、Optional类"></a>5、Optional类</h1><p>​    Option<T>类(java.util.Optional)是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。原来用null表示一个值不存在，现在Optional可以更好表达这个概念。并且可以避免空指针异常</p><p>创建Optional类对象的方法</p><ul><li>Optional.of(T t) 创建一个Optional实例，t必须非空</li><li>Optional.empty() 创建一个空的Optional实例</li><li>Optional.ofNullable(T t) t可以为null</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="comment">// str=null;</span></span><br><span class="line">    Optional&lt;String&gt; abc = Optional.of(str);</span><br><span class="line">    System.out.println(abc);</span><br><span class="line">    Optional&lt;Object&gt; empty = Optional.empty();</span><br><span class="line">    System.out.println(empty);</span><br><span class="line">    Optional&lt;String&gt; ofNullable = Optional.ofNullable(str);</span><br><span class="line">    System.out.println(ofNullable);</span><br></pre></td></tr></table></figure><p>Optional类实际应用</p><p>创建<code>boy</code>和<code>Girl类</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Girl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Girl</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Girl girl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Girl <span class="title function_">getGirl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> girl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGirl</span><span class="params">(Girl girl)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.girl = girl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传统写法容易产生空指针异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boy</span>();</span><br><span class="line">    System.out.println(getGirlName(boy));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getGirlName</span><span class="params">(Boy boy)</span> &#123;</span><br><span class="line">    <span class="comment">//java.lang.NullPointerException</span></span><br><span class="line">    <span class="keyword">return</span> boy.getGirl().getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们进行非空判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getGirlName</span><span class="params">(Boy boy)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (boy != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> boy.getGirl();</span><br><span class="line">        <span class="keyword">if</span> (girl != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> girl.getName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现代码加入了很多的if判断，使用Option之后的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getGirlName</span><span class="params">(Boy boy)</span> &#123;</span><br><span class="line">    Optional&lt;Boy&gt; boy1 = Optional.ofNullable(boy);</span><br><span class="line">    <span class="comment">//orElse(T t)如果当前的Optional内部封装的t是非空的，则返回内部的t，如果内部t是空的，则返回orElse方法中的参数t</span></span><br><span class="line">    <span class="type">Boy</span> <span class="variable">boy2</span> <span class="operator">=</span> boy1.orElse(<span class="keyword">new</span> <span class="title class_">Boy</span>());</span><br><span class="line">    <span class="type">Girl</span> <span class="variable">girl</span> <span class="operator">=</span> boy2.getGirl();</span><br><span class="line">    <span class="type">Girl</span> <span class="variable">girl1</span> <span class="operator">=</span> Optional.ofNullable(girl).orElse(<span class="keyword">new</span> <span class="title class_">Girl</span>(<span class="string">&quot;jerry&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> girl1.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就可以随意的传递参数调用,再也不用担心空指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    System.out.println(getGirlName(boy));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础使用</title>
      <link href="/post/2c5af3bf.html"/>
      <url>/post/2c5af3bf.html</url>
      
        <content type="html"><![CDATA[<p>本文参考:<a href="https://www.bilibili.com/video/BV1vy4y1s7k6/?spm_id_from=333.999.0.0&vd_source=5bcea3f1cf65eb3c1d5d1bfe60ef886d">尚硅谷Git入门到精通全套教程</a></p><h1 id="1、Git概述"><a href="#1、Git概述" class="headerlink" title="1、Git概述"></a>1、Git概述</h1><p>​    Git 是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种</p><p>项目</p><p>​    Git 易于学习，占地面积小，性能极快。 它具有廉价的本地库，方便的暂存区域和多个工作</p><p>流分支等特性。其性能优于 Subversion、CVS、Perforce 和 ClearCase 等版本控制工具</p><h1 id="2、Git安装"><a href="#2、Git安装" class="headerlink" title="2、Git安装"></a>2、Git安装</h1><p>Git官网:<a href="https://git-scm.com/">https://git-scm.com/</a></p><p><img src="https://images.hckun.cn/image-20221106152026540.png" alt="image-20221106152026540"></p><p>直接一路点击下一步安装即可</p><p>安装成功打开终端查看Git版本:<code>git --version</code>,出现Git版本号则证明安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro ~ % git --version</span><br><span class="line">git version 2.32.1 (Apple Git-133)</span><br></pre></td></tr></table></figure><h1 id="3、Git常用命令"><a href="#3、Git常用命令" class="headerlink" title="3、Git常用命令"></a>3、Git常用命令</h1><table><thead><tr><th><strong>命令名称</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>git config –global user.name 用户名</td><td>设置用户签名</td></tr><tr><td>git config –global user.email 邮箱</td><td>设置用户签名</td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加到暂存区</td></tr><tr><td>git commit -m “日志信息” 文件名</td><td>提交到本地库</td></tr><tr><td>git reflog</td><td>查看历史记录</td></tr><tr><td>git reset –hard 版本号</td><td>版本穿梭</td></tr></tbody></table><h2 id="3-1、设置用户签名"><a href="#3-1、设置用户签名" class="headerlink" title="3.1、设置用户签名"></a>3.1、设置用户签名</h2><p>基本语法:</p><p><code>git config --global user.name 用户名</code></p><p><code>git config --global user.email 邮箱</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro bin % git config --global user.name fenfeicn</span><br><span class="line">hck@hckdeMacBook-Pro bin % git config --global user.email 87975531@qq.com</span><br></pre></td></tr></table></figure><p>​    签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看</p><p>到，以此确认本次提交是谁做的,<strong>Git 首次安装必须设置一下用户签名，否则无法提交代码</strong></p><p>查看用户签名命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro bin % git config user.name</span><br><span class="line">fenfeicn</span><br><span class="line">hck@hckdeMacBook-Pro bin % git config user.email</span><br><span class="line">87975531@qq.com</span><br></pre></td></tr></table></figure><h2 id="3-2、初始化本地库"><a href="#3-2、初始化本地库" class="headerlink" title="3.2、初始化本地库"></a>3.2、初始化本地库</h2><p>基本语法:<code>git init</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % git init</span><br><span class="line">hint: Using &#x27;master&#x27; as the name for the initial branch. This default branch name</span><br><span class="line">hint: is subject to change. To configure the initial branch name to use in all</span><br><span class="line">hint: of your new repositories, which will suppress this warning, call:</span><br><span class="line">hint: </span><br><span class="line">hint: git config --global init.defaultBranch &lt;name&gt;</span><br><span class="line">hint: </span><br><span class="line">hint: Names commonly chosen instead of &#x27;master&#x27; are &#x27;main&#x27;, &#x27;trunk&#x27; and</span><br><span class="line">hint: &#x27;development&#x27;. The just-created branch can be renamed via this command:</span><br><span class="line">hint: </span><br><span class="line">hint: git branch -m &lt;name&gt;</span><br><span class="line">Initialized empty Git repository in /Users/hck/Downloads/learn/notes/git/git-demo/.git/</span><br><span class="line">hck@hckdeMacBook-Pro git-demo % ls -a</span><br><span class="line">....git</span><br></pre></td></tr></table></figure><p>初始化完成后回生成<code>.git</code>隐藏目录</p><h2 id="3-3、查看本地库状态"><a href="#3-3、查看本地库状态" class="headerlink" title="3.3、查看本地库状态"></a>3.3、<strong>查看本地库状态</strong></h2><p>基本语法:<code>git status</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">nothing to commit (create/copy files and use &quot;git add&quot; to track)</span><br><span class="line">hck@hckdeMacBook-Pro git-demo % </span><br></pre></td></tr></table></figure><p>首次查看本地库状态工作区(<strong>没有任何文件</strong>),新增文件<code>hello.txt</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % vim hello.txt</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br></pre></td></tr></table></figure><p>再次查看本地库状态(<strong>检测到未追踪的文件</strong>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">hello.txt</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure><h2 id="3-4、添加暂存区"><a href="#3-4、添加暂存区" class="headerlink" title="3.4、添加暂存区"></a>3.4、添加暂存区</h2><p>基本语法:<code>git add 文件名 </code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % git add hello.txt </span><br></pre></td></tr></table></figure><p>查看本地库状态(<strong>检测到暂存区有新文件</strong>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line">new file:   hello.txt</span><br></pre></td></tr></table></figure><h2 id="3-5、提交本地库"><a href="#3-5、提交本地库" class="headerlink" title="3.5、提交本地库"></a>3.5、提交本地库</h2><p>基本语法:<code>git commit -m &quot;日志信息&quot; 文件名</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % git commit -m “第一次提交” hello.txt </span><br><span class="line">[master (root-commit) 5bfe3d6] “第一次提交”</span><br><span class="line"> 1 file changed, 7 insertions(+)</span><br><span class="line"> create mode 100644 hello.txt</span><br></pre></td></tr></table></figure><p> 查看本地库状态(<strong>没有文件需要提交</strong>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><h2 id="3-6、修改文件"><a href="#3-6、修改文件" class="headerlink" title="3.6、修改文件"></a>3.6、修改文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % vim hello.txt</span><br><span class="line">hello git 1111</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br></pre></td></tr></table></figure><p> 查看本地库状态(<strong>检测到工作区有文件被修改</strong>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">modified:   hello.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>将修改文件再次添加到暂存区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add hello.txt </span><br></pre></td></tr></table></figure><p> 查看本地库状态(<strong>工作区的修改添加到了暂存区</strong>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">modified:   hello.txt</span><br></pre></td></tr></table></figure><h2 id="3-7、历史版本"><a href="#3-7、历史版本" class="headerlink" title="3.7、历史版本"></a>3.7、历史版本</h2><h3 id="3-7-1、查看历史版本"><a href="#3-7-1、查看历史版本" class="headerlink" title="3.7.1、查看历史版本"></a>3.7.1、查看历史版本</h3><p>基本语法:</p><p><code>git reflog</code> 查看版本信息</p><p><code>git log</code> 查看版本详细信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % git reflog</span><br><span class="line">5bfe3d6 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit (initial): “第一次提交”</span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git log</span><br><span class="line">commit 5bfe3d64173c651c8947473334dd7711d73cdd34 (HEAD -&gt; master)</span><br><span class="line">Author: fenfeicn &lt;87975531@qq.com&gt;</span><br><span class="line">Date:   Sun Nov 6 16:04:59 2022 +0800</span><br><span class="line"></span><br><span class="line">    “第一次提交”</span><br></pre></td></tr></table></figure><h3 id="3-7-2、版本穿梭"><a href="#3-7-2、版本穿梭" class="headerlink" title="3.7.2、版本穿梭"></a>3.7.2、版本穿梭</h3><p>基本语法:<code>git reset --hard 版本号</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看当前版本号及文件内容</span></span><br><span class="line">hck@hckdeMacBook-Pro git-demo % cat hello.txt </span><br><span class="line">hello git 1111</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git reflog</span><br><span class="line">5bfe3d6 (HEAD -&gt; master) HEAD@&#123;0&#125;: commit (initial): “第一次提交”</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换到 5bfe3d6 版本</span></span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git reset --hard 5bfe3d6</span><br><span class="line">HEAD is now at 5bfe3d6 “第一次提交”</span><br><span class="line">hck@hckdeMacBook-Pro git-demo % cat hello.txt </span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br></pre></td></tr></table></figure><h1 id="4、Git分支操作"><a href="#4、Git分支操作" class="headerlink" title="4、Git分支操作"></a>4、Git分支操作</h1><h2 id="4-1、什么是分支"><a href="#4-1、什么是分支" class="headerlink" title="4.1、什么是分支"></a>4.1、什么是分支</h2><p>​    在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独</p><p>分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时</p><p>候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是</p><p>一个单独的副本。（分支底层其实也是指针的引用）</p><h2 id="4-2、分支的好处"><a href="#4-2、分支的好处" class="headerlink" title="4.2、分支的好处"></a>4.2、分支的好处</h2><p>同时并行推进多个功能开发，提高开发效率</p><p>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败</p><p>的分支删除重新开始即可</p><h2 id="4-3、分支的命令"><a href="#4-3、分支的命令" class="headerlink" title="4.3、分支的命令"></a>4.3、分支的命令</h2><table><thead><tr><th><strong>命令名称</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><h3 id="4-3-1、查看分支"><a href="#4-3-1、查看分支" class="headerlink" title="4.3.1、查看分支"></a>4.3.1、查看分支</h3><p>基本语法:<code>git branch -v</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当前处于master分支</span></span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git branch -v</span><br><span class="line">* master 5bfe3d6 “第一次提交”</span><br></pre></td></tr></table></figure><h3 id="4-3-2、创建分支"><a href="#4-3-2、创建分支" class="headerlink" title="4.3.2、创建分支"></a>4.3.2、创建分支</h3><p>基本语法:<code>git branch 分支名</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % git branch host-fixed</span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git branch -v</span><br><span class="line">  host-fixed 5bfe3d6 “第一次提交”</span><br><span class="line">* master     5bfe3d6 “第一次提交”</span><br></pre></td></tr></table></figure><h3 id="4-3-3、修改分支"><a href="#4-3-3、修改分支" class="headerlink" title="4.3.3、修改分支"></a>4.3.3、修改分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在master分支上进行修改</span></span><br><span class="line">hck@hckdeMacBook-Pro git-demo % vim hello.txt </span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git add hello.txt </span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git commit -m &quot;master修改&quot; hello.txt </span><br><span class="line">[master f5ea4b8] master修改</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">hck@hckdeMacBook-Pro git-demo % cat hello.txt </span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git master add </span><br></pre></td></tr></table></figure><h3 id="4-3-4、切换分支"><a href="#4-3-4、切换分支" class="headerlink" title="4.3.4、切换分支"></a>4.3.4、切换分支</h3><p>基本语法:<code>git checkout 分支名</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换到host-fixed分支</span></span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git checkout host-fixed</span><br><span class="line">Switched to branch &#x27;host-fixed&#x27;</span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git status             </span><br><span class="line">On branch host-fixed</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">host-fixed分支中hello.txt并没有被修改</span></span><br><span class="line">hck@hckdeMacBook-Pro git-demo % cat hello.txt </span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在 hot-fix 分支上做修改</span></span><br><span class="line">hck@hckdeMacBook-Pro git-demo % vim hello.txt </span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git add hello.txt </span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git commit -m &quot;host提交&quot; hello.txt </span><br><span class="line">[host-fixed 8c9b4d9] host提交</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line"> hck@hckdeMacBook-Pro git-demo % cat hello.txt </span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git host-fixed add</span><br></pre></td></tr></table></figure><h3 id="4-3-3、分支合并"><a href="#4-3-3、分支合并" class="headerlink" title="4.3.3、分支合并"></a>4.3.3、分支合并</h3><p>基本语法:<code>git merge 分支名</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % git merge host-fixed</span><br></pre></td></tr></table></figure><p>合并产生冲突:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % git merge host-fixed</span><br><span class="line">Auto-merging hello.txt</span><br><span class="line">CONFLICT (content): Merge conflict in hello.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br><span class="line">hck@hckdeMacBook-Pro git-demo % cat hello.txt </span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">hello git master add </span><br><span class="line">=======</span><br><span class="line">hello git host-fixed add</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;&gt;&gt;&gt;&gt; host-fixed</span></span><br></pre></td></tr></table></figure><p>冲突产生的原因:合并分支时，两个分支在<strong>同一个文件的同一个位置</strong>有两套完全不同的修改。Git 无法替</p><p>我们决定使用哪一个。必须<strong>人为决定</strong>新代码内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看本地库状态</span></span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git status</span><br><span class="line">On branch master</span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run &quot;git commit&quot;)</span><br><span class="line">  (use &quot;git merge --abort&quot; to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</span><br><span class="line">both modified:   hello.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>解决冲突:</p><p>编辑有冲突的文件，删除特殊符号，决定要使用的内容</p><p>特殊符号：<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code> <strong>当前分支的代码</strong> <code>======= </code><strong>合并过来的代码</strong><code> &gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % vim hello.txt </span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git master add</span><br><span class="line">hello git host-fixed add</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加到暂存区</span></span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git add hello.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行提交（注意：此时使用 git commit 命令时不能带文件名）</span></span><br><span class="line">git commit -m &quot;合并冲突&quot; </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看本地库状态</span></span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><h1 id="5、Git团队协作机制"><a href="#5、Git团队协作机制" class="headerlink" title="5、Git团队协作机制"></a>5、Git团队协作机制</h1><h2 id="5-1、团队内协作"><a href="#5-1、团队内协作" class="headerlink" title="5.1、团队内协作"></a>5.1、团队内协作</h2><p><img src="https://images.hckun.cn/image-20221107204000017.png" alt="image-20221107204000017"></p><h2 id="5-2、跨团队协作"><a href="#5-2、跨团队协作" class="headerlink" title="5.2、跨团队协作"></a>5.2、跨团队协作</h2><p><img src="https://images.hckun.cn/image-20221107205452078.png" alt="image-20221107205452078"></p><h1 id="6、GitHub操作"><a href="#6、GitHub操作" class="headerlink" title="6、GitHub操作"></a>6、GitHub操作</h1><h2 id="6-1、创建远程仓库"><a href="#6-1、创建远程仓库" class="headerlink" title="6.1、创建远程仓库"></a>6.1、创建远程仓库</h2><p><img src="https://images.hckun.cn/image-20221107205948134.png" alt="image-20221107205948134"></p><p><img src="https://images.hckun.cn/image-20221107210054396.png" alt="image-20221107210054396"></p><h2 id="6-2、远程仓库操作"><a href="#6-2、远程仓库操作" class="headerlink" title="6.2、远程仓库操作"></a>6.2、远程仓库操作</h2><table><thead><tr><th><strong>命令名称</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前所有远程地址别名</td></tr><tr><td>git remote add 别名 远程地址</td><td>起别名</td></tr><tr><td>git push 别名 分支</td><td>推送本地分支上的内容到远程仓库</td></tr><tr><td>git clone 远程地址</td><td>将远程仓库的内容克隆到本地</td></tr><tr><td>git pull 远程库地址别名 远程分支名</td><td>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</td></tr></tbody></table><h3 id="6-2-1、创建远程仓库别名"><a href="#6-2-1、创建远程仓库别名" class="headerlink" title="6.2.1、创建远程仓库别名"></a>6.2.1、创建远程仓库别名</h3><p>基本语法:</p><p><code>git remote -v</code>  查看当前所有远程地址别名</p><p><code>git remote add 别名 远程地址</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo %  git remote -v</span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git remote add gitDemo https://github.com/fenfeicn/git-demo.git</span><br><span class="line">hck@hckdeMacBook-Pro git-demo %  git remote -v</span><br><span class="line">gitDemohttps://github.com/fenfeicn/git-demo.git (fetch)</span><br><span class="line">gitDemohttps://github.com/fenfeicn/git-demo.git (push)</span><br></pre></td></tr></table></figure><h3 id="6-2-2、推送本地分支到远程仓库"><a href="#6-2-2、推送本地分支到远程仓库" class="headerlink" title="6.2.2、推送本地分支到远程仓库"></a>6.2.2、推送本地分支到远程仓库</h3><p>基本语法:</p><p><code>git push 别名 分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % git push gitDemo master</span><br></pre></td></tr></table></figure><p>如果提交出现如下错误:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access &#x27;https://github.com/fenfeicn/git-demo.git/&#x27;: LibreSSL SSL_read: error:02FFF03C:system library:func(4095):Operation timed out, errno 60</span><br></pre></td></tr></table></figure><p>我们执行以下命令,再次提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset https.proxy</span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">再次提交,此时提交成功</span></span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git push gitDemo master                </span><br><span class="line">Enumerating objects: 12, done.</span><br><span class="line">Counting objects: 100% (12/12), done.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (8/8), done.</span><br><span class="line">Writing objects: 100% (12/12), 901 bytes | 901.00 KiB/s, done.</span><br><span class="line">Total 12 (delta 4), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (4/4), done.</span><br><span class="line">To https://github.com/fenfeicn/git-demo.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221107212844729-20221107212911244.png" alt="image-20221107212844729"></p><h3 id="6-2-3、克隆远程仓库到本地"><a href="#6-2-3、克隆远程仓库到本地" class="headerlink" title="6.2.3、克隆远程仓库到本地"></a>6.2.3、克隆远程仓库到本地</h3><p>基本语法:</p><p><code>git clone 远程地址 </code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro test % git clone https://github.com/fenfeicn/git-demo.git</span><br><span class="line">Cloning into &#x27;git-demo&#x27;...</span><br><span class="line">remote: Enumerating objects: 12, done.</span><br><span class="line">remote: Counting objects: 100% (12/12), done.</span><br><span class="line">remote: Compressing objects: 100% (4/4), done.</span><br><span class="line">remote: Total 12 (delta 4), reused 12 (delta 4), pack-reused 0</span><br><span class="line">Receiving objects: 100% (12/12), done.</span><br><span class="line">Resolving deltas: 100% (4/4), done.</span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git remote -v </span><br><span class="line">originhttps://github.com/fenfeicn/git-demo.git (fetch)</span><br><span class="line">originhttps://github.com/fenfeicn/git-demo.git (push)</span><br></pre></td></tr></table></figure><p>clone 会做如下操作。1、拉取代码。2、初始化本地仓库。3、创建别名</p><h3 id="6-2-4、邀请加入团队"><a href="#6-2-4、邀请加入团队" class="headerlink" title="6.2.4、邀请加入团队"></a>6.2.4、邀请加入团队</h3><blockquote><p>选择邀请合作者</p></blockquote><p><img src="https://images.hckun.cn/image-20221107214109079.png" alt="image-20221107214109079"></p><blockquote><p>填入想要合作的人</p></blockquote><p><img src="https://images.hckun.cn/image-20221107214609063.png" alt="image-20221107214609063"></p><blockquote><p>复 制 地 址 并 通 过 微 信 钉 钉 等 方 式 发 送 给 该 用 户</p></blockquote><p><img src="https://images.hckun.cn/image-20221107214657352.png" alt="image-20221107214657352"></p><blockquote><p>在受邀请的账号中的地址栏复制收到邀请的链接，点击接受邀请</p></blockquote><p><img src="https://images.hckun.cn/image-20221107214818169.png" alt="image-20221107214818169"></p><blockquote><p>在受邀请的账号中修改内容并 <strong>push</strong> 到远程仓库</p></blockquote><p><img src="https://images.hckun.cn/image-20221107215218493.png" alt="image-20221107215218493"></p><blockquote><p>回到创建人GitHub的仓库中,可以看到刚邀请伙伴提交的代码</p></blockquote><p><img src="https://images.hckun.cn/image-20221107230459722.png" alt="image-20221107230459722"></p><h3 id="6-2-5、拉取远程库内容"><a href="#6-2-5、拉取远程库内容" class="headerlink" title="6.2.5、拉取远程库内容"></a>6.2.5、拉取远程库内容</h3><p>基本语法:</p><p><code>git pull 远程库地址别名 远程分支名</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">hck@hckdeMacBook-Pro git-demo % cat hello.txt </span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git host-fixed add</span><br><span class="line">hck@hckdeMacBook-Pro git-demo % git pull gitDemo master</span><br><span class="line">remote: Enumerating objects: 6, done.</span><br><span class="line">remote: Counting objects: 100% (6/6), done.</span><br><span class="line">remote: Compressing objects: 100% (3/3), done.</span><br><span class="line">remote: Total 4 (delta 1), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (4/4), 1.25 KiB | 318.00 KiB/s, done.</span><br><span class="line">From https://github.com/fenfeicn/git-demo</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">   0b04283..f7c6919  master     -&gt; gitDemo/master</span><br><span class="line">Updating 8c9b4d9..f7c6919</span><br><span class="line">Fast-forward</span><br><span class="line"> hello.txt | 2 ++</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line">hck@hckdeMacBook-Pro git-demo % cat hello.txt </span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git</span><br><span class="line">hello git master add </span><br><span class="line">hello git host-fixed add</span><br><span class="line">hello friend</span><br></pre></td></tr></table></figure><h2 id="6-3、跨团队协作"><a href="#6-3、跨团队协作" class="headerlink" title="6.3、跨团队协作"></a>6.3、跨团队协作</h2><p>将远程仓库的地址复制发给邀请跨团队协作的人</p><p><img src="https://images.hckun.cn/image-20221107231012640.png" alt="image-20221107231012640">在接收人的GitHub账号里的地址栏复制收到的链接，然后点击<code>Fork</code>将项目叉到自</p><p>己的本地仓库</p><p><img src="https://images.hckun.cn/image-20221107231227080.png" alt="image-20221107231227080"></p><p>在线编辑叉取过来的文件</p><p><img src="https://images.hckun.cn/image-20221107231430594.png" alt="image-20221107231430594"></p><p>编辑完毕后，填写描述信息并点击左下角绿色按钮提交</p><p><img src="https://images.hckun.cn/image-20221107231518110.png" alt="image-20221107231518110">接下来点击上方的<code>Pull</code> 请求，并创建一个新的请求</p><p><img src="https://images.hckun.cn/image-20221107231655443.png" alt="image-20221107231655443">回到仓库所有者GitHub账号可以看到有一个<code>Pull request</code> 请求</p><p><img src="https://images.hckun.cn/image-20221107231853030.png" alt="image-20221107231853030"></p><p>检查没问题,直接合并代码</p><p><img src="https://images.hckun.cn/image-20221107232046788.png" alt="image-20221107232046788"></p><h1 id="7、IDEA集成Git"><a href="#7、IDEA集成Git" class="headerlink" title="7、IDEA集成Git"></a>7、IDEA集成Git</h1><h2 id="7-1、定位Git程序"><a href="#7-1、定位Git程序" class="headerlink" title="7.1、定位Git程序"></a>7.1、定位Git程序</h2><p>打开Idea设置-选择版本控制-Git-选择Git可执行文件路径-点击测试若出现Git版本则代表添加成功</p><p><img src="https://images.hckun.cn/image-20221108223240001.png" alt="image-20221108223240001"></p><h2 id="7-2、初始化本地库"><a href="#7-2、初始化本地库" class="headerlink" title="7.2、初始化本地库"></a>7.2、初始化本地库</h2><p>点击工具栏VCS-选择创建Git仓库</p><p><img src="https://images.hckun.cn/image-20221108223553819.png" alt="image-20221108223553819"></p><p><img src="https://images.hckun.cn/image-20221108223657034.png" alt="image-20221108223657034"></p><h2 id="7-3、添加到暂存区"><a href="#7-3、添加到暂存区" class="headerlink" title="7.3、添加到暂存区"></a>7.3、添加到暂存区</h2><p>右键点击要添加到暂存区文件选择 Git -&gt; 添加将文件添加到暂存区</p><p><img src="https://images.hckun.cn/image-20221108223816121.png" alt="image-20221108223816121"></p><h2 id="7-4、提交到本地库"><a href="#7-4、提交到本地库" class="headerlink" title="7.4、提交到本地库"></a>7.4、提交到本地库</h2><p>右键点击要添加到本地库文件选择 Git -&gt; 提交文件将文件添加到暂存区</p><p><img src="https://images.hckun.cn/image-20221108224016525.png" alt="image-20221108224016525"></p><h2 id="7-5、切换版本"><a href="#7-5、切换版本" class="headerlink" title="7.5、切换版本"></a>7.5、切换版本</h2><p>在 IDEA 的左下角，点击 Version Control，然后点击 Log 查看版本</p><p><img src="https://images.hckun.cn/image-20221108224453536.png" alt="image-20221108224453536"></p><p>右键选择要切换的版本，然后在菜单里点击 签出修订</p><p><img src="https://images.hckun.cn/image-20221108224619143.png" alt="image-20221108224619143"></p><h2 id="7-6、创建分支"><a href="#7-6、创建分支" class="headerlink" title="7.6、创建分支"></a>7.6、创建分支</h2><p>选择 Git，点击 新建分支按钮</p><p><img src="https://images.hckun.cn/image-20221108224816568.png" alt="image-20221108224816568"></p><p>在弹出的 Git Branches 框里，点击新分支 按钮</p><p><img src="https://images.hckun.cn/image-20221108224902092.png" alt="image-20221108224902092"></p><p>填写分支名称，创建 hot-fix 分支</p><p><img src="https://images.hckun.cn/image-20221108225004543.png" alt="image-20221108225004543"></p><p>然后再 IDEA 的右下角看到 hot-fix，说明分支创建成功，并且当前已经切换成 hot-fix 分 </p><p>支</p><p><img src="https://images.hckun.cn/image-20221108225115397.png" alt="image-20221108225115397"></p><h2 id="7-7、切换分支"><a href="#7-7、切换分支" class="headerlink" title="7.7、切换分支"></a>7.7、切换分支</h2><p>鼠标右键master分支，选择签出,切换到 master 分支</p><p><img src="https://images.hckun.cn/image-20221108225337815.png" alt="image-20221108225337815"></p><p>然后在 IDEA 窗口的右下角看到了 master，说明 master 分支切换成功</p><p><img src="https://images.hckun.cn/image-20221108225521312.png" alt="image-20221108225521312"></p><h2 id="7-8、合并分支"><a href="#7-8、合并分支" class="headerlink" title="7.8、合并分支"></a>7.8、合并分支</h2><p>在 IDEA 窗口的右下角，点击master将 hot-fix 分支合并到当前 master 分支</p><p><img src="https://images.hckun.cn/image-20221108225734283.png" alt="image-20221108225734283"></p><p>如果代码没有冲突，分支直接合并成功，分支合并成功以后，代码自动提交，无需手动</p><p>提交本地库</p><p><img src="https://images.hckun.cn/image-20221108225848183.png" alt="image-20221108225848183"></p><h2 id="7-9、解决冲突"><a href="#7-9、解决冲突" class="headerlink" title="7.9、解决冲突"></a>7.9、解决冲突</h2><p>如果 master 分支和 hot-fix 分支都修改了代码，在合并分支的时候就会发生冲突</p><p><img src="https://images.hckun.cn/image-20221108230019618.png" alt="image-20221108230019618"></p><p><img src="https://images.hckun.cn/image-20221108230252754.png" alt="image-20221108230252754"></p><p>我们现在站在 master 分支上合并 hot-fix 分支，就会发生代码冲突</p><p><img src="https://images.hckun.cn/image-20221108230558955.png" alt="image-20221108230558955"></p><p>点击合并按钮,进行手动合并</p><p><img src="https://images.hckun.cn/image-20221108231005710.png" alt="image-20221108231005710"></p><p>手动合并完代码以后，点击右下角的 应用 按钮,代码冲突解决，自动提交本地库</p><p><img src="https://images.hckun.cn/image-20221108231114162.png" alt="image-20221108231114162"></p><h1 id="8、IDEA集成GitHub"><a href="#8、IDEA集成GitHub" class="headerlink" title="8、IDEA集成GitHub"></a>8、IDEA集成GitHub</h1><h2 id="8-1、设置GitHub账号"><a href="#8-1、设置GitHub账号" class="headerlink" title="8.1、设置GitHub账号"></a>8.1、设置GitHub账号</h2><p>打开IDEA设置,点击版本控制,GitHub,然后点击+号,这里我们使用令牌登录</p><p><img src="https://images.hckun.cn/image-20221108231358678.png" alt="image-20221108231358678"></p><p>然后去 GitHub 账户上设置 token</p><p><img src="https://images.hckun.cn/image-20221108231634273.png" alt="image-20221108231634273"></p><p><img src="https://images.hckun.cn/image-20221108231726998.png" alt="image-20221108231726998"></p><p><img src="https://images.hckun.cn/image-20221108232743479.png" alt="image-20221108232743479"></p><p>随便起个名字,点击创建即可,然后得到token,将token填写IDEA配置中</p><p><img src="https://images.hckun.cn/image-20221108232015000.png" alt="image-20221108232015000"></p><h2 id="8-2、分享工程到GitHub"><a href="#8-2、分享工程到GitHub" class="headerlink" title="8.2、分享工程到GitHub"></a>8.2、分享工程到GitHub</h2><p><img src="https://images.hckun.cn/image-20221108233549529.png" alt="image-20221108233549529"></p><p><img src="https://images.hckun.cn/image-20221108233609439.png" alt="image-20221108233609439"></p><p>来到 GitHub 中发现已经帮我们创建好了 gitTest 的远程仓库</p><h2 id="8-3、push本地库到远程库"><a href="#8-3、push本地库到远程库" class="headerlink" title="8.3、push本地库到远程库"></a>8.3、push本地库到远程库</h2><p>右键点击项目，可以将当前分支的内容 push 到 GitHub 的远程仓库中</p><p><img src="https://images.hckun.cn/image-20221108233657377.png" alt="image-20221108233657377"></p><p><img src="https://images.hckun.cn/image-20221108233715656.png" alt="image-20221108233715656"></p><p><img src="https://images.hckun.cn/image-20221108233726936.png" alt="image-20221108233726936"></p><p><img src="https://images.hckun.cn/image-20221108233738253.png" alt="image-20221108233738253"></p><blockquote><p>​    注意：push 是将本地库代码推送到远程库，如果本地库代码跟远程库代码版本不一致，</p><p>push 的操作是会被拒绝的。也就是说，要想 push 成功，一定要保证本地库的版本要比远程</p><p>库的版本高！因此一个成熟的程序员在动手改本地代码之前，一定会先检查下远程库跟本地</p><p>代码的区别！如果本地的代码版本已经落后，切记要先 pull 拉取一下远程库的代码，将本地</p><p>代码更新到最新以后，然后再修改，提交，推送！</p></blockquote><h2 id="8-4、pull拉取远程库到本地库"><a href="#8-4、pull拉取远程库到本地库" class="headerlink" title="8.4、pull拉取远程库到本地库"></a>8.4、pull拉取远程库到本地库</h2><p>右键点击项目，可以将远程仓库的内容 pull 到本地仓库</p><p><img src="https://images.hckun.cn/image-20221108233832116.png" alt="image-20221108233832116"></p><p><img src="https://images.hckun.cn/image-20221108233856192.png" alt="image-20221108233856192"></p><blockquote><p>注意：pull 是拉取远端仓库代码到本地，如果远程库代码和本地库代码不一致，会自动</p><p>合并，如果自动合并失败，还会涉及到手动解决冲突的问题</p></blockquote><h2 id="8-5、clone克隆远程库到本地"><a href="#8-5、clone克隆远程库到本地" class="headerlink" title="8.5、clone克隆远程库到本地"></a>8.5、clone克隆远程库到本地</h2><p><img src="https://images.hckun.cn/image-20221108233950058.png" alt="image-20221108233950058"></p><p><img src="https://images.hckun.cn/image-20221108234001890.png" alt="image-20221108234001890"></p><p>为 clone 下来的项目创建一个工程，然后点击 Next</p><p><img src="https://images.hckun.cn/image-20221108234035382.png" alt="image-20221108234035382"></p><p><img src="https://images.hckun.cn/image-20221108234044587.png" alt="image-20221108234044587"></p><p><img src="https://images.hckun.cn/image-20221108234059920.png" alt="image-20221108234059920"></p><h1 id="9、国内代码托管中心码云"><a href="#9、国内代码托管中心码云" class="headerlink" title="9、国内代码托管中心码云"></a>9、国内代码托管中心码云</h1><h2 id="9-1、简介"><a href="#9-1、简介" class="headerlink" title="9.1、简介"></a>9.1、简介</h2><p>​    众所周知，GitHub 服务器在国外，使用 GitHub 作为项目托管网站，如果网速不好的话，</p><p>严重影响使用体验，甚至会出现登录不上的情况。针对这个情况，大家也可以使用国内的项</p><p>目托管网站-码云</p><p>​    码云是开源中国推出的基于 Git 的代码托管服务中心，网址是 <a href="https://gitee.com/">https://gitee.com/</a> ，使用</p><p>方式跟 GitHub 一样，而且它还是一个中文网站，如果你英文不是很好它是最好的选择</p><h2 id="9-2、码云创建远程库"><a href="#9-2、码云创建远程库" class="headerlink" title="9.2、码云创建远程库"></a>9.2、码云创建远程库</h2><p>​    用已注册的账号登录码云</p><p>点击首页右上角的加号，选择下面的新建仓库</p><p><img src="https://images.hckun.cn/image-20221108234444997.png" alt="image-20221108234444997"></p><p>填写仓库名称，路径和选择是否开源（共开库或私有库）</p><p><img src="https://images.hckun.cn/image-20221108234532164.png" alt="image-20221108234532164"></p><p>最后根据需求选择分支模型，然后点击创建按钮</p><p>远程库创建好以后，就可以看到 HTTPS 和 SSH 的链接</p><p><img src="https://images.hckun.cn/image-20221108234628121.png" alt="image-20221108234628121"></p><h2 id="9-3、IDEA集成码云"><a href="#9-3、IDEA集成码云" class="headerlink" title="9.3、IDEA集成码云"></a>9.3、IDEA集成码云</h2><p>Idea 默认不带码云插件，我们第一步要安装 Gitee 插件</p><p><img src="https://images.hckun.cn/image-20221108234755831.png" alt="image-20221108234755831"></p><p>Idea 链接码云和链接 GitHub 几乎一样，安装成功后，重启 Idea</p><p>然后在码云插件里面添加码云帐号，我们就可以用 Idea 连接码云了</p><p><img src="https://images.hckun.cn/image-20221108234955160.png" alt="image-20221108234955160"></p><h2 id="9-4、IDEA连接码云"><a href="#9-4、IDEA连接码云" class="headerlink" title="9.4、IDEA连接码云"></a>9.4、IDEA连接码云</h2><p>​    Idea 连接码云和连接 GitHub 几乎一样，首先在 Idea 里面创建一个工程，初始化 git 工</p><p>程，然后将代码添加到暂存区，提交到本地库，这些步骤上面已经讲过，此处不再赘述</p><p>将本地代码push到码云远程库</p><p><img src="https://images.hckun.cn/image-20221108235448918.png" alt="image-20221108235448918"></p><p><img src="https://images.hckun.cn/image-20221108235538062.png" alt="image-20221108235538062"></p><p><img src="https://images.hckun.cn/image-20221108235602038.png" alt="image-20221108235602038"></p><p>在码云远程仓库中可以看到我们的推送</p><p><img src="https://images.hckun.cn/image-20221108235643263.png" alt="image-20221108235643263"></p><p>只要码云远程库链接定义好以后，对码云远程库进行 pull 和 clone 的操作和 Github 一</p><p>致，此处不再赘述</p><h2 id="9-5、码云复制GitHub项目"><a href="#9-5、码云复制GitHub项目" class="headerlink" title="9.5、码云复制GitHub项目"></a>9.5、码云复制GitHub项目</h2><p>码云提供了直接复制 GitHub 项目的功能，方便我们做项目的迁移和下载</p><p><img src="https://images.hckun.cn/image-20221108235905140.png" alt="image-20221108235905140"></p><p>将 GitHub 的远程库 HTTPS 链接复制过来，点击创建按钮即可</p><p><img src="https://images.hckun.cn/image-20221109000011004.png" alt="image-20221109000011004"></p><p><img src="https://images.hckun.cn/image-20221109000050812.png" alt="image-20221109000050812"></p><p>如果 GitHub 项目更新了以后，在码云项目端可以手动重新同步，进行更新</p><p><img src="https://images.hckun.cn/image-20221109000122810.png" alt="image-20221109000122810"></p><h1 id="10、自建代码托管平台GitLab-了解即可"><a href="#10、自建代码托管平台GitLab-了解即可" class="headerlink" title="10、自建代码托管平台GitLab(了解即可)"></a>10、自建代码托管平台GitLab(了解即可)</h1><h2 id="10-1、GitLab简介"><a href="#10-1、GitLab简介" class="headerlink" title="10.1、GitLab简介"></a>10.1、GitLab简介</h2><p>​    GitLab 是由 GitLabInc.开发，使用 MIT 许可证的基于网络的 Git 仓库管理工具，且具有</p><p>wiki 和 issue 跟踪功能。使用 Git 作为代码管理工具，并在此基础上搭建起来的 web 服务</p><p>​    GitLab 由乌克兰程序员 DmitriyZaporozhets 和 ValerySizov 开发，它使用 Ruby 语言写</p><p>成。后来，一些部分用 Go 语言重写。截止 2018 年 5 月，该公司约有 290 名团队成员，以</p><p>及 2000 多名开源贡献者。GitLab 被 IBM，Sony，JülichResearchCenter，NASA，Alibaba，</p><p>Invincea，O’ReillyMedia，Leibniz-Rechenzentrum(LRZ)，CERN，SpaceX 等组织使用</p><h2 id="10-2、GitLab官网地址"><a href="#10-2、GitLab官网地址" class="headerlink" title="10.2、GitLab官网地址"></a>10.2、GitLab官网地址</h2><p>官网地址：<a href="https://about.gitlab.com/">https://about.gitlab.com/</a></p><p>安装说明：<a href="https://about.gitlab.com/installation/">https://about.gitlab.com/installation/</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础入门</title>
      <link href="/post/30720df8.html"/>
      <url>/post/30720df8.html</url>
      
        <content type="html"><![CDATA[<p>本文参考:<a href="https://www.bilibili.com/video/BV1H64y1U7GJ/?spm_id_from=333.999.0.0&vd_source=5bcea3f1cf65eb3c1d5d1bfe60ef886d">[韩顺平讲MySQL]零基础一周学会MySQL</a></p><h2 id="1、MySQL5-7-19安装"><a href="#1、MySQL5-7-19安装" class="headerlink" title="1、MySQL5.7.19安装"></a>1、MySQL5.7.19安装</h2><ol><li><p>下载安装包并解压到无中文路径文件夹下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">下载地址:https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.19-winx64.zip</span><br></pre></td></tr></table></figure></li><li><p>添加环境变量</p><p>电脑-属性-高级系统设置-环境变量，在Path 环境变量增加mysql的安装目录\bin目录</p><p><img src="https://images.hckun.cn/image-20221031215040585.png" alt="image-20221031215040585"></p></li><li><p>在D:\hspmysql\mysql-5.7.19-winx64 目录下下创建 my.ini 文件,写入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line"></span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置为自己MYSQL的安装目录</span></span><br><span class="line"></span><br><span class="line">basedir=D:\hspmysql\mysql-5.7.19-winx64\</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置为MYSQL的数据目录</span></span><br><span class="line"></span><br><span class="line">datadir=D:\hspmysql\mysql-5.7.19-winx64\data\</span><br><span class="line"></span><br><span class="line">port=3306</span><br><span class="line"></span><br><span class="line">character_set_server=utf8</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">跳过安全检查</span></span><br><span class="line"></span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure></li><li><p>使用<strong>管理员身份</strong>打开 cmd , 并切换到 D:\hspmysql\mysql-5.7.19-winx64\bin 目录下</p><p>执行<code>mysqld -install</code></p></li><li><p>初始化数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure --user=mysql</span><br></pre></td></tr></table></figure><p>如果执行成功，会在<code>my.ini</code>同级目录生成 data目录</p></li><li><p>启动mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net start mysql #启动mysql</span><br><span class="line">net stop mysql  #停止mysql</span><br></pre></td></tr></table></figure></li><li><p>进入mysql 管理终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p #回车无需输入密码</span><br></pre></td></tr></table></figure></li><li><p>修改root 用户密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql; </span><br><span class="line">update user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27; and Host=&#x27;localhost&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>修改my.ini , 再次进入就会进行权限验证了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">skip-grant-tables</span> </span><br></pre></td></tr></table></figure></li><li><p>重新启动mysql</p></li></ol><h2 id="2、数据库操作"><a href="#2、数据库操作" class="headerlink" title="2、数据库操作"></a>2、数据库操作</h2><h3 id="2-1、创建数据库"><a href="#2-1、创建数据库" class="headerlink" title="2.1、创建数据库"></a>2.1、创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法:<span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] db_name</span><br><span class="line">[create_specification[,create_specification]...]</span><br><span class="line">create_specification</span><br><span class="line">[<span class="keyword">DEFAULT</span>] <span class="type">CHARACTER</span> <span class="keyword">SET</span> charset_name</span><br><span class="line">[<span class="keyword">DEFAULT</span>] <span class="keyword">COLLATE</span> collation_name</span><br></pre></td></tr></table></figure><blockquote><ol><li>CHARACTER SET:指定数据库采用的字符集,如果不指定字符集,默认utf8</li><li>COLLATE:指定数据库字符集的校对规则(常用的utf8_bin[区分大小写],utf8_general_ci[不区分大小写])</li><li>注意:默认是utf8_general_ci</li></ol></blockquote><ul><li><p>创建一个数据库db01</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE db01</span><br></pre></td></tr></table></figure></li><li><p>创建一个字符集为utf8的db02数据库并指定校验规则为utf8_general_ci</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE db02 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci</span><br></pre></td></tr></table></figure></li><li><p>创建一个字符集为utf8的db03数据库并指定校验规则为utf8_bin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE db03 CHARACTER SET utf8 COLLATE utf8_bin</span><br></pre></td></tr></table></figure><p>在db02和db03中创建一张相同的表,插入相同的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (id <span class="type">INT</span>, name <span class="type">VARCHAR</span>(<span class="number">25</span>))</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;Tom&#x27;</span>)</span><br></pre></td></tr></table></figure><p>分别在两个数据库中执行下面查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;tom&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>我们发现在db02中查询出了两条数据,而在db03中只查询出了一条数据;这种因为db02数据库采用的校验规则为utf8_general_ci不区分大小写;db03数据库采用的utf8_bin的校验规则是区分大小写的。</p></blockquote></li></ul><h3 id="2-2、查看所有数据库"><a href="#2-2、查看所有数据库" class="headerlink" title="2.2、查看所有数据库"></a>2.2、查看所有数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES</span><br></pre></td></tr></table></figure><h3 id="2-3、查看当前数据库的定义信息"><a href="#2-3、查看当前数据库的定义信息" class="headerlink" title="2.3、查看当前数据库的定义信息"></a>2.3、查看当前数据库的定义信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE db02</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE `db02` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span></span><br></pre></td></tr></table></figure><p>我们在创建数据库、表的时候，为了规避关键字，可以使用反引号解决。</p><h3 id="2-4、删除数据库"><a href="#2-4、删除数据库" class="headerlink" title="2.4、删除数据库"></a>2.4、删除数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE db01</span><br></pre></td></tr></table></figure><h3 id="2-5、备份数据库"><a href="#2-5、备份数据库" class="headerlink" title="2.5、备份数据库"></a>2.5、备份数据库</h3><p>​    在DOS命令中执行</p><ul><li>备份整个数据库</li></ul><p>​        mysqldump -u 用户名 -p -B  数据库1  数据库2  数据库n  &gt; 文件名.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u root <span class="operator">-</span>p <span class="operator">-</span>B db02 <span class="operator">&gt;</span>E:\\copy.sql</span><br></pre></td></tr></table></figure><ul><li><p>备份数据库中指定表</p><p>mysqldump -u 用户名 -p 数据库 表1 表2 表n &gt;文件名.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u root <span class="operator">-</span>p db02 <span class="keyword">user</span> <span class="operator">&gt;</span> E:\\user.sql</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-6、恢复数据库"><a href="#2-6、恢复数据库" class="headerlink" title="2.6、恢复数据库"></a>2.6、恢复数据库</h3><p>​    进入MySQL命令行再执行</p><p>​    sourse  文件名.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> source E:\\copy.sql</span><br></pre></td></tr></table></figure><h2 id="3-表结构操作"><a href="#3-表结构操作" class="headerlink" title="3.表结构操作"></a>3.表结构操作</h2><h3 id="3-1、创建表"><a href="#3-1、创建表" class="headerlink" title="3.1、创建表"></a>3.1、创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name(</span><br><span class="line">field1 datatype,</span><br><span class="line">    field2 datatype,</span><br><span class="line">    field3 datatype</span><br><span class="line">)<span class="type">character</span> <span class="keyword">set</span> 字符集<span class="keyword">collate</span>校对规则engine 存储引擎</span><br><span class="line">field:指定列表datatype:指定列类型(字段类型)</span><br><span class="line"><span class="type">character</span> <span class="keyword">set</span>:如不指定则为所在数据库字符集</span><br><span class="line"><span class="keyword">collate</span>: 如不指定则为所在数据库校对规则</span><br><span class="line">engine:引擎</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一张user表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>(</span><br><span class="line">`id` <span class="type">INT</span>,</span><br><span class="line">`name`<span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">`birthday` <span class="type">DATE</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="3-2、MySQL常用数据类型"><a href="#3-2、MySQL常用数据类型" class="headerlink" title="3.2、MySQL常用数据类型"></a>3.2、MySQL常用数据类型</h3><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><table><thead><tr><th align="center">数据类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">BIT(M)</td><td align="center">位类型。M指定位数，默认值是1，范围1-64</td></tr><tr><td align="center">TINYINT[UNSIGNED]占1个字节</td><td align="center">带符号的范围是-128到127。无符号0-255。默认是有符号</td></tr><tr><td align="center">SMALLINT[UNSIGEND]占2个字节</td><td align="center">带符号是-2^15到2^15-1。无符号0-2^16-1</td></tr><tr><td align="center">MEDIUMINT[UNSIGEND]3个字节</td><td align="center">到符号是-2^23-2^23-1。无符号0-2^64-1</td></tr><tr><td align="center">INT[UNSIGEND]4个字节</td><td align="center">带符号是-2^31-2^31-1。无符号是0-2^32-1</td></tr><tr><td align="center">BIGINT[UNSIGEND]8个字节</td><td align="center">带符号是-2^63-1-2^63-1。无符号是0-2^64-1</td></tr><tr><td align="center">FLOAT[UNSIGEND]</td><td align="center">占用空间4个字节,单精度</td></tr><tr><td align="center">DOUBLE[UNSIGEND]</td><td align="center">表示比float经度更大的小数,占用空间8个字节</td></tr><tr><td align="center">DECIMAL(M,D)[UNSIGEND]8个字节</td><td align="center">定点数M指定长度,D表示小数点的位数。如果D是0,则值没有小数或分数部分。M最大是65，D最大是30。如果D被省略，默认是0。如果M被省略，默认是10</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--无符号有符号的区别</span></span><br><span class="line"><span class="comment">--创建TINYINT类型id,默认是有符号范围为-128-127</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1(</span><br><span class="line">`id` TINYINT</span><br><span class="line">)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span>(<span class="number">-129</span>) <span class="comment">--Out of range value for column &#x27;id&#x27; at row 1</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span>(<span class="number">-128</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span>(<span class="number">128</span>)<span class="comment">--Out of range value for column &#x27;id&#x27; at row 1</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 <span class="keyword">VALUES</span>(<span class="number">127</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建TINYINT UNSIGNED类型,无符号类型范围0-255</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t2(</span><br><span class="line">`id` TINYINT UNSIGNED</span><br><span class="line">)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t2 <span class="keyword">VALUES</span>(<span class="number">-1</span>)<span class="comment">--Out of range value for column &#x27;id&#x27; at row 1</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t2 <span class="keyword">VALUES</span>(<span class="number">256</span>)<span class="comment">--Out of range value for column &#x27;id&#x27; at row 1</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t2 <span class="keyword">VALUES</span>(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t2</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 演示decimal、float、double使用</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t3(</span><br><span class="line">num1 <span class="type">FLOAT</span>,</span><br><span class="line">num2 <span class="keyword">DOUBLE</span>,</span><br><span class="line">num3 <span class="type">DECIMAL</span>(<span class="number">30</span>,<span class="number">20</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t3 <span class="keyword">VALUES</span>(<span class="number">88.12345678</span>,<span class="number">88.123456789123456</span>,<span class="number">88.123456789123456789</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t3</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20211024215955918.png" alt="image-20211024215955918"></p><h4 id="文本、二进制类型"><a href="#文本、二进制类型" class="headerlink" title="文本、二进制类型"></a>文本、二进制类型</h4><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>CHAR(size) char(20)</td><td>固定长度字符串最大255</td></tr><tr><td>VARCHAR(size) varchar(20)</td><td>可变长度字符串0-65535[即2^16-1]</td></tr><tr><td>BLOB    LONGBLOB</td><td>二进制数据BLOB[0-2^16-1]    LONGBLOB[0-2^32-1]</td></tr><tr><td>TEXT    LONGTEXT</td><td>文本Text[0-2^16-1]    LONGTEXT[0-2^32]</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CHAR(size)</span></span><br><span class="line"><span class="comment">-- 固定长度字符串 最大255字符</span></span><br><span class="line"><span class="comment">-- VARCHAR(size)0-65535字节</span></span><br><span class="line"><span class="comment">-- 可变长度字符串 最大65532字节 [utf8编码最大21844字符 1-3个字节用于记录大小]</span></span><br><span class="line"><span class="comment">-- 如果表的编码是utf8 varchar(size) size = (65535-3)/3=21844</span></span><br><span class="line"><span class="comment">-- 如果表的编码是 gbk varchar(size) size = (65535-3)/2=32766</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t4(</span><br><span class="line">`name` <span class="type">CHAR</span>(<span class="number">255</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t5(</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">21844</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t6(</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">32766</span>)</span><br><span class="line">)<span class="type">CHARACTER</span> <span class="keyword">SET</span> gbk</span><br></pre></td></tr></table></figure><h4 id="时间日期类型"><a href="#时间日期类型" class="headerlink" title="时间日期类型"></a>时间日期类型</h4><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>DATE/DATETIME/Time/TimeStamp</td><td>DATE存储年月日;DATETIME存储年月日时分秒;Time存储时分秒;TimeStamp存储时间戳</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 日期类型测试</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t7(</span><br><span class="line">birthday <span class="type">DATE</span>,</span><br><span class="line">jobdateDATETIME,</span><br><span class="line">startDate <span class="type">TIME</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t7 <span class="keyword">VALUES</span>(<span class="string">&#x27;2021-10-24&#x27;</span>,<span class="string">&#x27;2021-10-24 22:39:30&#x27;</span>, <span class="string">&#x27;22:40:00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t7</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20211024224039141.png" alt="image-20211024224039141"></p><h4 id="SQL练习"><a href="#SQL练习" class="headerlink" title="SQL练习"></a>SQL练习</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t8(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">sex <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">birthday <span class="type">DATE</span>,</span><br><span class="line">entry_date DATETIME,</span><br><span class="line">job <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">salary <span class="keyword">DOUBLE</span>,</span><br><span class="line">resume TEXT</span><br><span class="line">)<span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci ENGINE INNODB</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t8 <span class="keyword">VALUES</span>(<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;2021-10-24&#x27;</span>, <span class="string">&#x27;2021-10-24 22:52:30&#x27;</span>,<span class="string">&#x27;程序员&#x27;</span>, <span class="number">5500</span>, <span class="string">&#x27;我是张三&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t8</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20211024225413163.png" alt="image-20211024225413163"></p><h3 id="3-3、修改表"><a href="#3-3、修改表" class="headerlink" title="3.3、修改表"></a>3.3、修改表</h3><ul><li><p>添加列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename</span><br><span class="line"><span class="keyword">ADD</span>(<span class="keyword">column</span> datatype [<span class="keyword">DEFAULT</span> expr]  [,colum datatype]...)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给t8表增加一个字段 image 类型为varchar 放在job后面</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t8 <span class="keyword">ADD</span> image <span class="type">VARCHAR</span>(<span class="number">100</span>) AFTER job</span><br></pre></td></tr></table></figure></li><li><p>修改列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename</span><br><span class="line">MODIFY(<span class="keyword">column</span> datatype [<span class="keyword">DEFAULT</span> expr] [,<span class="keyword">column</span> datatype]...)</span><br><span class="line"><span class="comment">-- 修改t8表job字段的长度为100</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t8 MODIFY job <span class="type">VARCHAR</span>(<span class="number">100</span>)</span><br></pre></td></tr></table></figure></li><li><p>删除列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tablename</span><br><span class="line"><span class="keyword">DROP</span> (<span class="keyword">column</span>)</span><br><span class="line"><span class="comment">-- 删除t8表的性别字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t8 <span class="keyword">DROP</span> sex</span><br></pre></td></tr></table></figure></li><li><p>修改表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> t8 <span class="keyword">TO</span> t</span><br></pre></td></tr></table></figure></li><li><p>修改表的字符集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t9 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8</span><br></pre></td></tr></table></figure></li><li><p>修改字段名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t9 CHANGE `name` user_name <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-4、查看表结构"><a href="#3-4、查看表结构" class="headerlink" title="3.4、查看表结构"></a>3.4、查看表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> t8</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20211024230047397.png" alt="image-20211024230047397"></p><h3 id="3-5、删除表"><a href="#3-5、删除表" class="headerlink" title="3.5、删除表"></a>3.5、删除表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t1</span><br></pre></td></tr></table></figure><h2 id="4、数据库CRUD"><a href="#4、数据库CRUD" class="headerlink" title="4、数据库CRUD"></a>4、数据库CRUD</h2><h3 id="4-1、INSERT"><a href="#4-1、INSERT" class="headerlink" title="4.1、INSERT"></a>4.1、INSERT</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法: <span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name [(<span class="keyword">column</span> [,column...])]</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="keyword">value</span> [, value...])</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> good(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">good_name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">price <span class="keyword">DOUBLE</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加单个数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> good (id,good_name,price) <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;电脑&#x27;</span>,<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">--添加多条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> good (id,good_name,price) <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;手机&#x27;</span>,<span class="number">1000</span>),(<span class="number">3</span>,<span class="string">&#x27;电视机&#x27;</span>,<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> good</span><br></pre></td></tr></table></figure><blockquote><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h4><ol><li><p>插入的数据应与字段的数据类型相同。比如把’abc’添加到int类型会错误</p></li><li><p>数据的长度应在列的规定范围内,例如:不能将一个长度为80的字符串加入到长度为40的列中</p></li><li><p>在values中列出的数据位置必须与被加入的列的排列位置相对应</p></li><li><p>字符和日期类型数据应包含在单引号中</p></li><li><p>列可以插入空值[前提是该字段允许为空]</p></li><li><p>insert into tab_name (列名…) values (),(),()形式添加多条记录</p></li><li><p>如果是给表中的所有字段添加数据,可以不写前面的字段名称</p></li><li><p>默认值的使用,当不给某个字段值时,如果有默认值就会添加,否则报错</p></li></ol><p>  如果某个列没有指定not null ,那么当添加数据时,没有给定值,则会给null</p><p>  如果我们希望指定某个列的默认值,可以在创建表时指定</p></blockquote><h3 id="4-2、UPDATE"><a href="#4-2、UPDATE" class="headerlink" title="4.2、UPDATE"></a>4.2、UPDATE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：<span class="keyword">UPDATE</span> tab——name</span><br><span class="line"><span class="keyword">SET</span> col_name1 <span class="operator">=</span> expr1 [, col_name2 <span class="operator">=</span> expr2...]</span><br><span class="line">[<span class="keyword">WHERE</span> where_definition]</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 全部修改</span></span><br><span class="line"><span class="keyword">UPDATE</span> good <span class="keyword">SET</span> price <span class="operator">=</span> <span class="number">5000</span> </span><br><span class="line"><span class="comment">-- 根据条件单个修改</span></span><br><span class="line"><span class="keyword">UPDATE</span> good <span class="keyword">SET</span> price <span class="operator">=</span> <span class="number">1000</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">UPDATE</span> good <span class="keyword">SET</span> price <span class="operator">=</span> price <span class="operator">+</span> <span class="number">500</span> <span class="keyword">WHERE</span> good_name <span class="operator">=</span> <span class="string">&#x27;手机&#x27;</span> </span><br><span class="line"><span class="comment">-- 多字段修改</span></span><br><span class="line"><span class="keyword">UPDATE</span> good <span class="keyword">SET</span> good_name <span class="operator">=</span> <span class="string">&#x27;汽车&#x27;</span>, price <span class="operator">=</span> <span class="number">10000</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>UPDATE语法可以用新值更新原有表行中的各列</li><li>SET子句指示要修改哪些列和要给予那些值</li><li>WHERE子句指定应更新哪些行。如果没有WHERE子句，则更新所有的行</li><li>如果需要修改多个字段，可以通过 set字段1 = 值1，字段2 = 值2</li></ol></blockquote><h3 id="4-3、DELETE"><a href="#4-3、DELETE" class="headerlink" title="4.3、DELETE"></a>4.3、DELETE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法:<span class="keyword">delete</span> <span class="keyword">from</span> tbl_name</span><br><span class="line">[<span class="keyword">WHERE</span> where_definition]</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除单条数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> good <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="comment">-- 删除全部</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> good</span><br></pre></td></tr></table></figure><blockquote><ol><li>如果不使用where子句,将删除表中所有数据</li><li>Delete语句不能删除某一列的值(可使用update设为null或者’’)</li><li>使用delete语句仅删除记录,不删除表本身。如果要删除表，使用drop table语句。drop table 表名</li></ol></blockquote><h3 id="4-4、SELECT"><a href="#4-4、SELECT" class="headerlink" title="4.4、SELECT"></a>4.4、SELECT</h3><h4 id="单表"><a href="#单表" class="headerlink" title="单表"></a>单表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">DISTINCT</span>] <span class="operator">*</span> <span class="operator">|</span> &#123;column1, column2, column3 ... &#125;</span><br><span class="line"><span class="keyword">FROM</span> tablename</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">chinese <span class="type">FLOAT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>,</span><br><span class="line">english <span class="type">FLOAT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span>,</span><br><span class="line">math <span class="type">FLOAT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0.0</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(id,NAME,chinese,english,math) <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;韩顺平&#x27;</span>,<span class="number">89</span>,<span class="number">78</span>,<span class="number">90</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(id,NAME,chinese,english,math) <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;张飞&#x27;</span>,<span class="number">67</span>,<span class="number">98</span>,<span class="number">56</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(id,NAME,chinese,english,math) <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;宋江&#x27;</span>,<span class="number">87</span>,<span class="number">78</span>,<span class="number">77</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(id,NAME,chinese,english,math) <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;关羽&#x27;</span>,<span class="number">88</span>,<span class="number">98</span>,<span class="number">90</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(id,NAME,chinese,english,math) <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;赵云&#x27;</span>,<span class="number">82</span>,<span class="number">84</span>,<span class="number">67</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(id,NAME,chinese,english,math) <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">&#x27;欧阳锋&#x27;</span>,<span class="number">55</span>,<span class="number">85</span>,<span class="number">45</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(id,NAME,chinese,english,math) <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="string">&#x27;黄蓉&#x27;</span>,<span class="number">75</span>,<span class="number">65</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(id,NAME,chinese,english,math) <span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="string">&#x27;韩信&#x27;</span>,<span class="number">45</span>,<span class="number">65</span>,<span class="number">99</span>);</span><br><span class="line"><span class="comment">-- 查询表中所有学生的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 查询表中所有学生的姓名和对应的英语成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`, english <span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 过滤表中重复数据 distinct</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 要查询的记录，每个字段都相同，才会去重</span></span><br><span class="line"><span class="keyword">SELECT</span> DITINCT math <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用表达式对查询的列进行计算</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="operator">|</span> &#123;column1 <span class="operator">|</span> erpression, column2 <span class="operator">|</span> expression...&#125;</span><br><span class="line"><span class="keyword">FROM</span> tablename;</span><br><span class="line">在<span class="keyword">select</span>语句中可使用<span class="keyword">as</span>语句</span><br><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">as</span> 别名 <span class="keyword">from</span> 表名</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计每个学生的总分</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`,(chinese <span class="operator">+</span> english <span class="operator">+</span> math) <span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 在所有学生总分加10分的情况</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`, (chinese <span class="operator">+</span> english <span class="operator">+</span> math <span class="operator">+</span> <span class="number">10</span>) <span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 使用别名表示学生分数</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`, (chinese <span class="operator">+</span>english <span class="operator">+</span> math) <span class="keyword">as</span> score <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure><h4 id="常用运算符"><a href="#常用运算符" class="headerlink" title="常用运算符"></a>常用运算符</h4><p><img src="https://images.hckun.cn/image-20211025233214828.png" alt="image-20211025233214828"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询姓名为赵云的学生成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;赵云&#x27;</span></span><br><span class="line"><span class="comment">-- 查询英语成绩大于90分的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english <span class="operator">&gt;</span> <span class="number">90</span></span><br><span class="line"><span class="comment">-- 查询总分大于200分的所有同学</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> (chinese <span class="operator">+</span> english <span class="operator">+</span> math) <span class="operator">&gt;</span> <span class="number">200</span></span><br><span class="line"><span class="comment">-- 查询math大于60 并且(and) id大于4的学生成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">and</span> id <span class="operator">&gt;</span> <span class="number">4</span></span><br><span class="line"><span class="comment">-- 查询英语成绩大于语文成绩的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english <span class="operator">&gt;</span> chinese</span><br><span class="line"><span class="comment">-- 查询总分大于200分 并且 数学成绩小于语文成绩,的姓赵的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> (chinese <span class="operator">+</span> english <span class="operator">+</span> math) <span class="operator">&gt;</span> <span class="number">200</span> <span class="keyword">AND</span> math <span class="operator">&lt;</span> chinese <span class="keyword">AND</span> `name` <span class="keyword">like</span> <span class="string">&#x27;赵%&#x27;</span></span><br><span class="line"><span class="comment">-- 查询英语分数在 80－90之间的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english <span class="keyword">BETWEEN</span> <span class="number">80</span> <span class="keyword">AND</span> <span class="number">90</span></span><br><span class="line"><span class="comment">-- 查询数学分数为89,90,91的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math <span class="operator">=</span> <span class="number">89</span> <span class="keyword">OR</span> math <span class="operator">=</span> <span class="number">90</span> <span class="keyword">OR</span> math <span class="operator">=</span> <span class="number">91</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math <span class="keyword">in</span> (<span class="number">89</span>,<span class="number">90</span>,<span class="number">91</span>)</span><br><span class="line"><span class="comment">-- 查询所有姓李的学生成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">where</span> `name` <span class="keyword">like</span> <span class="string">&#x27;%李&#x27;</span></span><br><span class="line"><span class="comment">-- 查询数学分&gt;80，语文分&gt;80的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math <span class="operator">&gt;</span> <span class="number">80</span> <span class="keyword">AND</span> chinese <span class="operator">&gt;</span><span class="number">80</span></span><br><span class="line"><span class="comment">-- 查询总分为189 190 191 的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> (chinese <span class="operator">+</span> english <span class="operator">+</span> math) <span class="keyword">in</span> (<span class="number">209</span>,<span class="number">190</span>,<span class="number">191</span>)</span><br><span class="line"><span class="comment">-- 查询所以姓李或者姓宋的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;李%&#x27;</span> <span class="keyword">OR</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;宋%&#x27;</span></span><br><span class="line"><span class="comment">-- 查询数学比语文多30分的同学</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math <span class="operator">-</span> chinese <span class="operator">=</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1,column2,column3 ..</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span>;</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">column</span> <span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>Order by指定排序的列,排序的列即可以是表中的列名,也可以是select语句后指定的别名</li><li>Asc升序[默认]、Desc降序</li><li>Order by 子句应位于SELECT语句的结尾</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对数学成绩排序后输出[升序]</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> math </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对总分按从高到低的顺序输出[降序]</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`,(english <span class="operator">+</span> chinese <span class="operator">+</span> math) <span class="keyword">AS</span> score <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对姓韩的学生成绩[总分]排序输出[升序]</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`,(chinese<span class="operator">+</span>english<span class="operator">+</span>math) <span class="keyword">AS</span> score <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;韩%&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> score</span><br></pre></td></tr></table></figure><h3 id="4-5、统计函数"><a href="#4-5、统计函数" class="headerlink" title="4.5、统计函数"></a>4.5、统计函数</h3><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">|</span> <span class="built_in">COUNT</span>(列名) <span class="keyword">from</span> tablename</span><br><span class="line">[<span class="keyword">WHERE</span> where_definition]</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计一个班级共有多少学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 统计数学成绩大于90的学生有多少个</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math <span class="operator">&gt;</span><span class="number">90</span></span><br><span class="line"><span class="comment">-- 统计总分大于250的人数有多少</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> (english <span class="operator">+</span> chinese <span class="operator">+</span> math) <span class="operator">&gt;</span> <span class="number">250</span></span><br><span class="line"><span class="comment">-- count(*) 和 count(列) 的区别 </span></span><br><span class="line"><span class="comment">-- count(*) 返回满足条件的记录的行数</span></span><br><span class="line"><span class="comment">-- count(列) 统计满足条件的某列有多少个,但是会排除为null的情况</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t10 (</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t10 <span class="keyword">VALUES</span>(<span class="string">&#x27;tom&#x27;</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t10 <span class="keyword">VALUES</span>(<span class="string">&#x27;jerry&#x27;</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t10 <span class="keyword">VALUES</span>(<span class="string">&#x27;kangkang&#x27;</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t10 <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> t10 <span class="comment">-- 4</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(`name`) <span class="keyword">FROM</span> t10 <span class="comment">-- 3</span></span><br></pre></td></tr></table></figure><h4 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(列名) &#123;,<span class="built_in">sum</span>(列名)...&#125; <span class="keyword">FROM</span> tablename</span><br><span class="line">[<span class="keyword">WHERE</span> where_definition]</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计一个班级数学总成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(math) <span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 统计一个班级语文、英语、数学各科的总成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(chinese),<span class="built_in">SUM</span>(english),<span class="built_in">SUM</span>(math) <span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 统计一个班级语文、英语、数学的成绩总和</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(chinese <span class="operator">+</span> english <span class="operator">+</span> math) <span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 统计一个班级语文成绩平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(chinese)<span class="operator">/</span><span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(chinese) <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure><blockquote><ol><li>sum仅对数值起作用,否则会报错</li><li>对多列求和, “,”号不能少</li></ol></blockquote><h4 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">avg</span>(列名) &#123;,<span class="built_in">avg</span>(列名)...&#125; <span class="keyword">FROM</span> tablename</span><br><span class="line">[<span class="keyword">WHERE</span> where_definition]</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 求一个班级数学平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(math) <span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 求一个班级总分平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(chinese <span class="operator">+</span> english <span class="operator">+</span> math) <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure><h4 id="max-min"><a href="#max-min" class="headerlink" title="max/min"></a>max/min</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">max</span>(列名) <span class="keyword">FROM</span> tablename</span><br><span class="line">[<span class="keyword">WHERE</span> where_definition]</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 求班级最高分和最低分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(chinese <span class="operator">+</span> english <span class="operator">+</span> math), <span class="built_in">MIN</span>(chinese <span class="operator">+</span> english <span class="operator">+</span> math) <span class="keyword">FROM</span> student</span><br><span class="line"><span class="comment">-- 求出班级数学最高分和最低分</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(math),<span class="built_in">MIN</span>(math) <span class="keyword">FROM</span> student</span><br></pre></td></tr></table></figure><h4 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2, column3.. <span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">column</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用having子句对分组后的结果进行过滤</span></span><br><span class="line"><span class="keyword">SELECT</span> column1,column2,column3...</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">column</span> having...</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 数据准备</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept( <span class="comment">/*部门表*/</span></span><br><span class="line">deptno MEDIUMINT   UNSIGNED  <span class="keyword">NOT</span> <span class="keyword">NULL</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>, </span><br><span class="line">dname <span class="type">VARCHAR</span>(<span class="number">20</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>  <span class="keyword">DEFAULT</span> &quot;&quot;,</span><br><span class="line">loc <span class="type">VARCHAR</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> &quot;&quot;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept <span class="keyword">VALUES</span>(<span class="number">10</span>, <span class="string">&#x27;ACCOUNTING&#x27;</span>, <span class="string">&#x27;NEW YORK&#x27;</span>), </span><br><span class="line">(<span class="number">20</span>, <span class="string">&#x27;RESEARCH&#x27;</span>, <span class="string">&#x27;DALLAS&#x27;</span>), </span><br><span class="line">(<span class="number">30</span>, <span class="string">&#x27;SALES&#x27;</span>, <span class="string">&#x27;CHICAGO&#x27;</span>), </span><br><span class="line">(<span class="number">40</span>, <span class="string">&#x27;OPERATIONS&#x27;</span>, <span class="string">&#x27;BOSTON&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dept;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp</span><br><span class="line">(empno  MEDIUMINT UNSIGNED  <span class="keyword">NOT</span> <span class="keyword">NULL</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>, <span class="comment">/*编号*/</span></span><br><span class="line">ename <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> &quot;&quot;, <span class="comment">/*名字*/</span></span><br><span class="line">job <span class="type">VARCHAR</span>(<span class="number">9</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> &quot;&quot;,<span class="comment">/*工作*/</span></span><br><span class="line">mgr MEDIUMINT UNSIGNED ,<span class="comment">/*上级编号*/</span></span><br><span class="line">hiredate <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,<span class="comment">/*入职时间*/</span></span><br><span class="line">sal <span class="type">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,<span class="comment">/*薪水*/</span></span><br><span class="line">comm <span class="type">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>) ,<span class="comment">/*红利 奖金*/</span></span><br><span class="line">deptno MEDIUMINT UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="comment">/*部门编号*/</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加测试数据</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span>(<span class="number">7369</span>, <span class="string">&#x27;SMITH&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7902</span>, <span class="string">&#x27;1990-12-17&#x27;</span>, <span class="number">800.00</span>,<span class="keyword">NULL</span> , <span class="number">20</span>), </span><br><span class="line">(<span class="number">7499</span>, <span class="string">&#x27;ALLEN&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1991-2-20&#x27;</span>, <span class="number">1600.00</span>, <span class="number">300.00</span>, <span class="number">30</span>),  </span><br><span class="line">(<span class="number">7521</span>, <span class="string">&#x27;WARD&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1991-2-22&#x27;</span>, <span class="number">1250.00</span>, <span class="number">500.00</span>, <span class="number">30</span>),  </span><br><span class="line">(<span class="number">7566</span>, <span class="string">&#x27;JONES&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>, <span class="number">7839</span>, <span class="string">&#x27;1991-4-2&#x27;</span>, <span class="number">2975.00</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),  </span><br><span class="line">(<span class="number">7654</span>, <span class="string">&#x27;MARTIN&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1991-9-28&#x27;</span>,<span class="number">1250.00</span>,<span class="number">1400.00</span>,<span class="number">30</span>),  </span><br><span class="line">(<span class="number">7698</span>, <span class="string">&#x27;BLAKE&#x27;</span>,<span class="string">&#x27;MANAGER&#x27;</span>, <span class="number">7839</span>,<span class="string">&#x27;1991-5-1&#x27;</span>, <span class="number">2850.00</span>,<span class="keyword">NULL</span>,<span class="number">30</span>),  </span><br><span class="line">(<span class="number">7782</span>, <span class="string">&#x27;CLARK&#x27;</span>,<span class="string">&#x27;MANAGER&#x27;</span>, <span class="number">7839</span>, <span class="string">&#x27;1991-6-9&#x27;</span>,<span class="number">2450.00</span>,<span class="keyword">NULL</span>,<span class="number">10</span>),  </span><br><span class="line">(<span class="number">7788</span>, <span class="string">&#x27;SCOTT&#x27;</span>,<span class="string">&#x27;ANALYST&#x27;</span>,<span class="number">7566</span>, <span class="string">&#x27;1997-4-19&#x27;</span>,<span class="number">3000.00</span>,<span class="keyword">NULL</span>,<span class="number">20</span>),  </span><br><span class="line">(<span class="number">7839</span>, <span class="string">&#x27;KING&#x27;</span>,<span class="string">&#x27;PRESIDENT&#x27;</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;1991-11-17&#x27;</span>,<span class="number">5000.00</span>,<span class="keyword">NULL</span>,<span class="number">10</span>),  </span><br><span class="line">(<span class="number">7844</span>, <span class="string">&#x27;TURNER&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>,<span class="number">7698</span>, <span class="string">&#x27;1991-9-8&#x27;</span>, <span class="number">1500.00</span>, <span class="keyword">NULL</span>,<span class="number">30</span>),  </span><br><span class="line">(<span class="number">7900</span>, <span class="string">&#x27;JAMES&#x27;</span>,<span class="string">&#x27;CLERK&#x27;</span>,<span class="number">7698</span>, <span class="string">&#x27;1991-12-3&#x27;</span>,<span class="number">950.00</span>,<span class="keyword">NULL</span>,<span class="number">30</span>),  </span><br><span class="line">(<span class="number">7902</span>, <span class="string">&#x27;FORD&#x27;</span>, <span class="string">&#x27;ANALYST&#x27;</span>,<span class="number">7566</span>,<span class="string">&#x27;1991-12-3&#x27;</span>,<span class="number">3000.00</span>, <span class="keyword">NULL</span>,<span class="number">20</span>),  </span><br><span class="line">(<span class="number">7934</span>,<span class="string">&#x27;MILLER&#x27;</span>,<span class="string">&#x27;CLERK&#x27;</span>,<span class="number">7782</span>,<span class="string">&#x27;1992-1-23&#x27;</span>, <span class="number">1300.00</span>, <span class="keyword">NULL</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 工资级别</span></span><br><span class="line">#工资级别表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> salgrade</span><br><span class="line">(</span><br><span class="line">grade MEDIUMINT UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>, <span class="comment">/*工资级别*/</span> </span><br><span class="line">losal <span class="type">DECIMAL</span>(<span class="number">17</span>,<span class="number">2</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">/* 该级别的最低工资 */</span></span><br><span class="line">hisal <span class="type">DECIMAL</span>(<span class="number">17</span>,<span class="number">2</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="comment">/* 该级别的最高工资*/</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salgrade <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">700</span>,<span class="number">1200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salgrade <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="number">1201</span>,<span class="number">1400</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salgrade <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="number">1401</span>,<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salgrade <span class="keyword">VALUES</span> (<span class="number">4</span>,<span class="number">2001</span>,<span class="number">3000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salgrade <span class="keyword">VALUES</span> (<span class="number">5</span>,<span class="number">3001</span>,<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> salgrade;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dept;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 如何显示每个部门的平均工资和最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal), <span class="built_in">MAX</span>(sal), deptno <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno</span><br><span class="line"><span class="comment">-- 显示每个部门的每种岗位的平均工资和最低工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal), <span class="built_in">MIN</span>(sal),deptno,job <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno,job</span><br><span class="line">CLERK <span class="number">3</span> SALESMAN <span class="number">1</span> MANAGER <span class="number">3</span>  ANALYST <span class="number">1</span> PRESIDENT <span class="number">1</span> </span><br><span class="line"><span class="comment">-- 显示平均工资低于2000的部门号和它的平均工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal) avg_sal <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">HAVING</span>  avg_sal <span class="operator">&lt;</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><h2 id="5、函数"><a href="#5、函数" class="headerlink" title="5、函数"></a>5、函数</h2><h3 id="5-1、字符串函数"><a href="#5-1、字符串函数" class="headerlink" title="5.1、字符串函数"></a>5.1、字符串函数</h3><table><thead><tr><th>CHARSET(str)</th><th>返回字符串字符集</th></tr></thead><tbody><tr><td>CONCAT(string2 [,…])</td><td>连接字符串</td></tr><tr><td>INSERT (string,substring)</td><td>返回substring在string中出现的位置,没有返回0</td></tr><tr><td>UCASE(string2)</td><td>转换成大写</td></tr><tr><td>LCASE(string2)</td><td>转换成小写</td></tr><tr><td>LEFT(string2,length)</td><td>从string2中的左边起取length个字符</td></tr><tr><td>LENGTH(string)</td><td>string长度[按照字节]</td></tr><tr><td>REPLACE(str,search_sr,replace_str)</td><td>在str中用replace_str替换search_str</td></tr><tr><td>STRCMP(string1,string2)</td><td>逐字符比较两字符串大小</td></tr><tr><td>SUBSTRING(str,position [,length])</td><td>从str的position开始[从1开始计算],取length个字符</td></tr><tr><td>LTRIM(string2) RTRIM(string2) trim</td><td>去除前端空格或后端空格</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">--  CHARSET(str)返回字串字符集</span></span><br><span class="line"><span class="keyword">SELECT</span> CHARSET(ename) <span class="keyword">FROM</span> emp</span><br><span class="line"></span><br><span class="line"><span class="comment">-- CONCAT (string2  [,... ])连接字串, 将多个列拼接成一列</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;%&#x27;</span>,ename,<span class="string">&#x27;%&#x27;</span>) <span class="keyword">FROM</span> emp</span><br><span class="line"></span><br><span class="line"><span class="comment">-- INSTR (string ,substring )返回substring在string中出现的位置,没有返回0</span></span><br><span class="line"><span class="comment">-- dual 亚元表, 系统表 可以作为测试表使用</span></span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;d&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="comment">-- UCASE (string2 )转换成大写</span></span><br><span class="line"><span class="keyword">SELECT</span> UCASE(<span class="string">&#x27;aBc&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LCASE (string2 )转换成小写</span></span><br><span class="line"><span class="keyword">SELECT</span> LCASE(<span class="string">&#x27;ABc&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEFT(string2, string) 从string2中的左边起取length个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="number">2</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="comment">-- RIGHT(string2, string) 从string2中的左边起取length个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="number">1</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LENGTH (string )string长度[按照字节]</span></span><br><span class="line"><span class="keyword">SELECT</span> LENGTH(<span class="string">&#x27;abc&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="comment">-- REPLACE (str ,search_str ,replace_str ) </span></span><br><span class="line"><span class="comment">-- 在str中用replace_str替换search_str</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="comment">-- STRCMP (string1 ,string2 )逐字符比较两字串大小</span></span><br><span class="line"><span class="keyword">SELECT</span> STRCMP(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;Abcd&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SUBSTRING (str , position  [,length ])</span></span><br><span class="line"><span class="comment">-- 从str的position开始【从1开始计算】,取length个字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="number">2</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LTRIM (string2 ) RTRIM (string2 )  TRIM(string)</span></span><br><span class="line"><span class="comment">-- 去除前端空格或后端空格</span></span><br><span class="line"><span class="keyword">SELECT</span> LTRIM(<span class="string">&#x27;  bc&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="keyword">SELECT</span> RTRIM(<span class="string">&#x27;  bc    &#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">TRIM</span>(<span class="string">&#x27; abc &#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以首字母小写的方式显示所有员工emp表的姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(LCASE(<span class="built_in">SUBSTRING</span>(ename,<span class="number">1</span>,<span class="number">1</span>)),<span class="built_in">SUBSTRING</span>(ename,<span class="number">2</span>))  <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(LCASE(<span class="keyword">LEFT</span>(ename,<span class="number">1</span>)),<span class="built_in">SUBSTRING</span>(ename,<span class="number">2</span>)) <span class="keyword">FROM</span> emp</span><br></pre></td></tr></table></figure><h3 id="5-2、数学函数"><a href="#5-2、数学函数" class="headerlink" title="5.2、数学函数"></a>5.2、数学函数</h3><table><thead><tr><th>ABS（num）</th><th>绝对值</th></tr></thead><tbody><tr><td>BIN(decimal_number)</td><td>十进制转二进制</td></tr><tr><td>CEILING(number2)</td><td>向上取整,得到比num2大的最小整数</td></tr><tr><td>CONV(number2,form_base,to_base)</td><td>进制转换</td></tr><tr><td>FLOOR(number2)</td><td>向下取整,得到比num2小的最大整数</td></tr><tr><td>FORMAT(number,decimal_places)</td><td>保留小数位数</td></tr><tr><td>HEX(DecimalNumber)</td><td>转十进制</td></tr><tr><td>LEAST(number,number2,[…])</td><td>求最小值</td></tr><tr><td>MOD(numberator,denominator)</td><td>求余</td></tr><tr><td>RAND([seed])</td><td>范围为[0,1] rand()返回一个随机浮点值v,范围在0-1之间(即:其范围为[0,1.0])。若已指定一个整数参数N，则它被用作种子值，用来产生重复序列。</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ABS(num)绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">10</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-5</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- BIN (decimal_number )十进制转二进制</span></span><br><span class="line"><span class="keyword">SELECT</span> BIN(<span class="number">10</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- CEILING (number2 )向上取整, 得到比num2 大的最小整数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">2.5</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">-1.1</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- CONV(number2,from_base,to_base)进制转换</span></span><br><span class="line"><span class="comment">-- 下面的含义是 8 是十进制的8, 转成 2进制输出</span></span><br><span class="line"><span class="keyword">SELECT</span> CONV(<span class="number">8</span>,<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- FLOOR (number2 )向下取整,得到比 num2 小的最大整数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">5.2</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">-2.1</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- FORMAT (number,decimal_places )保留小数位数(四舍五入)</span></span><br><span class="line"><span class="keyword">SELECT</span> FORMAT(<span class="number">1.351</span>,<span class="number">2</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="keyword">SELECT</span> FORMAT(<span class="number">1.355</span>,<span class="number">2</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- HEX (DecimalNumber )转十六进制</span></span><br><span class="line"><span class="keyword">SELECT</span> HEX(<span class="number">16</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- LEAST (number , number2  [,..])求最小值</span></span><br><span class="line"><span class="keyword">SELECT</span> LEAST(<span class="number">1</span>,<span class="number">-2</span>,<span class="number">2</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- GREATEST (number , number2  [,..])求最大值</span></span><br><span class="line"><span class="keyword">SELECT</span> GREATEST(<span class="number">5</span>,<span class="number">-1</span>,<span class="number">10</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- MOD (numerator ,denominator )求余</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MOD</span>(<span class="number">10</span>,<span class="number">3</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- RAND([seed])RAND([seed]) 返回随机数 其范围为 0 ≤ v ≤ 1.0</span></span><br><span class="line"><span class="comment">-- 1. 如果使用 rand() 每次返回不同的随机数 ，在 0 ≤ v ≤ 1.0</span></span><br><span class="line"><span class="comment">-- 2. 如果使用 rand(seed) 返回随机数, 范围 0 ≤ v ≤ 1.0, 如果seed不变</span></span><br><span class="line"><span class="keyword">SELECT</span> RAND() <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="keyword">SELECT</span> RAND(<span class="number">1</span>)<span class="keyword">FROM</span> DUAL</span><br></pre></td></tr></table></figure><h3 id="5-3、日期函数"><a href="#5-3、日期函数" class="headerlink" title="5.3、日期函数"></a>5.3、日期函数</h3><table><thead><tr><th>CURRENT_DATE()</th><th>当前日期</th></tr></thead><tbody><tr><td>CURRENT_TIME（）</td><td>当前时间</td></tr><tr><td>CURRENT_TIMESTAMP（）</td><td>当前时间戳</td></tr><tr><td>DATE（datetime）</td><td>返回datetime的日期部分</td></tr><tr><td>DATE_ADD(date2,INTERVAL d_value d_type)</td><td>在date2中加上日期或时间</td></tr><tr><td>DATE_SUB(date2,INTERVAL d_value d_type)</td><td>在date2上减去一个时间</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>两个日期差(结果是天)</td></tr><tr><td>TIMEDIFF(date1,date2)</td><td>两个时间差(多少小时,多少分钟多少秒)</td></tr><tr><td>NOW()</td><td>当前时间</td></tr><tr><td>YEAR|MOTH|DATE(datetime) FROM_UNIXTIME()</td><td>年月日</td></tr></tbody></table><blockquote><ol><li>DATE_ADD()中的interval后面可以是year、minute、second、hour、day</li><li>DATE_SUB()中的interval后面可以是year、minute、second、hour、day</li><li>DATEDIFF(date1,date2)得到的是天数,而且是date1-date2的天数,因此可以取负数</li><li>这四个函数的日期类型可以是date、datetime或者timestamp</li><li>unix_timestamp()返回的是1970-01-01到现在的秒数</li><li>form_unixtime()可以把一个unix_timestamp秒数[时间戳],转成指定格式的日期</li><li>%Y-%m-%d %H:%i:%s 表示年月日时分秒</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CURRENT_DATE (  )当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span> <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- CURRENT_TIME (  )当前时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIME</span> <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- CURRENT_TIMESTAMP (  ) 当前时间戳</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span>() <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> info(</span><br><span class="line"> id <span class="type">INT</span>(<span class="number">11</span>),</span><br><span class="line"> zuthor <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line"> create_date datetime</span><br><span class="line">)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> info <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>,now());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> info <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="string">&#x27;2021-11-12 21:22:00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> info <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;kangkang&#x27;</span>,<span class="built_in">CURRENT_TIMESTAMP</span>());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> info</span><br><span class="line"><span class="comment">-- 显示所有新闻信息，发布日期只显示 日期，不用显示时间.</span></span><br><span class="line"><span class="keyword">SELECT</span> id,zuthor,<span class="type">DATE</span>(create_date) <span class="keyword">FROM</span> info</span><br><span class="line"><span class="comment">-- 请查询在10分钟内发布的新闻</span></span><br><span class="line"><span class="keyword">SELECT</span> id,zuthor,create_date <span class="keyword">FROM</span> info <span class="keyword">WHERE</span> DATE_ADD(create_date,<span class="type">INTERVAL</span> <span class="number">10</span> <span class="keyword">MINUTE</span>) <span class="operator">&gt;=</span> now()</span><br><span class="line"><span class="keyword">SELECT</span> id,zuthor,create_date <span class="keyword">FROM</span> info <span class="keyword">WHERE</span> create_date <span class="operator">&gt;=</span> DATE_SUB( NOW(),<span class="type">INTERVAL</span> <span class="number">10</span> <span class="keyword">MINUTE</span>) </span><br><span class="line"><span class="comment">-- 请在mysql 的sql语句中求出 2011-11-11 和 1990-1-1 相差多少天</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(<span class="string">&#x27;2011-11-11&#x27;</span>,<span class="string">&#x27;1990-01-01&#x27;</span>)</span><br><span class="line"><span class="comment">-- 请用mysql 的sql语句求出你活了多少天?  1986-11-11 出生</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(<span class="string">&#x27;2021-11-02&#x27;</span>,<span class="string">&#x27;1986-11-11&#x27;</span>)</span><br><span class="line"><span class="comment">-- 如果你能活80岁，求出你还能活多少天. 1986-11-11 出生</span></span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(DATE_ADD(<span class="string">&#x27;1986-11-11&#x27;</span>,<span class="type">INTERVAL</span> <span class="number">80</span> <span class="keyword">YEAR</span>),<span class="string">&#x27;2021-11-02&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"></span><br><span class="line"><span class="comment">-- TIMEDIFF(date1,date2)返回两个时间相差多少小时多少分钟多少秒</span></span><br><span class="line"><span class="keyword">SELECT</span> TIMEDIFF(<span class="string">&#x27;21:47:30&#x27;</span>,<span class="string">&#x27;23:20:59&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="keyword">SELECT</span> TIMEDIFF(<span class="string">&#x27;2021-11-02 21:47:30&#x27;</span>,<span class="string">&#x27;2021-11-03 23:20:59&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- unix_timestamp() : 返回的是1970-1-1 到现在的秒数</span></span><br><span class="line"><span class="keyword">SELECT</span> UNIX_TIMESTAMP()</span><br><span class="line"><span class="comment">-- FROM_UNIXTIME() : 可以把一个unix_timestamp 秒数[时间戳]，转成指定格式的日期</span></span><br><span class="line"><span class="keyword">SELECT</span> FROM_UNIXTIME(<span class="number">1635860966</span>,<span class="string">&#x27;%Y:%m:%d %H:%i:%s&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br></pre></td></tr></table></figure><h3 id="5-4、加密函数系统函数"><a href="#5-4、加密函数系统函数" class="headerlink" title="5.4、加密函数系统函数"></a>5.4、加密函数系统函数</h3><table><thead><tr><th>USER()</th><th>查询用户</th></tr></thead><tbody><tr><td>DATABASE()</td><td>数据库名称</td></tr><tr><td>MD5(str)</td><td>为字符串算出一个MD5 32的字符串</td></tr><tr><td>PASSWORD(str)</td><td>从原文密码str计算返回密码字符串,通常用于对mysql数据库的用户密码加密</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- USER()查询用户</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>() <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- DATABASE()查询当前使用数据库名称</span></span><br><span class="line"><span class="keyword">SELECT</span> DATABASE() <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- MD5(str)为字符串算出一个 MD5 32的字符串，常用(用户密码)加密</span></span><br><span class="line"><span class="keyword">SELECT</span> MD5(<span class="number">1</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="keyword">SELECT</span> LENGTH(<span class="string">&#x27;c4ca4238a0b923820dcc509a6f75849b&#x27;</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- PASSWORD(str) -- 加密函数, MySQL数据库的用户密码就是 PASSWORD函数加密</span></span><br><span class="line"><span class="keyword">SELECT</span> PASSWORD(<span class="number">1</span>) <span class="keyword">FROM</span> DUAL</span><br><span class="line"><span class="comment">-- 查看系统用户表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mysql.user</span><br></pre></td></tr></table></figure><h3 id="5-5、流程控制函数"><a href="#5-5、流程控制函数" class="headerlink" title="5.5、流程控制函数"></a>5.5、流程控制函数</h3><table><thead><tr><th>IF(expr1,expr2,expr3)</th><th>如果expr1为true,则返回expr2否则返回expr3</th></tr></thead><tbody><tr><td>IFNULL(expr1,expr2)</td><td>如果expr1不为空NULL,则返回expr1,否则返回expr2</td></tr><tr><td>SELECT CASE WHEN expr1 THEN expr2 WHEN expr3 THEN expr4 ELSE expr5 END</td><td>如果expr1为true,则返回expr2,如果expr2为true返回expr4,否则返回expr5</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- IF(expr1,expr2,expr3)如果expr1为True ,则返回 expr2 否则返回 expr3</span></span><br><span class="line"><span class="keyword">SELECT</span> IF(<span class="literal">TRUE</span>,<span class="string">&#x27;真&#x27;</span>,<span class="string">&#x27;假&#x27;</span>)</span><br><span class="line"><span class="comment">-- IFNULL(expr1,expr2)如果expr1不为空NULL,则返回expr1,否则返回expr2</span></span><br><span class="line"><span class="keyword">SELECT</span> IFNULL(<span class="keyword">NULL</span>,<span class="string">&#x27;空&#x27;</span>)</span><br><span class="line"><span class="comment">-- SELECT CASE WHEN expr1 THEN expr2 WHEN expr3 THEN expr4 ELSE expr5 END; [类似多重分支.] 如果expr1 为TRUE,则返回expr2,如果expr2 为t, 返回 expr4, 否则返回 expr5</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="literal">TRUE</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="string">&#x27;真&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="string">&#x27;假&#x27;</span></span><br><span class="line"><span class="keyword">END</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> emp</span><br><span class="line"><span class="comment">-- 查询emp 表, 如果 comm 是null , 则显示0.0</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,IF( comm <span class="keyword">IS</span> <span class="keyword">NULL</span>,<span class="number">0.0</span>,comm) <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">SELECT</span> ename, IFNULL( comm,<span class="string">&#x27;0.0&#x27;</span>) <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">-- 2. 如果emp 表的 job 是 CLERK 则显示 职员， 如果是 MANAGER 则显示经理 如果是 SALESMAN 则显示 销售人员，其它正常显示</span></span><br><span class="line"><span class="keyword">SELECT</span> job,ename,(<span class="keyword">CASE</span> </span><br><span class="line"><span class="keyword">WHEN</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="string">&#x27;职员&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line">  <span class="string">&#x27;经理&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">THEN</span></span><br><span class="line"> <span class="string">&#x27;销售人员&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">job</span><br><span class="line"><span class="keyword">END</span>)  <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> job,ename,IF(job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>,<span class="string">&#x27;职员&#x27;</span>,IF(job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span>,<span class="string">&#x27;经理&#x27;</span>,IF(job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>,<span class="string">&#x27;销售人员&#x27;</span>,job))) <span class="keyword">FROM</span> emp</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6、查询增强"><a href="#6、查询增强" class="headerlink" title="6、查询增强"></a>6、查询增强</h2><h3 id="6-1、模糊查询、排序"><a href="#6-1、模糊查询、排序" class="headerlink" title="6.1、模糊查询、排序"></a>6.1、模糊查询、排序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dept;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> salgrade;</span><br><span class="line"><span class="comment">-- 使用where子句 查找1992.1.1后入职的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> hiredate <span class="operator">&gt;</span> <span class="string">&#x27;1992-01-01&#x27;</span>;</span><br><span class="line"><span class="comment">-- 使用like操作符(模糊)</span></span><br><span class="line"><span class="comment">-- %: 表示0到多个任意字符 _: 表示单个任意字符</span></span><br><span class="line"><span class="comment">-- 显示首字符为S的员工姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">like</span> <span class="string">&#x27;S%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 显示第三个字符为大写O的所有员工的姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;__O%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 显示没有上级的雇员的情况</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> mgr <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="comment">-- 查询表结构 </span></span><br><span class="line"><span class="keyword">DESC</span> emp;</span><br><span class="line"><span class="comment">-- 使用order by子句</span></span><br><span class="line"><span class="comment">-- 如何按照工资的从低到高的顺序[升序]，显示雇员的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal;</span><br><span class="line"><span class="comment">-- 按照部门号升序而雇员的工资降序排列 , 显示雇员信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> deptno,sal <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="6-2、分页查询"><a href="#6-2、分页查询" class="headerlink" title="6.2、分页查询"></a>6.2、分页查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">基本语法:<span class="keyword">SELECT</span> ... limit <span class="keyword">start</span> <span class="keyword">rows</span>表示从<span class="keyword">start</span><span class="operator">+</span><span class="number">1</span>行开始取,取出<span class="keyword">rows</span>行,<span class="keyword">start</span>从<span class="number">0</span>开始计算</span><br><span class="line"></span><br><span class="line">公式:<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> empno</span><br><span class="line">LIMIT 每页显示记录数 <span class="operator">*</span> (第几页<span class="number">-1</span>), 每页显示记录数</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按雇员的id号升序取出第二页， 每页显示3条记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> empno LIMIT <span class="number">3</span>,<span class="number">3</span>;</span><br><span class="line"><span class="comment">-- 显示每种每种岗位的雇员数量</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>),job <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> job;</span><br><span class="line"><span class="comment">-- 显示雇员总数，以及获得补助的雇员数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>),<span class="built_in">count</span>(comm) <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 显示每种岗位的雇员总数、平均工资。</span></span><br><span class="line"><span class="keyword">SELECT</span> job,<span class="built_in">count</span>(<span class="operator">*</span>),<span class="built_in">avg</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> job;</span><br><span class="line"><span class="comment">-- 显示雇员总数，以及获得补助的雇员数。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>),<span class="built_in">COUNT</span>(comm) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 统计没有获得补助的雇员数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(IF(comm <span class="keyword">IS</span> <span class="keyword">NULL</span>,<span class="string">&#x27;1&#x27;</span>, <span class="keyword">NULL</span>)) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">-</span> <span class="built_in">COUNT</span>(comm) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 显示管理者的总人数</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> mgr) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 显示雇员工资的最大差额。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) <span class="operator">-</span> <span class="built_in">MIN</span>(sal <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">查询条件使用顺序: <span class="keyword">SELECT</span> column1, column2, column3.. <span class="keyword">FROM</span>  <span class="keyword">table</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">column</span></span><br><span class="line"><span class="keyword">having</span> <span class="keyword">condition</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">column</span></span><br><span class="line">limit <span class="keyword">start</span>,roes;</span><br><span class="line"><span class="comment">-- 请统计各个部门的平均工资并且是大于1000的，并且按照平均工资从高到低排序， 取出前两行记录 </span></span><br><span class="line"><span class="keyword">SELECT</span> job,<span class="built_in">AVG</span>(sal) avg_sal <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span>deptno <span class="keyword">HAVING</span> avg_sal <span class="operator">&gt;</span> <span class="number">1000</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> avg_sal <span class="keyword">DESC</span> LIMIT <span class="number">0</span> ,<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="7、多表查询"><a href="#7、多表查询" class="headerlink" title="7、多表查询"></a>7、多表查询</h2><h3 id="7-1、笛卡尔集"><a href="#7-1、笛卡尔集" class="headerlink" title="7.1、笛卡尔集"></a>7.1、笛卡尔集</h3><p>​        多表是查询是指基于两个和两个以上的表查询，在实际应用中，查询单个表可能不满足你的需求</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 显示雇员名,雇员工资及所在部门的名字 【笛卡尔集】</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,dname <span class="keyword">FROM</span> emp , dept <span class="keyword">WHERE</span> emp.deptno <span class="operator">=</span> dept.deptno</span><br></pre></td></tr></table></figure><blockquote><p>在默认情况下:当两个表查询时,规则</p><ol><li>从第一张表中,取出一行和第二张表的每一行进行组合,返回结果[含有两张表的所有列]</li><li>一共返回的记录数第一张表行数* 第二张表的行数</li><li>这样多表查询默认处理返回的结果,称为笛卡尔集</li><li>解决这个多表的关键就是要写出正确的过滤条件where</li><li>多表查询的条件不能少于表的个数-1,否则会出现笛卡尔集</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 显示部门号为10的部门名、员工名和工资 </span></span><br><span class="line"><span class="keyword">SELECT</span> dname , ename, sal,dept.deptno <span class="keyword">FROM</span> emp, dept <span class="keyword">WHERE</span> dept.deptno <span class="operator">=</span> emp.deptno <span class="keyword">AND</span> dept.deptno <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 显示各个员工的姓名，工资，及其工资的级别</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> salgrade;</span><br><span class="line"><span class="keyword">SELECT</span> ename, sal, grade <span class="keyword">FROM</span> emp,salgrade <span class="keyword">WHERE</span> sal <span class="keyword">BETWEEN</span> losal <span class="keyword">AND</span> hisal;</span><br><span class="line"><span class="keyword">SELECT</span> ename, sal, grade <span class="keyword">FROM</span> emp,salgrade <span class="keyword">WHERE</span> sal <span class="operator">&gt;=</span> losal <span class="keyword">AND</span> sal <span class="operator">&lt;=</span> hisal;</span><br><span class="line"><span class="comment">-- 显示雇员名,雇员工资及所在部门的名字,并按部门降序排列</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,dname,dept.deptno <span class="keyword">FROM</span> emp, dept <span class="keyword">WHERE</span> emp.deptno <span class="operator">=</span> dept.deptno <span class="keyword">ORDER</span> <span class="keyword">BY</span> dept.deptno <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="7-2、自连接"><a href="#7-2、自连接" class="headerlink" title="7.2、自连接"></a>7.2、自连接</h3><p>​    自连接是指在同一张表的连接查询【将同一张表看做两张表】</p><p>​    自连接的特点：</p><ul><li>把同一张表当做两张表使用</li><li>需要给表取别名 表名  表别名</li><li>列名不明确，可以指定列的别名  列名 as 列的别名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 显示公司员工名字和他的上级的名字</span></span><br><span class="line"><span class="keyword">SELECT</span> emp1.ename, emp2.ename <span class="keyword">FROM</span> emp emp1, emp emp2 <span class="keyword">WHERE</span> emp1.mgr <span class="operator">=</span> emp2.empno;</span><br></pre></td></tr></table></figure><h3 id="7-3、子查询"><a href="#7-3、子查询" class="headerlink" title="7.3、子查询"></a>7.3、子查询</h3><p>​    子查询是指嵌入在其他sql语句中的select语句,也叫嵌套查询。子查询分为单行子查询，单行子查询查询是指只返回一行数据的子查询语句；多行子查询，多行子查询是指返回多行数据的字查询 使用关键字in。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 显示与SMITH同一部门的所有员工</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> (<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询和部门10的工作相同的雇员的</span></span><br><span class="line"><span class="comment">-- 名字、岗位、工资、部门号, 但是不含10号部门自己的雇员.</span></span><br><span class="line"><span class="keyword">SELECT</span> job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">SELECT</span> ename,job,sal,deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">10</span>) <span class="keyword">AND</span> deptno <span class="operator">!=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>子查询临时表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 求每个部门中员工工资最高的员工</span></span><br><span class="line"><span class="comment">-- 求出每个部门的最高工资和部门编号,当做临时表 判断条件部门id相同、当前工资与最高工资相同</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal),deptno <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> emp.ename,temp.deptno,emp.sal <span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) max_sal ,deptno <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno</span><br><span class="line">) temp , emp</span><br><span class="line"><span class="keyword">WHERE</span> temp.deptno <span class="operator">=</span> emp.deptno <span class="keyword">AND</span> temp.max_sal <span class="operator">=</span> emp.sal;</span><br></pre></td></tr></table></figure><p><strong>ALL\ANY</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 显示工资比部门30的所有员工的工资高的员工的姓名、工资和部门号</span></span><br><span class="line"><span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">deptno </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">sal <span class="operator">&gt;</span> <span class="keyword">ALL</span> ( <span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">deptno </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">sal <span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">MAX</span>( sal ) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">deptno <span class="operator">=</span> <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示工资比部门30的其中一个员工的工资高的员工的姓名、工资和部门号</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">deptno </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">sal <span class="operator">&gt;</span> <span class="keyword">ANY</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">sal </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">deptno <span class="operator">=</span> <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">deptno </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">sal <span class="operator">&gt;</span>  (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="built_in">min</span>(sal) </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">deptno <span class="operator">=</span> <span class="number">30</span>);</span><br></pre></td></tr></table></figure><p><strong>多列子查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询与allen的部门和岗位完全相同的所有雇员(并且不含allen本人)</span></span><br><span class="line"><span class="comment">-- (字段1， 字段2 ...) = (select 字段 1，字段2 from 。。。。)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> (deptno,job) <span class="operator">=</span> (<span class="keyword">SELECT</span> deptno,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;allen&#x27;</span>) <span class="keyword">AND</span> ename <span class="operator">!=</span> <span class="string">&#x27;allen&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查找每个部门工资高于本部门平均工资的人的资料</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal),deptno <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal) avg_sal,deptno <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno</span><br><span class="line">)temp ,emp <span class="keyword">WHERE</span> temp.deptno <span class="operator">=</span> emp.deptno <span class="keyword">AND</span> emp.sal <span class="operator">&gt;</span> temp.avg_sal;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找每个部门工资最高的人的详细资料</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,emp.deptno <span class="keyword">FROM</span> emp ,(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal) max_sal,deptno <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno</span><br><span class="line">) temp <span class="keyword">WHERE</span> emp.deptno <span class="operator">=</span> temp.deptno <span class="keyword">AND</span> emp.sal <span class="operator">=</span> temp.max_sal;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询每个部门的信息(包括:部门名,编号,地址)和人员数量</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(emp.deptno), dname,emp.empno,emp.deptno <span class="keyword">FROM</span> emp , dept <span class="keyword">WHERE</span> emp.deptno <span class="operator">=</span> dept.deptno <span class="keyword">GROUP</span> <span class="keyword">BY</span> emp.deptno</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-4、表复制和去重"><a href="#7-4、表复制和去重" class="headerlink" title="7.4、表复制和去重"></a>7.4、表复制和去重</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 把一张表查询出的数据添加到另一张表中</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t11(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">`create_date` datetime</span><br><span class="line">)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t11 (id,`name`,create_date) <span class="keyword">SELECT</span> empno,ename,hiredate <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t11;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 表复制</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t11 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t11;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> t11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t11;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 复制表的结构</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t12 <span class="keyword">LIKE</span> emp;</span><br><span class="line"><span class="keyword">DESC</span> t12;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t12 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t12;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 表的去重,对t12进行去重</span></span><br><span class="line"><span class="comment">-- 1.创建一张临时表,表的结构和t12一样</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t13 <span class="keyword">like</span> t12;</span><br><span class="line"><span class="keyword">DESC</span> t13;</span><br><span class="line"><span class="comment">-- 2.查询t12去重之后的数据,赋值给t13</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t13 <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t12;</span><br><span class="line"><span class="comment">-- 3.删除t12表的数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t12;</span><br><span class="line"><span class="comment">-- 4.将t13表的数据插入到t12</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t12 <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t13;</span><br><span class="line"><span class="comment">-- 5.删除t13</span></span><br><span class="line"><span class="keyword">DROP</span>  <span class="keyword">TABLE</span> t13;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t12;</span><br></pre></td></tr></table></figure><h3 id="7-5、合并查询"><a href="#7-5、合并查询" class="headerlink" title="7.5、合并查询"></a>7.5、合并查询</h3><ul><li><p>union all 该操作符用于取得两个结果集的并集，当使用该操作符时，不会取消重复行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">2500</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="string">&#x27;20&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>union 该操作符与union all相似,但是会自动去掉结果集中重复的行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="number">2500</span></span><br><span class="line"><span class="keyword">UNION</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="string">&#x27;20&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><p>union all 和 union进行合并时sql语句查询出列的数量必须保持一致</p><h3 id="7-6、外连接"><a href="#7-6、外连接" class="headerlink" title="7.6、外连接"></a>7.6、外连接</h3><p>​    前面我们学习的查询，是利用where子句对两张表或者多张表，形成的笛卡尔积进行筛选，根据关联条件，显示所有匹配的记录，匹配不上的，不显示。</p><p>比如：查询出部门名称和这些部门的员工名称和工作，同时要求显示出那些没有员工的部门</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ename,job,dname <span class="keyword">FROM</span> emp,dept <span class="keyword">WHERE</span> emp.deptno <span class="operator">=</span>  dept.deptno;</span><br></pre></td></tr></table></figure><p>此时产生的问题就是没有员工的部门不能进行显示;此时就需要采用外连接来进行查询</p><ul><li>左外连接:如果左侧的表完全显示我们就说是左外连接</li><li>右外连接:如果右侧的表完全显示我们就说是右外连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> stu <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;jerry&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> stu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> score(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">`score` <span class="type">INT</span>(<span class="number">11</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> score <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">20</span>),(<span class="number">2</span>,<span class="number">30</span>),(<span class="number">5</span>,<span class="number">50</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> score;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用左连接</span></span><br><span class="line"><span class="comment">-- （显示所有人的成绩，如果没有成绩，也要显示该人的姓名和id号,成绩显示为空）</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`,stu.id,score <span class="keyword">FROM</span> stu <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> score <span class="keyword">ON</span> stu.id <span class="operator">=</span> score.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用右外连接（显示所有成绩，如果没有名字匹配，显示空)</span></span><br><span class="line"><span class="comment">-- 即：右边的表 和左表没有匹配的记录，也会把右表的记录显示出来</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`,stu.id,score <span class="keyword">FROM</span> stu <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> score <span class="keyword">ON</span> stu.id <span class="operator">=</span> score.id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 列出部门名称和这些部门的员工信息(名字和工作)，</span></span><br><span class="line"><span class="comment">-- 同时列出那些没有员工的部门名。</span></span><br><span class="line"><span class="comment">-- 使用左外连接实现</span></span><br><span class="line"><span class="keyword">SELECT</span> dname,ename,job <span class="keyword">FROM</span> dept <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> emp <span class="keyword">ON</span> dept.deptno <span class="operator">=</span> emp.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用右外连接实现</span></span><br><span class="line"><span class="keyword">SELECT</span> dname,ename,job <span class="keyword">FROM</span> emp <span class="keyword">RIGHT</span>  <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> dept.deptno <span class="operator">=</span> emp.deptno;</span><br></pre></td></tr></table></figure><h2 id="8、MySQL约束"><a href="#8、MySQL约束" class="headerlink" title="8、MySQL约束"></a>8、MySQL约束</h2><h3 id="8-1、主键"><a href="#8-1、主键" class="headerlink" title="8.1、主键"></a>8.1、主键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 主键列的值是不可以重复</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t13(</span><br><span class="line">`id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t13 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t13 <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t13;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t13 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>);<span class="comment">--Duplicate entry &#x27;1&#x27; for key&#x27;PRIMARY&#x27;</span></span><br><span class="line"><span class="keyword">UPDATE</span> t13 <span class="keyword">SET</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>; <span class="comment">--  Duplicate entry &#x27;1&#x27; for key &#x27;PRIMARY&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- primary key不能重复而且不能为 null。</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t13 <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;zhangsan&#x27;</span>,<span class="string">&#x27;87975531@qq.com&#x27;</span>); <span class="comment">--Column &#x27;id&#x27; cannot be null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> t13;</span><br><span class="line"><span class="comment">-- 一张表最多只能有一个主键, 但可以是复合主键(比如 id+name)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t14(</span><br><span class="line">`id` <span class="type">INT</span> ,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(id,`name`)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t14;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t14 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t14 <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t14 <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;lisi&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t14 <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t14 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>); <span class="comment">-- Duplicate entry &#x27;2-tom&#x27; for key &#x27;PRIMARY&#x27;</span></span><br><span class="line"><span class="comment">-- 声明主键的两种方式</span></span><br><span class="line"><span class="comment">-- 直接在字段后声明</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t15(</span><br><span class="line">`id` <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在所有字段声明完毕的末尾</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t16(</span><br><span class="line">`id` <span class="type">INT</span> ,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-2、not-null"><a href="#8-2、not-null" class="headerlink" title="8.2、not null"></a>8.2、not null</h3><p>​    如果在列上定义了not null，那么当插入数据时，必须为列提供数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t17(</span><br><span class="line">`id` <span class="type">INT</span> ,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t17 <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t17 <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="keyword">NULL</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>); <span class="comment">-- Column &#x27;name&#x27; cannot be null</span></span><br></pre></td></tr></table></figure><h3 id="8-3、unique"><a href="#8-3、unique" class="headerlink" title="8.3、unique"></a>8.3、unique</h3><p>​    当定义了唯一约束之后,该列值是不能重复的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 设置为unique但不设置为not null 允许插入空值且多个</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t18(</span><br><span class="line">`id` <span class="type">INT</span> <span class="keyword">UNIQUE</span> ,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>) ,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t18 <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t18 <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>); <span class="comment">-- Duplicate entry &#x27;2&#x27; for key &#x27;PRIMARY&#x27;</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t18 <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t18 <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>); </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> t18;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置为unique设置为not null 不允许插入空值</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t19(</span><br><span class="line">`id` <span class="type">INT</span> <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>) ,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t19 <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t19 <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>); <span class="comment">-- Duplicate entry &#x27;2&#x27; for key &#x27;id&#x27;</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t19 <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>); <span class="comment">--  Column &#x27;id&#x27; cannot be null</span></span><br></pre></td></tr></table></figure><h3 id="8-4、外键"><a href="#8-4、外键" class="headerlink" title="8.4、外键"></a>8.4、外键</h3><p>​        用于定义主表和从表之间的关系：外键约束要定义在从表上，主表则必须是具有主键约束或者是unique约束，当定义外键约束后，要求外键列数据必须在主表的主键列存在或是为null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法: <span class="keyword">FOREIGN</span> KEY(本表字段名) <span class="keyword">REFERENCES</span> 主表名(主键名或<span class="keyword">unique</span>字段名)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建主表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t20(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t20 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;java&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t20;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t21(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">`class_id` <span class="type">INT</span>,</span><br><span class="line"><span class="comment">-- 外键</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(class_id) <span class="keyword">REFERENCES</span> t20(id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">DESC</span> t21;</span><br><span class="line"><span class="comment">-- 关键的外键不存在数据不允许被插入</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t21 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t21 <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;mary&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t21 <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="number">3</span>); <span class="comment">-- Cannot add or update a child row: a foreign key constraint fails (`db01`.`t21`, CONSTRAINT `t21_ibfk_1` FOREIGN KEY (`class_id`) REFERENCES `t20` (`id`))</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t21;</span><br><span class="line"><span class="comment">-- 是否允许插入为NULL取决于设置外键的字段是否非空</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t21 <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除主表的数据.必须在从表中没有被引用才可以删除</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t20 <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- Cannot delete or update a parent row: a foreign key constraint fails (`db01`.`t21`, CONSTRAINT `t21_ibfk_1` FOREIGN KEY (`class_id`) REFERENCES `t20` (`id`))</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>外键指向的表的字段,要求是primary key或者是unique</li><li>表的类型是innodb,这样的表才支持外键</li><li>外键字段的类型要和主键字段的类型一致(长度可以不同)</li><li>外键字段的值,必须在主键字段中出现过,或者为NULL[前提是外键字段允许为null]</li><li>一旦建立外键关系,数据不能随意删除了</li></ol></blockquote><h3 id="8-5、check"><a href="#8-5、check" class="headerlink" title="8.5、check"></a>8.5、check</h3><p>​    用于强制行数据必须满足的条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- check约束目前在mysql5.7中暂不支持,但是可以书写</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t22 (</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`sex` <span class="type">VARCHAR</span> ( <span class="number">20</span> ) <span class="keyword">CHECK</span> (</span><br><span class="line">sex <span class="keyword">IN</span> ( <span class="string">&#x27;man&#x27;</span>, <span class="string">&#x27;woman&#x27;</span> )),</span><br><span class="line">`sal` <span class="keyword">DOUBLE</span> <span class="keyword">CHECK</span> ( sal <span class="operator">&gt;=</span> <span class="number">1000</span> <span class="keyword">AND</span> sal <span class="operator">&lt;=</span> <span class="number">3000</span> ))</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t22 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;mid&#x27;</span>,<span class="number">11</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t22;</span><br></pre></td></tr></table></figure><p><strong>建表练习</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE shop_db;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 现有一个商店的数据库shop_db，记录客户及其购物情况，由下面三个表组成：</span></span><br><span class="line"><span class="comment">-- 商品goods（商品号goods_id，商品名goods_name，单价unitprice，商品类别category，</span></span><br><span class="line"><span class="comment">-- 供应商provider);</span></span><br><span class="line"><span class="comment">-- 客户customer（客户号customer_id,姓名name,住址address,电邮email性别sex,身份证card_Id);</span></span><br><span class="line"><span class="comment">-- 购买purchase（购买订单号order_id，客户号customer_id,商品号goods_id,购买数量nums);</span></span><br><span class="line"><span class="comment">-- 1 建表，在定义中要求声明 [进行合理设计]：</span></span><br><span class="line"><span class="comment">-- (1)每个表的主外键；</span></span><br><span class="line"><span class="comment">-- (2)客户的姓名不能为空值；</span></span><br><span class="line"><span class="comment">-- (3)电邮不能够重复;</span></span><br><span class="line"><span class="comment">-- (4)客户的性别[男|女] check 枚举..</span></span><br><span class="line"><span class="comment">-- (5)单价unitprice 在 1.0 - 9999.99 之间 check</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 商品goods</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> goods (</span><br><span class="line">goods_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">goods_name <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">unitprice <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> </span><br><span class="line"><span class="keyword">CHECK</span> (unitprice <span class="operator">&gt;=</span> <span class="number">1.0</span> <span class="keyword">AND</span> unitprice <span class="operator">&lt;=</span> <span class="number">9999.99</span>),</span><br><span class="line">category <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">provider <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 客户customer（客户号customer_id,姓名name,住址address,电邮email性别sex,</span></span><br><span class="line"><span class="comment">-- 身份证card_Id);</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customer(</span><br><span class="line">customer_id <span class="type">CHAR</span>(<span class="number">8</span>) <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 程序员自己决定</span></span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">address <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">sex ENUM(<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,  <span class="comment">-- 这里老师使用的枚举类型, 是生效</span></span><br><span class="line">card_Id <span class="type">CHAR</span>(<span class="number">18</span>)); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 购买purchase（购买订单号order_id，客户号customer_id,商品号goods_id,</span></span><br><span class="line"><span class="comment">-- 购买数量nums);</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> purchase(</span><br><span class="line">order_id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">customer_id <span class="type">CHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>, <span class="comment">-- 外键约束在后</span></span><br><span class="line">goods_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> , <span class="comment">-- 外键约束在后</span></span><br><span class="line">nums <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (customer_id) <span class="keyword">REFERENCES</span> customer(customer_id),</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (goods_id) <span class="keyword">REFERENCES</span> goods(goods_id));</span><br><span class="line"><span class="keyword">DESC</span> goods;</span><br><span class="line"><span class="keyword">DESC</span> customer;</span><br><span class="line"><span class="keyword">DESC</span> purchase;</span><br></pre></td></tr></table></figure><h3 id="8-6、自增长auto-increment"><a href="#8-6、自增长auto-increment" class="headerlink" title="8.6、自增长auto_increment"></a>8.6、自增长auto_increment</h3><p>​    在某张表中,存在一个id列(整数),我们希望在添加记录的时候,该列从1开始,自动增长</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 自增长</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t24(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">DESC</span> t24;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t24 (`name`) <span class="keyword">VALUES</span>(<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t24;</span><br><span class="line"><span class="comment">-- 修改自增长的开始值</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t24 auto_increment <span class="operator">=</span> <span class="number">666</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t24 (`name`) <span class="keyword">VALUES</span>(<span class="string">&#x27;tom&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="9、MySQL索引"><a href="#9、MySQL索引" class="headerlink" title="9、MySQL索引"></a>9、MySQL索引</h2><p>​    提起数据库性能,索引是物美价廉的东西了。不用加内存，不用改程序，不用调sql，查询速度就可能提高百倍千倍。</p><h3 id="9-1、索引速度优化"><a href="#9-1、索引速度优化" class="headerlink" title="9.1、索引速度优化"></a>9.1、索引速度优化</h3><p>​    创建测试数据库、表插入8000000条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE tmp;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dept( <span class="comment">/*部门表*/</span></span><br><span class="line">deptno MEDIUMINT   UNSIGNED  <span class="keyword">NOT</span> <span class="keyword">NULL</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">dname <span class="type">VARCHAR</span>(<span class="number">20</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>  <span class="keyword">DEFAULT</span> &quot;&quot;,</span><br><span class="line">loc <span class="type">VARCHAR</span>(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> &quot;&quot;</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line">#创建表EMP雇员</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp</span><br><span class="line">(empno  MEDIUMINT UNSIGNED  <span class="keyword">NOT</span> <span class="keyword">NULL</span>  <span class="keyword">DEFAULT</span> <span class="number">0</span>, <span class="comment">/*编号*/</span></span><br><span class="line">ename <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> &quot;&quot;, <span class="comment">/*名字*/</span></span><br><span class="line">job <span class="type">VARCHAR</span>(<span class="number">9</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> &quot;&quot;,<span class="comment">/*工作*/</span></span><br><span class="line">mgr MEDIUMINT UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,<span class="comment">/*上级编号*/</span></span><br><span class="line">hiredate <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,<span class="comment">/*入职时间*/</span></span><br><span class="line">sal <span class="type">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,<span class="comment">/*薪水*/</span></span><br><span class="line">comm <span class="type">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,<span class="comment">/*红利*/</span></span><br><span class="line">deptno MEDIUMINT UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="comment">/*部门编号*/</span></span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line">#工资级别表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> salgrade</span><br><span class="line">(</span><br><span class="line">grade MEDIUMINT UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">losal <span class="type">DECIMAL</span>(<span class="number">17</span>,<span class="number">2</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">hisal <span class="type">DECIMAL</span>(<span class="number">17</span>,<span class="number">2</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#测试数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salgrade <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">700</span>,<span class="number">1200</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salgrade <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="number">1201</span>,<span class="number">1400</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salgrade <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="number">1401</span>,<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salgrade <span class="keyword">VALUES</span> (<span class="number">4</span>,<span class="number">2001</span>,<span class="number">3000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salgrade <span class="keyword">VALUES</span> (<span class="number">5</span>,<span class="number">3001</span>,<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line">#创建一个函数，名字 rand_string，可以随机返回我指定的个数字符串</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_string(n <span class="type">INT</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">255</span>) #该函数会返回一个字符串</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">#定义了一个变量 chars_str， 类型  <span class="type">varchar</span>(<span class="number">100</span>)</span><br><span class="line">#默认给 chars_str 初始值   <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line"> <span class="keyword">DECLARE</span> chars_str <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span></span><br><span class="line">   <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ&#x27;</span>; </span><br><span class="line"> <span class="keyword">DECLARE</span> return_str <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"> <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>; </span><br><span class="line"> WHILE i <span class="operator">&lt;</span> n DO</span><br><span class="line">    # concat 函数 : 连接函数mysql函数</span><br><span class="line">   <span class="keyword">SET</span> return_str <span class="operator">=</span>CONCAT(return_str,<span class="built_in">SUBSTRING</span>(chars_str,<span class="built_in">FLOOR</span>(<span class="number">1</span><span class="operator">+</span>RAND()<span class="operator">*</span><span class="number">52</span>),<span class="number">1</span>));</span><br><span class="line">   <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">END</span> WHILE;</span><br><span class="line">  <span class="keyword">RETURN</span> return_str;</span><br><span class="line">  <span class="keyword">END</span> $$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #这里我们又自定了一个函数,返回一个随机的部门号</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_num( )</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">INT</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">SET</span> i <span class="operator">=</span> <span class="built_in">FLOOR</span>(<span class="number">10</span><span class="operator">+</span>RAND()<span class="operator">*</span><span class="number">500</span>);</span><br><span class="line"><span class="keyword">RETURN</span> i;</span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line"></span><br><span class="line"> #创建一个存储过程， 可以添加雇员</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> insert_emp(<span class="keyword">IN</span> <span class="keyword">START</span> <span class="type">INT</span>(<span class="number">10</span>),<span class="keyword">IN</span> max_num <span class="type">INT</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>;</span><br><span class="line">#<span class="keyword">set</span> autocommit <span class="operator">=</span><span class="number">0</span> 把autocommit设置成<span class="number">0</span></span><br><span class="line"> #autocommit <span class="operator">=</span> <span class="number">0</span> 含义: 不要自动提交</span><br><span class="line"> <span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>; #默认不提交<span class="keyword">sql</span>语句</span><br><span class="line"> REPEAT</span><br><span class="line"> <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"> #通过前面写的函数随机产生字符串和部门编号，然后加入到emp表</span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span> ((<span class="keyword">START</span><span class="operator">+</span>i) ,rand_string(<span class="number">6</span>),<span class="string">&#x27;SALESMAN&#x27;</span>,<span class="number">0001</span>,CURDATE(),<span class="number">2000</span>,<span class="number">400</span>,rand_num());</span><br><span class="line">  UNTIL i <span class="operator">=</span> max_num</span><br><span class="line"> <span class="keyword">END</span> REPEAT;</span><br><span class="line"> #<span class="keyword">commit</span>整体提交所有<span class="keyword">sql</span>语句，提高效率</span><br><span class="line">   <span class="keyword">COMMIT</span>;</span><br><span class="line"> <span class="keyword">END</span> $$</span><br><span class="line"></span><br><span class="line"> #添加<span class="number">8000000</span>数据</span><br><span class="line"><span class="keyword">CALL</span> insert_emp(<span class="number">100001</span>,<span class="number">8000000</span>)$$</span><br><span class="line"></span><br><span class="line">#命令结束符，再重新设置为;</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询全部员工 8000000</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 没有创建索引根据员工编号查询员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> empno <span class="operator">=</span> <span class="number">1234567</span>; <span class="comment">-- 花费时间4.38s</span></span><br><span class="line"> <span class="comment">-- 为empno创建索引</span></span><br><span class="line"> <span class="keyword">CREATE</span> INDEX empno_index <span class="keyword">ON</span> emp(empno);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> empno <span class="operator">=</span> <span class="number">1234567</span>; <span class="comment">-- 花费时间0.023s</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">-- 我们根据ename查询,此时的ename没有索引</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;rJwfmT&#x27;</span>; <span class="comment">-- 花费时间4.421s</span></span><br><span class="line"><span class="comment">-- 为ename创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX ename_index <span class="keyword">ON</span> emp(ename);</span><br><span class="line"><span class="comment">-- 有了索引之后的ename查询时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;rJwfmT&#x27;</span>; <span class="comment">-- 花费时间0.070s</span></span><br></pre></td></tr></table></figure><h3 id="9-2、索引操作"><a href="#9-2、索引操作" class="headerlink" title="9.2、索引操作"></a>9.2、索引操作</h3><blockquote><ol><li>主键索引,主键自动的为主索引(类型primary key)</li><li>唯一索引(UNIQUE)</li><li>普通索引(INDEX)</li><li>全文索引(FULLTEXT)[适用于MyISAM]</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t25(</span><br><span class="line">`id` <span class="type">INT</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 查询表是否有索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> t25;</span><br><span class="line"><span class="comment">-- 添加唯一索引 </span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX  name_unique_index <span class="keyword">ON</span> t25 (name);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t25 <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> INDEX (name);</span><br><span class="line"><span class="comment">-- 添加主键索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t25 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加普通索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX id_index <span class="keyword">ON</span> t25 (id);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t25 <span class="keyword">ADD</span> INDEX (id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除索引</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX id_index <span class="keyword">ON</span> t25;</span><br><span class="line"><span class="comment">-- 删除主键索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t25 <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX t25;</span><br><span class="line"><span class="keyword">SHOW</span> INDEXES <span class="keyword">FROM</span> t25;</span><br><span class="line"><span class="keyword">SHOW</span> KEYS <span class="keyword">FROM</span> t25;</span><br></pre></td></tr></table></figure><blockquote><ol><li>较频繁的作为查询条件字段应该创建索引</li><li>唯一性太差的字段不适合单独创建索引,即使频繁作为查询条件</li><li>更新非常频繁的字段不适合创建索引</li><li>不会出现在where子句中字段不该创建索引</li></ol></blockquote><h2 id="10、MySQL事务"><a href="#10、MySQL事务" class="headerlink" title="10、MySQL事务"></a>10、MySQL事务</h2><ul><li><p>什么是事务</p><p>事务用于保证数据的一致性，它由一组相关的dml语句组成，该组的dml语句要么全部成功，要么全部失败。如:转账就要用事务来处理,用以保证数据的一致性。</p></li><li><p>事务和锁</p><p>当执行事务操作时(dml语句),mysql会在表上加锁,防止其他用户改表的数据</p></li><li><p>mysql数据库控制事务的几个重要操作</p><p>start    transaction     —开始一个事务</p><p>savepoint    保存点名    –设置保存点</p><p>rollback to     保存点名    –回退事务</p><p>rollback    –回退全部事务</p><p>commint    –提交事务,所有的操作生效,不能回退</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t26(</span><br><span class="line">`id` <span class="type">INT</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t26;</span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="comment">-- 设置保存点a </span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t26 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置保存点b</span></span><br><span class="line"><span class="keyword">SAVEPOINT</span> b;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t26 <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;jerry&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回退到b</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> b;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>回退事务:</p><p>​    在介绍回退事务前,先介绍一下保存点(savepoint)保存点是事务中的点,用于取消部分事务,当结束事务时(commit),会自动的删除该事务所定义的所有保存点,当执行事务回退时,通过指定保存点可以回退到指定的点。</p><p>提交事务：</p><p>​    使用commit语句就可以提交事务了，当执行commit语句之后，会确认事务的变化、结束事务、删除保存点、释放锁、数据生效。当使用commit语句结束事务之后，其他会话将可以看到事务变化后的新数据，所有数据就正式生效。</p></blockquote><blockquote><ol><li>如果不开启事务,默认情况下,dml操作是自动提交的,不能回滚。</li><li>如果开始一个事务，你没有创建保存点，你可以执行rollback，默认就是回退到你事务开始的状态</li><li>你也可以在这个事务中(还没有提交时),创建多个保存点</li><li>你可以在事务没有提交之前,选择回退到那个保存点</li><li>mysql的事务机制需要innodb的存储引擎才可以使用,myisam不好使</li><li>开始一个事务start transaction,set autocommit  = off</li></ol></blockquote><h3 id="10-1、隔离级别"><a href="#10-1、隔离级别" class="headerlink" title="10.1、隔离级别"></a>10.1、隔离级别</h3><p>​    多个连接开启各自事务操作数据库中数据时，数据库系统要负责隔离操作，以保证各个连接在获取数据时的准确性。</p><p>如果不做隔离则会产生脏读、不可重复读、幻读</p><p>脏读：当一个事务读取到另一个事务尚未提交的修改时，产生脏读</p><p>不可重复读：同一个查询在同一事务中多次进行，由于其他提交事务所做的修改或删除，每次返回不同的结果集，此时发生不可重复读取。</p><p>幻读：同一查询在同一事务中多次进行，由于其他提交事务，所做的插入操作，每次返回不同的结果集，此时发生幻读。</p><p><img src="https://images.hckun.cn/image-20211110214516471.png" alt="image-20211110214516471"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">查看mysql事务的隔离级别: <span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@tx</span>_isolation  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> REPEATABLE<span class="operator">-</span>READ <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">修改事务的隔离级别: <span class="keyword">set</span> session transaction isolation level read uncommitted</span><br></pre></td></tr></table></figure><p>事务的acid特性</p><p>原子性(Atomicity)原子性是指事务是一个不可分割的工作单位,事务中的操作要么都发生,要么都不发生</p><p>一致性(Consistency)事务必须使数据库从一个一致性状态变换到另一个一致性状态</p><p>隔离性(Isolation)事务的隔离性是多个用户并发访问数据库时,数据库为每一个用户开启的事务,不能被其他事务的操作数据所干扰,多个并发事务之间要相互隔离</p><p>持久性(Durability)持久性是指一个事务一旦被提交,它对数据库中数据的改变就是永久性的,接下来即使数据库发生故障也不应该对其有任何影响</p><h2 id="11、存储引擎"><a href="#11、存储引擎" class="headerlink" title="11、存储引擎"></a>11、存储引擎</h2><h3 id="11-1、引擎分类"><a href="#11-1、引擎分类" class="headerlink" title="11.1、引擎分类"></a>11.1、引擎分类</h3><ol><li><p>MySQL的表类型由存储引擎(Stirage Engines)决定,主要包括MyISAM、innoDB、Memory等</p></li><li><p>MySQL数据表主要支持六种类型，分别是CSV、Memory、ARCHIVE、MRG、MYISAM、InnoDB</p></li><li><p>这六种又分为两类，一类是事务安全型(transaction-safe),比如:InnoDB;其余都属于第二类,称为非事务安全型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看所有引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> ENGINES;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20211113185109756.png" alt="image-20211113185109756"></p></li></ol><p><img src="https://images.hckun.cn/image-20211113185208594.png" alt="image-20211113185208594"></p><blockquote><ol><li>MYISAM不支持事务、也不支持外键、但其访问速度快，对事务完整性没有要求</li><li>InnoDB存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但是比起MyISAM存储引擎，InnoDB写的处理效率会差一些并且会占用更多的磁盘空间以保留数据和索引</li><li>MEMORY存储引擎使用存在内存中的内容创建表。每个MEMORY表只实际对应一个磁盘文件。MEMORY类型的表访问非常得快，因为它的数是放在内容中的，并且默认使用HASH索引。但是一旦服务关闭，表中的数据就会丢掉，表的结构还在</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- MyISAM存储引擎不支持事务</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t27(</span><br><span class="line">`id` <span class="type">INT</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">)ENGINE MYISAM ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> a;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t27 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t27;</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> a;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- memory存储引擎数据存储在内存中,重启musql数据会消失表结构还存在</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t28(</span><br><span class="line">`id` <span class="type">INT</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表的存储引擎</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t28 ENGINE MEMORY;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t28 <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t28;</span><br></pre></td></tr></table></figure><p><strong>如何选择存储引擎</strong></p><ol><li>如果你的应用不需要事务,处理的只是基本的CRUD操作,那么MyISAM是不二选择,速度快</li><li>如果需要支持事务,选择InnoDB</li><li>Memory存储引擎就是将数据存储在内存中,由于没有磁盘I/O的等待,速度极快。但由于是内存存储引擎，所做的任何修改在服务器重启后都将消失(经典用法 用户的在线状态)</li></ol><h2 id="12、视图"><a href="#12、视图" class="headerlink" title="12、视图"></a>12、视图</h2><p>​    视图是一个虚拟的表，其内容由查询定义。同真实的表一样，视图包含列，其数据来自对应的真实表(基表)</p><blockquote><ol><li>视图是根据基表来创建的视图是虚拟的表</li><li>视图也有列,数据来自基表</li><li>通过视图可以修改基表的数据</li><li>基表的改变,也会影响到视图的数据</li></ol></blockquote><p><strong>视图语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">create</span> <span class="keyword">view</span> 视图名 <span class="keyword">as</span> <span class="keyword">select</span>语句 <span class="comment">-- 创建视图</span></span><br><span class="line"><span class="number">2.</span> <span class="keyword">alter</span> <span class="keyword">view</span> 视图名 <span class="keyword">as</span> <span class="keyword">select</span>语句<span class="comment">-- 修改视图</span></span><br><span class="line"><span class="number">3.</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">view</span> 视图名<span class="comment">-- 查看视图</span></span><br><span class="line"><span class="number">4.</span> <span class="keyword">drop</span> <span class="keyword">view</span> 视图名<span class="number">1</span>,视图名<span class="number">2</span><span class="comment">-- 删除视图</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 创建一个视图emp_view01,只能查询emp表的(empno、ename、job、deptno)信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_view01 <span class="keyword">AS</span> <span class="keyword">SELECT</span> empno,ename,job,deptno <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询视图</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_view01;</span><br><span class="line"><span class="comment">-- 查询视图结构</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_view01;</span><br><span class="line"><span class="comment">-- 修改视图</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> emp_view01 <span class="keyword">AS</span> <span class="keyword">SELECT</span> empno,ename,job <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 删除视图</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> emp_view01;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 视图中再使用视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_view02 <span class="keyword">AS</span> <span class="keyword">SELECT</span> empno,job <span class="keyword">FROM</span> emp_view01;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_view02;</span><br></pre></td></tr></table></figure><p><strong>视图使用特点</strong></p><blockquote><ol><li>安全。一些数据表有着重要的信息。有些字段是保密的，不能让用户直接看到。这时就创建一个视图，在这张视图中只保留一部分字段。这样，用户就可以查询自己需要的字段，不能查看保密的字段。</li><li>性能。关系数据库的数据常常会分表存储，使用外键建立这些表之间的关系。这时，数据库查询通常会用到连接(JOIN)。这样做不但麻烦，效率相对也比较低。如果建立一个视图，将相关的表和字段组合在一起，就可以避免使用JOIN查询的数据。</li><li>灵活。如果系统中有一张旧表，这张表由于设计的问题，即将被废弃。然而，很多应用都是基于这张表，不易修改。这时就可以建立一张视图，视图中的数据直接映射到新建的表。这样，就可以很少做很多改动，也达到了升级数据表的目的。</li></ol></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 针对 emp ，dept , 和   salgrade 张三表.创建一个视图 emp_view03，</span></span><br><span class="line"><span class="comment">-- 可以显示雇员编号，雇员名，雇员部门名称和 薪水级别[即使用三张表，构建一个视图]</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> emp_view03 <span class="keyword">AS</span> <span class="keyword">SELECT</span></span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">dname,</span><br><span class="line">grade </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">emp,</span><br><span class="line">dept,</span><br><span class="line">salgrade </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">emp.deptno <span class="operator">=</span> dept.deptno </span><br><span class="line"><span class="keyword">AND</span> sal <span class="keyword">BETWEEN</span> losal </span><br><span class="line"><span class="keyword">AND</span> hisal;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp_view03;</span><br></pre></td></tr></table></figure><h2 id="13、MySQL管理"><a href="#13、MySQL管理" class="headerlink" title="13、MySQL管理"></a>13、MySQL管理</h2><h3 id="13-1、用户管理"><a href="#13-1、用户管理" class="headerlink" title="13.1、用户管理"></a>13.1、用户管理</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;hck&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;hck&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment">-- 修改自己的密码</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"><span class="comment">-- 修改他人的密码,需要修改密码的权限</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="operator">=</span> PASSWORD(<span class="string">&#x27;abcd&#x27;</span>);</span><br><span class="line"><span class="comment">-- root修改其他用户的密码</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;hck&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="operator">=</span> PASSWORD(<span class="string">&#x27;abcde&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="13-2、权限管理"><a href="#13-2、权限管理" class="headerlink" title="13.2、权限管理"></a>13.2、权限管理</h3><p><strong>MySQL中的权限</strong></p><p><img src="https://images.hckun.cn/image-20211113205910788.png" alt="image-20211113205910788"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">给用户授权</span><br><span class="line">基本语法</span><br><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> 库.对象名 <span class="keyword">to</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;登录位置&#x27;</span> [identified <span class="keyword">by</span> <span class="string">&#x27;密码&#x27;</span>]</span><br><span class="line">说明:</span><br><span class="line">权限列表,多个权限用逗号分开</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> ......</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">delete</span>,<span class="keyword">create</span> <span class="keyword">on</span> ......</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> [privileges] <span class="keyword">on</span> ...... <span class="operator">/</span><span class="operator">/</span>表示赋予该用户在该对象上的所有权限</span><br><span class="line">特别说明:</span><br><span class="line"><span class="operator">*</span>.<span class="operator">*</span>:代表本系统中的所有数据库的所有对象(表、视图、存储过程)</span><br><span class="line">库.<span class="operator">*</span>：代表某个数据库中的所有数据对象(表,视图,存储过程等)</span><br><span class="line">identified <span class="keyword">by</span>可以省略,也可以写出</span><br><span class="line">如果用户存在,就是修改该用户的密码</span><br><span class="line">如果该用户不存在,就是创建用户</span><br><span class="line"></span><br><span class="line">回收用户授权</span><br><span class="line"><span class="keyword">revoke</span> 权限列表 <span class="keyword">on</span> 库.对象名 <span class="keyword">from</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;登录位置&#x27;</span></span><br><span class="line">权限生效指令</span><br><span class="line">如果权限没有生效,可以执行下面命令:FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;hck&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment">-- 创建库和表testdb下的news表</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE testdb;</span><br><span class="line">USE testdb;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> news(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给用户分配查看news表和添加数据的权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span> <span class="keyword">ON</span> testdb.news <span class="keyword">TO</span> <span class="string">&#x27;hck&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改用户密码</span></span><br><span class="line"><span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;hck&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>  <span class="operator">=</span> PASSWORD(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"><span class="comment">-- 赋予删除权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">delete</span> <span class="keyword">ON</span> testdb.news <span class="keyword">TO</span> <span class="string">&#x27;hck&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment">-- 回收查看、添加和删除权限</span></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span>,<span class="keyword">DELETE</span>,<span class="keyword">INSERT</span> <span class="keyword">ON</span> testdb.news <span class="keyword">FROM</span> <span class="string">&#x27;hck&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment">-- 刷新权限</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="comment">-- 删除用户</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;hck&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>细节说明</strong></p><blockquote><ol><li>在创建用户的时候,如果不指定Host,则为%,%表示所有IP都有连接权限</li><li>你也可以指定 create user ‘xxx‘@’192.168.1.%’ 表示xxx用户在192.168.0.*的ip可以登录mysql</li><li>在删除用户的时候,如果host不是%,需要明确指定’用户‘@’host值’</li></ol></blockquote><h2 id="14、SQL练习"><a href="#14、SQL练习" class="headerlink" title="14、SQL练习"></a>14、SQL练习</h2><blockquote><p>1、</p></blockquote> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看dept表和emp表的结构</span></span><br><span class="line"><span class="keyword">DESC</span> dept;</span><br><span class="line"><span class="keyword">DESC</span> emp;</span><br><span class="line"><span class="comment">-- 显示所有部门名称</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dept;</span><br><span class="line"><span class="comment">-- 显示所有雇员名及其全年收入13月(工资+补助)并指定列别名年收入</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,(sal<span class="operator">+</span>IFNULL(comm,<span class="number">0</span>))<span class="operator">*</span><span class="number">13</span> <span class="string">&#x27;年收入&#x27;</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 显示雇员超过2850的雇员姓名和工资</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal<span class="operator">&gt;</span><span class="number">2850</span>;</span><br><span class="line"><span class="comment">-- 显示工资不在1500到2850之间的所有雇员名及工资</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">1500</span> <span class="keyword">AND</span> <span class="number">2850</span>;</span><br><span class="line"><span class="comment">-- 显示编号为7566的雇员姓名及所在部门编号</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> empno <span class="operator">=</span> <span class="number">7566</span>;</span><br><span class="line"><span class="comment">-- 显示部门10和30中工资超过1500的雇员名及工资</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal<span class="operator">&gt;</span><span class="number">1500</span> <span class="keyword">AND</span> (deptno <span class="operator">=</span> <span class="number">10</span> <span class="keyword">OR</span> deptno <span class="operator">=</span> <span class="number">30</span>);</span><br><span class="line"><span class="comment">-- 显示无管理者的雇员名及岗位</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> mgr <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="comment">-- 显示在1991年2月1日到1991年5月1日之间雇用的雇员名,岗位及雇用日期,并以雇用日期进行排序</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,job,hiredate <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> hiredate <span class="keyword">BETWEEN</span> <span class="string">&#x27;1991-02-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;1991-05-01&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> hiredate;</span><br><span class="line"><span class="comment">-- 显示获得补助的所有雇员名,工资及补助,并以工资降序排列</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal,comm <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> comm <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><blockquote><p>2、</p></blockquote> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 选择部门30中的所有员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"><span class="comment">-- 列出所有办事员(CLERK)的姓名,编号和部门编号</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,empno,deptno <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>;</span><br><span class="line"><span class="comment">-- 找出佣金高于薪金的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> comm <span class="operator">&gt;</span> sal;</span><br><span class="line"><span class="comment">-- 找出佣金高于薪金60%的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> comm <span class="operator">&gt;</span> sal<span class="operator">*</span><span class="number">0.6</span>;</span><br><span class="line"><span class="comment">-- 找出部门10中所有经理(MANAGER)和部门20中所有办事员(CLERK)的详细资料</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> (deptno <span class="operator">=</span> <span class="number">10</span> <span class="keyword">AND</span> job <span class="operator">=</span> <span class="string">&#x27;MNAGER&#x27;</span>  ) <span class="keyword">OR</span> ( deptno <span class="operator">=</span> <span class="number">20</span> <span class="keyword">AND</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>);</span><br><span class="line"><span class="comment">-- 找出部门10中所有经理(MANAGER),部门20中所有办事员(CLERK),还有既不是经理又不是办事员但其薪金大于或等于2000的所有员工的详细资料</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> (deptno <span class="operator">=</span> <span class="number">10</span> <span class="keyword">AND</span> job <span class="operator">=</span> <span class="string">&#x27;MNAGER&#x27;</span>  ) <span class="keyword">OR</span> ( deptno <span class="operator">=</span> <span class="number">20</span> <span class="keyword">AND</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>) <span class="keyword">OR</span>(job <span class="operator">!=</span> <span class="string">&#x27;MNAGER&#x27;</span> <span class="keyword">AND</span> job <span class="operator">!=</span> <span class="string">&#x27;CLERK&#x27;</span> <span class="keyword">AND</span> sal<span class="operator">&gt;=</span><span class="number">2000</span>);</span><br><span class="line"><span class="comment">-- 找出收取佣金的员工的不同工作</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> comm <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> job;</span><br><span class="line"><span class="comment">-- 找出不收取佣金或收取佣金低于100的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> comm <span class="keyword">IS</span>  <span class="keyword">NULL</span> <span class="keyword">OR</span> comm <span class="operator">&lt;</span> <span class="number">100</span>;</span><br><span class="line"><span class="comment">-- 找出各月倒数第三天受雇的所有员工</span></span><br><span class="line"><span class="comment">-- LAST_DAY()获取月份的最后一天</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> LAST_DAY(hiredate) <span class="operator">=</span> DATE_ADD(hiredate,<span class="type">INTERVAL</span> <span class="number">2</span> <span class="keyword">DAY</span>);</span><br><span class="line"><span class="comment">-- 找出早于12年前受佣的员工</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span>   DATE_SUB(now(),<span class="type">INTERVAL</span> <span class="number">12</span> <span class="keyword">YEAR</span>) <span class="operator">&gt;</span> hiredate ;</span><br><span class="line"><span class="comment">-- 以首字母小写的方式显示所有员工姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> LCASE(<span class="keyword">LEFT</span>(ename,<span class="number">1</span>)) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="comment">-- 显示正好为5个字符的员工的姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> ename <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> LENGTH(ename) <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><blockquote><p>3、</p></blockquote> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 显示不带有&quot;R&quot;的员工的姓名.</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%R%&#x27;</span></span><br><span class="line"><span class="comment">-- 显示所有员工姓名的前三个字符.</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(ename,<span class="number">3</span>) <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">-- 显示所有员工的姓名,用a替换所有&quot;A&quot;</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(ename, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">-- 显示满10年服务年限的员工的姓名和受雇日期.</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, hiredate</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> DATE_ADD(hiredate, <span class="type">INTERVAL</span> <span class="number">10</span> <span class="keyword">YEAR</span>) <span class="operator">&lt;=</span> NOW()</span><br><span class="line"><span class="comment">-- 显示员工的姓名和受雇日期,根据其服务年限,将最老的员工排在最前面.</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, hiredate</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hiredate </span><br><span class="line"><span class="comment">-- 显示所有员工的姓名、工作和薪金,按工作降序排序,若工作相同则按薪金排序.</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, job, sal</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> job <span class="keyword">DESC</span>, sal </span><br><span class="line"><span class="comment">-- 显示所有员工的姓名、加入公司的年份和月份,按受雇日期所在月排序,</span></span><br><span class="line"><span class="comment">-- 若月份相同则将最早年份的员工排在最前面.</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, CONCAT(<span class="keyword">YEAR</span>(hiredate),<span class="string">&#x27;-&#x27;</span>, <span class="keyword">MONTH</span>(hiredate))</span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">MONTH</span>(hiredate), <span class="keyword">YEAR</span>(hiredate)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显示在一个月为30天的情况所有员工的日薪金,忽略余数.</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, <span class="built_in">FLOOR</span>(sal <span class="operator">/</span> <span class="number">30</span>), sal <span class="operator">/</span> <span class="number">30</span> </span><br><span class="line"><span class="keyword">FROM</span> emp; </span><br><span class="line"><span class="comment">-- 找出在(任何年份的)2月受聘的所有员工。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(hiredate) <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="comment">-- 对于每个员工,显示其加入公司的天数. </span></span><br><span class="line"><span class="keyword">SELECT</span> ename, DATEDIFF(NOW(), hiredate) </span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="comment">-- 显示姓名字段的任何位置包含&quot;A&quot;的所有员工的姓名.</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> emp</span><br><span class="line"><span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;%A%&#x27;</span></span><br><span class="line"><span class="comment">-- 以年月日的方式显示所有员工的服务年限.   (大概)</span></span><br><span class="line"><span class="comment">-- 思路 1. 先求出 工作了多少天 </span></span><br><span class="line"><span class="keyword">SELECT</span> ename, <span class="built_in">FLOOR</span>(DATEDIFF(NOW(), hiredate) <span class="operator">/</span> <span class="number">365</span>) <span class="keyword">AS</span> &quot; 工作年 &quot;, </span><br><span class="line"><span class="built_in">FLOOR</span>((DATEDIFF(NOW(), hiredate) <span class="operator">%</span> <span class="number">365</span>) <span class="operator">/</span> <span class="number">31</span>) <span class="keyword">AS</span> &quot; 工作月 &quot;,</span><br><span class="line">DATEDIFF(NOW(), hiredate) <span class="operator">%</span> <span class="number">31</span> <span class="keyword">AS</span> &quot; 工作天&quot;</span><br><span class="line"><span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure><blockquote><p>4、</p></blockquote> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列出至少有一个员工的所有部门</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno,<span class="built_in">count</span>(deptno) number <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">HAVING</span> number <span class="operator">&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 列出薪金比“SMITH”多的所有员工</span></span><br><span class="line"><span class="keyword">SELECT</span> ename <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>);</span><br><span class="line"><span class="comment">-- 列出受雇日期晚于其直接上级的所有员工</span></span><br><span class="line"><span class="keyword">SELECT</span> worker.ename,leader.ename <span class="keyword">FROM</span> emp worker , emp leader <span class="keyword">WHERE</span> worker.hiredate <span class="operator">&gt;</span> leader.hiredate <span class="keyword">AND</span> worker.mgr <span class="operator">=</span> leader.empno; </span><br><span class="line"><span class="comment">-- 列出部门名称和这些部门的员工信息，同时列出那些没有员工的部门</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,emp.deptno,dept.dname <span class="keyword">FROM</span> emp <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> emp.deptno <span class="operator">=</span> dept.deptno;</span><br><span class="line"><span class="comment">-- 列出所有“CLERK”（办事员）的姓名及其部门名称</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,emp.deptno,dept.dname <span class="keyword">FROM</span> emp ,dept <span class="keyword">WHERE</span> emp.deptno <span class="operator">=</span> dept.deptno <span class="keyword">AND</span> job <span class="operator">=</span> <span class="string">&#x27;CLERK&#x27;</span>;</span><br><span class="line"><span class="comment">-- 列出最低薪金大于1500的各种工作</span></span><br><span class="line"><span class="keyword">SELECT</span> job,<span class="built_in">min</span>(sal) sal <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> job <span class="keyword">HAVING</span> sal <span class="operator">&gt;</span> <span class="number">1500</span>;</span><br><span class="line"><span class="comment">-- 列出在部门“SALES”（销售部）工作的员工的姓名</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, dname</span><br><span class="line"><span class="keyword">FROM</span> emp , dept</span><br><span class="line"><span class="keyword">WHERE</span> emp.deptno <span class="operator">=</span> dept.deptno <span class="keyword">AND</span> dname <span class="operator">=</span> <span class="string">&#x27;SALES&#x27;</span>;</span><br><span class="line"><span class="comment">-- 列出薪金高于公司平均薪金的所有员工</span></span><br><span class="line"><span class="keyword">SELECT</span> ename <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal) <span class="keyword">FROM</span> emp);</span><br></pre></td></tr></table></figure><blockquote><p>5、</p></blockquote> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列出与“SCOTT”从事相同工作的所有员工</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> (<span class="keyword">SELECT</span> job <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="operator">=</span> <span class="string">&#x27;SCOTT&#x27;</span>) <span class="keyword">AND</span> ename <span class="operator">!=</span> <span class="string">&#x27;SCOTT&#x27;</span>;</span><br><span class="line"><span class="comment">-- 列出薪金高于所在部门30的工作的所有员工的薪金的员工姓名和薪金</span></span><br><span class="line"><span class="keyword">SELECT</span> ename , sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sal <span class="operator">&gt;</span> <span class="keyword">ALL</span>(<span class="keyword">SELECT</span> sal <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptno <span class="operator">=</span> <span class="number">30</span>);</span><br><span class="line"><span class="comment">-- 列出在每个部门工作的员工数量、平均工资和平均服务期限(时间单位)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="string">&#x27;部门员工数量&#x27;</span>, deptno, <span class="built_in">AVG</span>(sal) <span class="string">&#x27;部门平均工资&#x27;</span>,FORMAT(DATEDIFF(now(),hiredate)<span class="operator">/</span><span class="number">365</span>,<span class="number">2</span>) <span class="string">&#x27;部门平均工作期限(年)&#x27;</span>  <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno ;</span><br><span class="line"><span class="comment">-- 列出所有员工的姓名、部门名称和工资。</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,sal, dept.dname <span class="keyword">FROM</span> emp <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> emp.deptno <span class="operator">=</span> dept.deptno;</span><br><span class="line"><span class="comment">-- 列出所有部门的详细信息和部门人数。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="string">&#x27;部门人数&#x27;</span> <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno;</span><br><span class="line"><span class="keyword">SELECT</span> dept.<span class="operator">*</span>,emp2.number   <span class="keyword">FROM</span> dept <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) number,deptno <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno) emp2 <span class="keyword">ON</span> dept.deptno <span class="operator">=</span> emp2.deptno;</span><br><span class="line"><span class="comment">-- 列出各种工作的最低工资</span></span><br><span class="line"><span class="keyword">SELECT</span> job,<span class="built_in">MIN</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> job;</span><br><span class="line"><span class="comment">-- 列出MANAGER（经理）的最低薪金</span></span><br><span class="line"><span class="keyword">SELECT</span> ename,<span class="built_in">MIN</span>(sal) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span>;</span><br><span class="line"><span class="comment">-- 列出所有员工的年工资,按年薪从低到高排序</span></span><br><span class="line"><span class="keyword">SELECT</span> ename, (sal<span class="operator">+</span>IFNULL(comm,<span class="number">0</span>))<span class="operator">*</span><span class="number">12</span> year_sal <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> year_Sal ;</span><br></pre></td></tr></table></figure><blockquote><p>6、</p></blockquote> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 设学校环境如下:一个系有若干个专业，每个专业一年只招一个班，每个班有若干个学生。</span></span><br><span class="line"><span class="comment">-- 现要建立关于系、学生、班级的数据库，关系模式为：</span></span><br><span class="line"><span class="comment">-- 班CLASS （班号classid，专业名subject，系名deptname，入学年份enrolltime，人数num）</span></span><br><span class="line"><span class="comment">-- 学生STUDENT （学号studentid，姓名name，年龄age，班号classid）</span></span><br><span class="line"><span class="comment">-- 系 DEPARTMENT （系号departmentid，系名deptname）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> DEPARTMENT (</span><br><span class="line">departmentid <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">deptname <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `class` (</span><br><span class="line">classid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`subject` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">deptname <span class="type">VARCHAR</span>(<span class="number">32</span>) , <span class="comment">-- 外键字段，在表定义后指定</span></span><br><span class="line">enrolltime <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">2000</span>,</span><br><span class="line">num <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (deptname) <span class="keyword">REFERENCES</span>  DEPARTMENT(deptname));</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> hsp_student (</span><br><span class="line">studentid <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">age <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">classid <span class="type">INT</span>, <span class="comment">-- 外键</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (classid) <span class="keyword">REFERENCES</span>  `class`(classid));</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="string">&#x27;001&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="string">&#x27;002&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="string">&#x27;003&#x27;</span>,<span class="string">&#x27;化学&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="string">&#x27;004&#x27;</span>,<span class="string">&#x27;中文&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="string">&#x27;005&#x27;</span>,<span class="string">&#x27;经济&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class <span class="keyword">VALUES</span>(<span class="number">101</span>,<span class="string">&#x27;软件&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>,<span class="number">1995</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class <span class="keyword">VALUES</span>(<span class="number">102</span>,<span class="string">&#x27;微电子&#x27;</span>,<span class="string">&#x27;计算机&#x27;</span>,<span class="number">1996</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class <span class="keyword">VALUES</span>(<span class="number">111</span>,<span class="string">&#x27;无机化学&#x27;</span>,<span class="string">&#x27;化学&#x27;</span>,<span class="number">1995</span>,<span class="number">29</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class <span class="keyword">VALUES</span>(<span class="number">112</span>,<span class="string">&#x27;高分子化学&#x27;</span>,<span class="string">&#x27;化学&#x27;</span>,<span class="number">1996</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class <span class="keyword">VALUES</span>(<span class="number">121</span>,<span class="string">&#x27;统计数学&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="number">1995</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class <span class="keyword">VALUES</span>(<span class="number">131</span>,<span class="string">&#x27;现代语言&#x27;</span>,<span class="string">&#x27;中文&#x27;</span>,<span class="number">1996</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class <span class="keyword">VALUES</span>(<span class="number">141</span>,<span class="string">&#x27;国际贸易&#x27;</span>,<span class="string">&#x27;经济&#x27;</span>,<span class="number">1997</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class <span class="keyword">VALUES</span>(<span class="number">142</span>,<span class="string">&#x27;国际金融&#x27;</span>,<span class="string">&#x27;经济&#x27;</span>,<span class="number">1996</span>,<span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hsp_student <span class="keyword">VALUES</span>(<span class="number">8101</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>,<span class="number">101</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hsp_student <span class="keyword">VALUES</span>(<span class="number">8102</span>,<span class="string">&#x27;钱四&#x27;</span>,<span class="number">16</span>,<span class="number">121</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hsp_student <span class="keyword">VALUES</span>(<span class="number">8103</span>,<span class="string">&#x27;王玲&#x27;</span>,<span class="number">17</span>,<span class="number">131</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hsp_student <span class="keyword">VALUES</span>(<span class="number">8105</span>,<span class="string">&#x27;李飞&#x27;</span>,<span class="number">19</span>,<span class="number">102</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hsp_student <span class="keyword">VALUES</span>(<span class="number">8109</span>,<span class="string">&#x27;赵四&#x27;</span>,<span class="number">18</span>,<span class="number">141</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hsp_student <span class="keyword">VALUES</span>(<span class="number">8110</span>,<span class="string">&#x27;李可&#x27;</span>,<span class="number">20</span>,<span class="number">142</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hsp_student <span class="keyword">VALUES</span>(<span class="number">8201</span>,<span class="string">&#x27;张飞&#x27;</span>,<span class="number">18</span>,<span class="number">111</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hsp_student <span class="keyword">VALUES</span>(<span class="number">8302</span>,<span class="string">&#x27;周瑜&#x27;</span>,<span class="number">16</span>,<span class="number">112</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hsp_student <span class="keyword">VALUES</span>(<span class="number">8203</span>,<span class="string">&#x27;王亮&#x27;</span>,<span class="number">17</span>,<span class="number">111</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hsp_student <span class="keyword">VALUES</span>(<span class="number">8305</span>,<span class="string">&#x27;董庆&#x27;</span>,<span class="number">19</span>,<span class="number">102</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hsp_student <span class="keyword">VALUES</span>(<span class="number">8409</span>,<span class="string">&#x27;赵龙&#x27;</span>,<span class="number">18</span>,<span class="number">101</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> hsp_student <span class="keyword">VALUES</span>(<span class="number">8510</span>,<span class="string">&#x27;李龙&#x27;</span>,<span class="number">18</span>,<span class="number">101</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 找出所有姓李的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>  <span class="keyword">FROM</span> hsp_student  <span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;李%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 列出所有开设超过1个专业的系的名字</span></span><br><span class="line"><span class="keyword">SELECT</span> deptname,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span>  class <span class="keyword">GROUP</span> <span class="keyword">BY</span>  deptname <span class="keyword">HAVING</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 列出人数大于等于30的系的编号和名字</span></span><br><span class="line"><span class="keyword">SELECT</span> department.deptname,department.departmentid   <span class="keyword">FROM</span> department,(<span class="keyword">SELECT</span> deptname,<span class="built_in">sum</span>(num)  number <span class="keyword">FROM</span>  class  <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptname <span class="keyword">HAVING</span> number <span class="operator">&gt;</span> <span class="number">30</span>) dept2 <span class="keyword">WHERE</span> department.deptname <span class="operator">=</span> dept2.deptname;</span><br><span class="line"><span class="comment">-- 学校又新增加了一个物理系，编号为006</span></span><br><span class="line"><span class="comment">-- 添加一条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="string">&#x27;006&#x27;</span>,<span class="string">&#x27;物理系&#x27;</span>);</span><br><span class="line"><span class="comment">-- 学生张三退学，请更新相关的表</span></span><br><span class="line"><span class="comment">-- 分析：1. 张三所在班级的人数-1 2. 将张三从学生表删除  3. 需要使用事务控制</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">UPDATE</span> class <span class="keyword">SET</span> num <span class="operator">=</span> num <span class="number">-1</span> <span class="keyword">WHERE</span> classid <span class="operator">=</span> (<span class="keyword">SELECT</span> classid <span class="keyword">FROM</span> hsp_student <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> hsp_student <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础</title>
      <link href="/post/cef9bec2.html"/>
      <url>/post/cef9bec2.html</url>
      
        <content type="html"><![CDATA[<p>本文参考:<a href="https://www.bilibili.com/video/BV1Sv411r7vd?spm_id_from=333.337.search-card.all.click">【小白入门 通俗易懂】2021韩顺平 一周学会Linux</a></p><h1 id="1、Linux目录结构"><a href="#1、Linux目录结构" class="headerlink" title="1、Linux目录结构"></a>1、Linux目录结构</h1><h2 id="1-1、基本介绍"><a href="#1-1、基本介绍" class="headerlink" title="1.1、基本介绍"></a>1.1、基本介绍</h2><ol><li>linux 的文件系统是采用级层式的树状目录结构，在此结构中的最上层是根目录“/”，然后在此目录下再创建其他的<br>目录</li><li>在 Linux 世界里，一切皆文件</li></ol><h2 id="1-2、具体的目录结构"><a href="#1-2、具体的目录结构" class="headerlink" title="1.2、具体的目录结构"></a>1.2、具体的目录结构</h2><ol><li><p><code>/bin</code> <strong>[常用]</strong> (/usr/bin 、 /usr/local/bin)</p><p>是 Binary 的缩写, 这个目录存放着最经常使用的命令</p></li><li><p><code>/sbin</code>  (/usr/sbin 、 /usr/local/sbin)</p><p>s 就是 Super User 的意思，这里存放的是系统管理员使用的系统管理程序</p></li><li><p><code>/home</code> <strong>[常用]</strong></p><p>存放普通用户的主目录，在 Linux 中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名</p></li><li><p><code>/root</code> <strong>[常用]</strong> </p><p>该目录为系统管理员，也称作超级权限者的用户主目录</p></li><li><p><code>/lib</code> </p><p>系统开机所需要最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要<br>用到这些共享库</p></li><li><p><code>lost+found</code> </p><p>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</p></li><li><p><code>/etc</code> <strong>[常用]</strong></p><p>所有的系统管理所需要的配置文件和子目录, 比如安装 mysql 数据库 my.conf</p></li><li><p><code>/usr</code> <strong>[常用]</strong></p><p>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与 windows 下的 program files 目录</p></li><li><p><code>/boot</code> <strong>[常用]</strong></p><p>存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件</p></li><li><p><code>/proc</code> <strong>[不能动]</strong></p><p>这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息</p></li><li><p><code>/srv</code> <strong>[不能动]</strong></p><p>service 缩写，该目录存放一些服务启动之后需要提取的数据</p></li><li><p><code>/sys</code> <strong>[不能动]</strong></p><p>这是 linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs =》</p></li><li><p><code>/temp</code></p><p>这个目录是用来存放一些临时文件的</p></li><li><p><code>/dev</code></p><p>类似于 windows 的设备管理器，把所有的硬件用文件的形式存储</p></li><li><p><code>/media</code> <strong>[常用]</strong></p><p>linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个<br>目录下</p></li><li><p><code>/mnt</code> <strong>[常用]</strong></p><p>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上</p></li><li><p><code>/opt</code></p><p>这是给主机额外安装软件所存放的目录。如安装 ORACLE 数据库就可放到该目录下。默认为空</p></li><li><p><code>/usr/local</code> <strong>[常用]</strong></p><p>这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序</p></li><li><p><code>/var</code> <strong>[常用]</strong></p><p>这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件</p></li><li><p><code>/selinux [security-enhanced linux]</code></p><p>SELinux 是一种安全子系统,它能控制程序只能访问特定文件, 有三种工作模式，可以自行设置</p></li></ol><h1 id="2、Vi-和-Vim-编辑器"><a href="#2、Vi-和-Vim-编辑器" class="headerlink" title="2、Vi 和 Vim 编辑器"></a>2、Vi 和 Vim 编辑器</h1><h2 id="2-1、vi-和-vim-的基本介绍"><a href="#2-1、vi-和-vim-的基本介绍" class="headerlink" title="2.1、vi 和 vim 的基本介绍"></a>2.1、vi 和 vim 的基本介绍</h2><p>Linux 系统会内置 vi 文本编辑器</p><p>Vim 具有程序编辑的能力，可以看做是 Vi 的增强版本，可以主动的以字体颜色辨别语法的正确性，方便程序设计。<br>代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用</p><h2 id="2-2、vi-和-vim-常用的三种模式"><a href="#2-2、vi-和-vim-常用的三种模式" class="headerlink" title="2.2、vi 和 vim 常用的三种模式"></a>2.2、vi 和 vim 常用的三种模式</h2><h3 id="2-2-1、正常模式"><a href="#2-2-1、正常模式" class="headerlink" title="2.2.1、正常模式"></a>2.2.1、正常模式</h3><p>​    以 vim 打开一个档案就直接进入一般模式了(这是默认的模式)。在这个模式中， 你可以使用『上下左右』按键来</p><p>移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容， 也可以使用『复制、粘贴』来处理你的文件数<br>据</p><h3 id="2-2-2、插入模式"><a href="#2-2-2、插入模式" class="headerlink" title="2.2.2、插入模式"></a>2.2.2、插入模式</h3><p>按下 i, I, o, O, a, A, r, R 等任何一个字母之后才会进入编辑模式, 一般来说按 i 即可，在插入模式中回到正常模式按<code>ESC</code>即可</p><h3 id="2-2-3、命令行模式"><a href="#2-2-3、命令行模式" class="headerlink" title="2.2.3、命令行模式"></a>2.2.3、命令行模式</h3><p>在这个模式当中， 可以提供你相关指令，完成读取、存盘、替换、离开 vim 、显</p><p>示行号等的动作则是在此模式中达成的</p><p>在正常模式中输入<code>:</code>或<code>/</code>即可进入命令行模式</p><p>在插入模式中先按<code>ESC</code>回到正常模式,在进入命令行模式</p><p>在命令行模式中输入<code>wq</code>保存并退出; 输入<code>q</code>不保存退出;输入<code>q!</code>强制退出</p><h2 id="2-3、vi和vim常用快捷键"><a href="#2-3、vi和vim常用快捷键" class="headerlink" title="2.3、vi和vim常用快捷键"></a>2.3、vi和vim常用快捷键</h2><ol><li>拷贝当前行 正常模式中输入<code>yy</code>,拷贝当前行向下的5行<code>5yy</code>,并粘贴(输入<code>p</code>)</li><li>删除当前行 正常模式中输入<code>dd</code>,删除当前行向下的5行<code>5dd</code></li><li>文件中查找内容,命令行模式下输入<code>/查找词</code>然后<code>回车</code>查找,输入<code>n</code>查找下一个,输入<code>N</code>查找上一个</li><li>设置文件行号,命令行模式下输入<code>:set nu</code>;取消文件行号输入<code>:set nonu</code> 其中<code>:</code>代表已进入命令行模式</li><li>到达文件末尾,在一般模式下输入<code>G</code> 到达文件首行输入<code>gg</code></li><li>在文件中输入内容,在正常模式中输入<code>u</code>可撤销输入</li><li>在正常模式中快速定位到某一行 输入<code>行号+shift+g</code>或<code>行号 gg</code>或<code>行号 G</code></li></ol><p>更多使用快捷键,请查看 <a href="https://www.runoob.com/linux/linux-vim.html">Linux vi/vim</a></p><p><img src="https://images.hckun.cn/image-20220822224201814.png" alt="image-20220822224201814"></p><h1 id="3、开机、重启和用户登录注销"><a href="#3、开机、重启和用户登录注销" class="headerlink" title="3、开机、重启和用户登录注销"></a>3、开机、重启和用户登录注销</h1><h2 id="3-1、关机、重启命令"><a href="#3-1、关机、重启命令" class="headerlink" title="3.1、关机、重启命令"></a>3.1、关机、重启命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">立刻关机</span></span><br><span class="line">shutdown -h now </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1分钟后关机</span></span><br><span class="line">shutdown -h 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">立刻重启计算机</span></span><br><span class="line">shutdown -r now</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关机</span></span><br><span class="line">halt </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启计算机</span></span><br><span class="line">reboot</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">把内存的数据同步到磁盘</span></span><br><span class="line">sync</span><br></pre></td></tr></table></figure><p>注意:</p><blockquote><ol><li>不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中</li><li>目前的 shutdown/reboot/halt 等命令均已经在关机前进行了 sync ， 提醒: 小心驶得万年船</li></ol></blockquote><h2 id="3-2、用户登录和注销"><a href="#3-2、用户登录和注销" class="headerlink" title="3.2、用户登录和注销"></a>3.2、用户登录和注销</h2><ol><li><p>登录时尽量少用 root 帐号登录，因为它是系统管理员，最大的权限，避免操作失误。可以利用普通用户登录，登录<br>后再用”su - 用户名’命令来切换成系统管理员身份</p></li><li><p>在提示符下输入 logout 即可注销用户</p><blockquote><p>logout 注销指令在图形运行级别无效，在运行级别 3 下有效</p></blockquote></li></ol><h1 id="4、用户管理"><a href="#4、用户管理" class="headerlink" title="4、用户管理"></a>4、用户管理</h1><h2 id="4-1、基本介绍"><a href="#4-1、基本介绍" class="headerlink" title="4.1、基本介绍"></a>4.1、基本介绍</h2><p>​    Linux 系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个</p><p>账号，然后以这个账号的身份进入系统</p><h2 id="4-2、添加用户"><a href="#4-2、添加用户" class="headerlink" title="4.2、添加用户"></a>4.2、添加用户</h2><p>语法 <code>useradd 用户名</code> 当创建用户成功后，会自动的创建和用户同名的家目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 home]# useradd tom</span><br><span class="line">[root@ecs-414993 home]# ls</span><br><span class="line">tom</span><br></pre></td></tr></table></figure><p>也可以通过 <code>useradd -d 指定目录 新的用户名</code>，给新创建的用户指定家目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 home]# useradd -d /home/test jerry</span><br><span class="line">[root@ecs-414993 home]# ls</span><br><span class="line">test  tom</span><br></pre></td></tr></table></figure><h2 id="4-3、修改用户密码"><a href="#4-3、修改用户密码" class="headerlink" title="4.3、修改用户密码"></a>4.3、修改用户密码</h2><p>语法 <code>passwd 用户名</code> 回车,输入密码即可</p><h2 id="4-4、删除用户"><a href="#4-4、删除用户" class="headerlink" title="4.4、删除用户"></a>4.4、删除用户</h2><p>语法 <code>userdel 用户名</code></p><ul><li>删除用户 ，但是要保留家目录, <code>userdel 用户名</code></li><li>删除用户以及用户主目录, 比如 tom, <code>userdel -r tom</code></li></ul><p>一般情况下，我们建议保留</p><h2 id="4-5、查询用户信息指令"><a href="#4-5、查询用户信息指令" class="headerlink" title="4.5、查询用户信息指令"></a>4.5、查询用户信息指令</h2><p>基本语法 <code>id 用户名</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 home]# id root</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">[root@ecs-414993 home]# id tom</span><br><span class="line">uid=1000(tom) gid=1000(tom) groups=1000(tom)</span><br></pre></td></tr></table></figure><p>当用户不存在时，返回无此用户</p><h2 id="4-6、切换用户"><a href="#4-6、切换用户" class="headerlink" title="4.6、切换用户"></a>4.6、切换用户</h2><p>可以通过 <code>su - 用户名</code>，切换到高权限用户，比如 root <code>su - root</code></p><p>从权限高的用户切换到权限低的用户，不需要输入密码，反之需要</p><p>当需要返回到原来用户时，使用 exit/logout 指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 ~]# su - tom</span><br><span class="line">Last login: Mon Aug 22 23:48:36 CST 2022 on pts/0</span><br><span class="line">[tom@ecs-414993 ~]$ pwd</span><br><span class="line">/home/tom</span><br><span class="line">[tom@ecs-414993 ~]$ su - root</span><br><span class="line">Password: </span><br><span class="line">Last login: Mon Aug 22 23:48:49 CST 2022 on pts/0</span><br><span class="line">[root@ecs-414993 ~]# logout</span><br><span class="line">[tom@ecs-414993 ~]$ </span><br></pre></td></tr></table></figure><h2 id="4-7、查看当前用户-登录用户"><a href="#4-7、查看当前用户-登录用户" class="headerlink" title="4.7、查看当前用户/登录用户"></a>4.7、查看当前用户/登录用户</h2><p>基本语法：<code>who am i/whoami</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[tom@ecs-414993 ~]$ who an i</span><br><span class="line">tom      pts/0        2022-08-22 23:42 (112.10.222.202)</span><br><span class="line">[tom@ecs-414993 ~]$ whoami</span><br><span class="line">tom</span><br></pre></td></tr></table></figure><h2 id="4-8、用户组"><a href="#4-8、用户组" class="headerlink" title="4.8、用户组"></a>4.8、用户组</h2><p>类似于角色，系统可以对有共性/权限的多个用户进行统一的管理</p><h3 id="4-8-1、新增组"><a href="#4-8-1、新增组" class="headerlink" title="4.8.1、新增组"></a>4.8.1、新增组</h3><p>基本语法： <code>groupadd 组名</code></p><h3 id="4-8-2、删除组"><a href="#4-8-2、删除组" class="headerlink" title="4.8.2、删除组"></a>4.8.2、删除组</h3><p>基本语法：<code>groupdel 组名</code></p><p>增加用户时直接加上组</p><p>基本语法：<code>useradd -g 组名 用户名</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 home]# groupadd wds</span><br><span class="line">[root@ecs-414993 home]# useradd -g wds tom</span><br><span class="line">[root@ecs-414993 home]# ls</span><br><span class="line">test  tom</span><br><span class="line">[root@ecs-414993 home]# id tom</span><br><span class="line">uid=1000(tom) gid=1000(wds) groups=1000(wds)</span><br></pre></td></tr></table></figure><h3 id="4-8-3、修改用户的组"><a href="#4-8-3、修改用户的组" class="headerlink" title="4.8.3、修改用户的组"></a>4.8.3、修改用户的组</h3><p>基本语法： <code>usermod -g 组名 用户名</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 home]# groupadd mojo</span><br><span class="line">[root@ecs-414993 home]# id tom</span><br><span class="line">uid=1000(tom) gid=1000(wds) groups=1000(wds)</span><br><span class="line">[root@ecs-414993 home]# usermod -g mojo tom</span><br><span class="line">[root@ecs-414993 home]# id tom</span><br><span class="line">uid=1000(tom) gid=1001(mojo) groups=1001(mojo)</span><br></pre></td></tr></table></figure><h3 id="4-8-4、用户和组相关文件"><a href="#4-8-4、用户和组相关文件" class="headerlink" title="4.8.4、用户和组相关文件"></a>4.8.4、用户和组相关文件</h3><ol><li><p><strong>/etc/passwd 文件</strong></p><p>用户（user）的配置文件，记录用户的各种信息</p><p>每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录 Shell</p></li><li><p><strong>/etc/shadow 文件</strong></p><p>口令的配置文件</p><p>每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</p></li><li><p><strong>/etc/group 文件</strong></p><p>组(group)的配置文件，记录 Linux 包含的组的信息</p><p>每行含义：组名:口令:组标识号:组内用户列表</p></li></ol><h1 id="5、实用命令"><a href="#5、实用命令" class="headerlink" title="5、实用命令"></a>5、实用命令</h1><h2 id="5-1、指定运行级别"><a href="#5-1、指定运行级别" class="headerlink" title="5.1、指定运行级别"></a>5.1、指定运行级别</h2><p>运行级别说明：</p><ul><li>0：关机</li><li>1：单用户</li><li>2：多用户状态没有网络服务</li><li>3：多用户状态有网络服务</li><li>4：系统未使用保留给用户</li><li>5：图形界面</li><li>6：系统重启</li></ul><p>常用运行级别是 3 和 5 ，也可以指定默认运行级别</p><p>应用，可通过命令<code>init[0123456]</code>来切换不同的运行级别</p><p>查看默认的运行级别命令<code>systemctl get-default</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 home]# systemctl get-default</span><br><span class="line">multi-user.target</span><br></pre></td></tr></table></figure><p>设置默认运行级别命令<code>systemctl set-default TARGET.target</code>,此命令表示将默认运行级别设置为3</p><h2 id="5-2、帮助指令"><a href="#5-2、帮助指令" class="headerlink" title="5.2、帮助指令"></a>5.2、帮助指令</h2><h3 id="5-2-1、man获得帮助指令"><a href="#5-2-1、man获得帮助指令" class="headerlink" title="5.2.1、man获得帮助指令"></a>5.2.1、man获得帮助指令</h3><p>基本语法 <code>man [命令或配置文件]</code></p><p>查看<code>ls</code>命令的用法 <code>man ls</code></p><p><code>ls</code>查看当前目录下的文件,在linux中隐藏文件以<code>.</code>开头,查看隐藏文件<code>ls -a</code></p><p>还可以组合使用 <code>ls -al</code> <code>ls -la</code></p><h3 id="5-2-2、help指令"><a href="#5-2-2、help指令" class="headerlink" title="5.2.2、help指令"></a>5.2.2、help指令</h3><p>基本语法 <code>help 命令</code></p><p>例如 <code>help cd</code></p><p>实际使用中,直接百度某个命令用法即可</p><h2 id="5-3、文件目录类"><a href="#5-3、文件目录类" class="headerlink" title="5.3、文件目录类"></a>5.3、文件目录类</h2><h3 id="5-3-1、pwd指令"><a href="#5-3-1、pwd指令" class="headerlink" title="5.3.1、pwd指令"></a>5.3.1、pwd指令</h3><p>基本语法 <code>pwd</code>   显示当前工作目录的绝对路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 tom]# pwd</span><br><span class="line">/home/tom</span><br></pre></td></tr></table></figure><h3 id="5-3-2、ls指令"><a href="#5-3-2、ls指令" class="headerlink" title="5.3.2、ls指令"></a>5.3.2、ls指令</h3><p>基本语法 <code>ls 选项 目录或文件</code></p><p><code>ls</code> 查看当前目录下文件</p><p><code>ls -l</code> 以列表形式查看当前目录下文件</p><p><code>ls -al</code> <code>ls - la</code> 以列表形式查看当前目录下文件(包含隐藏文件)</p><p><code>ls -l /usr/local</code> 查看指定文件夹下的文件</p><h3 id="5-3-3、cd指令"><a href="#5-3-3、cd指令" class="headerlink" title="5.3.3、cd指令"></a>5.3.3、cd指令</h3><p>基本语法 <code>cd 参数</code> 切换到指定目录</p><p><code>cd /usr/local</code> 进入usr下的local目录</p><p><code>cd ..</code> 回退到当前目录的上一级目录</p><p><code>cd</code> <code>cd ~</code> 回到自己的家目录</p><p><code>cd/</code> 回到根目录</p><h3 id="5-3-4、mkdir指令"><a href="#5-3-4、mkdir指令" class="headerlink" title="5.3.4、mkdir指令"></a>5.3.4、mkdir指令</h3><p>基本语法 <code>mkdir 选项 创建的目录名</code>   用于创建目录</p><p><code>mkdir /test</code> 在当前目录中常见目录test(只能创建单级目录)</p><p><code>mkdir -p /a/b</code> 在当前目录先创建a目录,再在a目录中创建b目录</p><h3 id="5-3-5、rmdir指令"><a href="#5-3-5、rmdir指令" class="headerlink" title="5.3.5、rmdir指令"></a>5.3.5、rmdir指令</h3><p>基本语法<code>rmdir 选项 删除目录名</code> 用于删除目录</p><p><code>rmdir a</code> 删除当前目录下的a目录(只能删除空目录)</p><p><code>rm -rf 删除目录名</code> 删除当前目录下的所有文件</p><h3 id="5-3-6、touch指令"><a href="#5-3-6、touch指令" class="headerlink" title="5.3.6、touch指令"></a>5.3.6、touch指令</h3><p>基本语法<code>touch 文件名</code> 用于创建空文件</p><p><code>touch a.txt</code> 创建了一个a.txt的文件</p><h3 id="5-3-7、cp指令"><a href="#5-3-7、cp指令" class="headerlink" title="5.3.7、cp指令"></a>5.3.7、cp指令</h3><p>基本语法 <code>cp 选项 源目录 新目录</code> 用于拷贝文件到指定目录</p><p>将a.txt拷贝到b目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 local]# ls</span><br><span class="line">a.txt  b  bin  etc  games  HelloWorld.java  hostguard  include  lib  lib64  libexec  sbin  share  src  uniagent</span><br><span class="line">[root@ecs-414993 local]# cp a.txt /usr/local/b</span><br><span class="line">[root@ecs-414993 local]# cd b</span><br><span class="line">[root@ecs-414993 b]# ls</span><br><span class="line">a.txt</span><br></pre></td></tr></table></figure><p><code>cp -r 源目录 新目录</code> `   递归复制整个文件夹</p><p>将a目录中的所有内容拷贝到b目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 local]# ls</span><br><span class="line">a  a.txt  b  bin  etc  games  HelloWorld.java  hostguard  include  lib  lib64  libexec  sbin  share  src  uniagent</span><br><span class="line">[root@ecs-414993 local]# cp -r a /usr/local/b</span><br><span class="line">[root@ecs-414993 local]# cd b</span><br><span class="line">[root@ecs-414993 b]# ls</span><br><span class="line">a  a.txt</span><br><span class="line">[root@ecs-414993 b]# cd a</span><br><span class="line">[root@ecs-414993 a]# ls</span><br><span class="line">1.txt</span><br></pre></td></tr></table></figure><p>使用细节:强制覆盖不提示的方法<code>\cp 选项 源目录 新目录</code> `</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 local]# ls</span><br><span class="line">a  a.txt  b  bin  etc  games  HelloWorld.java  hostguard  include  lib  lib64  libexec  sbin  share  src  uniagent</span><br><span class="line">[root@ecs-414993 local]# cp a.txt /usr/local/b</span><br><span class="line">cp: overwrite ‘/usr/local/b/a.txt’? y</span><br><span class="line">[root@ecs-414993 local]# \cp a.txt /usr/local/b</span><br></pre></td></tr></table></figure><h3 id="5-3-8、rm指令"><a href="#5-3-8、rm指令" class="headerlink" title="5.3.8、rm指令"></a>5.3.8、rm指令</h3><p>基本语法 <code>rm 选项 移除文件或目录名</code>  用于移除文件或目录</p><p><code>rm -r</code> 递归删除整个文件夹  (会出现删除确认)</p><p><code>rm -f</code> 强制删除.不提示</p><p><code>rm -rf</code> 慎用,你要你知道你在做什么</p><h3 id="5-3-9、mv指令"><a href="#5-3-9、mv指令" class="headerlink" title="5.3.9、mv指令"></a>5.3.9、mv指令</h3><p>基本语法 <code>mv 源文件 新文件</code>  移动文件与目录或重命名</p><p>文件重命名a.txt重命名为b.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 local]# ls</span><br><span class="line">a.txt  bin  etc  games  HelloWorld.java  hostguard  include  lib  lib64  libexec  sbin  share  src  uniagent</span><br><span class="line">[root@ecs-414993 local]# mv a.txt b.txt</span><br><span class="line">[root@ecs-414993 local]# ls</span><br><span class="line">bin  b.txt  etc  games  HelloWorld.java  hostguard  include  lib  lib64  libexec  sbin  share  src  uniagent</span><br></pre></td></tr></table></figure><p>移动文件b.txt到b目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 local]# ls</span><br><span class="line">b  bin  b.txt  etc  games  HelloWorld.java  hostguard  include  lib  lib64  libexec  sbin  share  src  uniagent</span><br><span class="line">[root@ecs-414993 local]# mv b.txt /usr/local/b</span><br><span class="line">[root@ecs-414993 local]# cd b</span><br><span class="line">[root@ecs-414993 b]# ls</span><br><span class="line">b.txt</span><br><span class="line">[root@ecs-414993 b]# cd ..</span><br><span class="line">[root@ecs-414993 local]# ls</span><br><span class="line">b  bin  etc  games  HelloWorld.java  hostguard  include  lib  lib64  libexec  sbin  share  src  uniagent</span><br></pre></td></tr></table></figure><p>移动整个目录,将a目录下的所有文件移动到b目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 local]# ls</span><br><span class="line">a  b  bin  etc  games  HelloWorld.java  hostguard  include  lib  lib64  libexec  sbin  share  src  uniagent</span><br><span class="line">[root@ecs-414993 local]# mv a /usr/local/b</span><br><span class="line">[root@ecs-414993 local]# ls</span><br><span class="line">b  bin  etc  games  HelloWorld.java  hostguard  include  lib  lib64  libexec  sbin  share  src  uniagent</span><br><span class="line">[root@ecs-414993 local]# cd b</span><br><span class="line">[root@ecs-414993 b]# ls</span><br><span class="line">a</span><br><span class="line">[root@ecs-414993 b]# cd a</span><br><span class="line">[root@ecs-414993 a]# ls</span><br><span class="line">a.txt</span><br></pre></td></tr></table></figure><h3 id="5-3-10、cat指令"><a href="#5-3-10、cat指令" class="headerlink" title="5.3.10、cat指令"></a>5.3.10、cat指令</h3><p>基本语法 <code>cat 选项 要查看的文件 </code>  查看文件内容</p><p><code>cat /etc/profile</code> 查看etc/profile文件内容</p><p><code>cat -n /etc/profile</code> 查看文件内容,可显示行号</p><p>提示:</p><p>cat 只能浏览文件，而不能修改文件，为了浏览方便，一般会带上 管道命令 | more</p><p><code>cat -n /etc/profile | more [进行交互]</code></p><h3 id="5-3-11、more指令"><a href="#5-3-11、more指令" class="headerlink" title="5.3.11、more指令"></a>5.3.11、more指令</h3><p>基本语法     <code>more 要查看的文件</code></p><p>​    more 指令是一个基于 VI 编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more 指令中内置了若<br>干快捷键(交互的指令)</p><p>相关操作说明</p><p><img src="https://images.hckun.cn/image-20220824000353540.png" alt="image-20220824000353540"></p><h3 id="5-3-12、less指令"><a href="#5-3-12、less指令" class="headerlink" title="5.3.12、less指令"></a>5.3.12、less指令</h3><p>基本语法 <code>less 要查看的文件</code></p><p>​    less 指令用来分屏查看文件内容，它的功能与 more 指令类似，但是比 more 指令更加强大，支持各种显示终端。less<br>指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有<br>较高的效率 </p><p>操作说明</p><p><img src="https://images.hckun.cn/image-20220824000603507.png" alt="image-20220824000603507"></p><h3 id="5-3-13、echo指令"><a href="#5-3-13、echo指令" class="headerlink" title="5.3.13、echo指令"></a>5.3.13、echo指令</h3><p>常用语法 <code>echo  选项  输出内容</code>  echo 输出内容到控制台</p><p>使用 echo 指令输出环境变量, 比如输出 $PATH $HOSTNAME</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 a]# echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line">[root@ecs-414993 a]# echo $HOSTNAME</span><br><span class="line">ecs-414993</span><br></pre></td></tr></table></figure><h3 id="5-3-14、head指令"><a href="#5-3-14、head指令" class="headerlink" title="5.3.14、head指令"></a>5.3.14、head指令</h3><p>基本语法 <code>head 文件</code> </p><p>​    head 用于显示文件的开头部分内容，默认情况下 head 指令显示文件的前 10 行内容</p><p><code>head -n 5 /etc/profile</code> 查看文件的前5行</p><h3 id="5-3-15、tail指令"><a href="#5-3-15、tail指令" class="headerlink" title="5.3.15、tail指令"></a>5.3.15、tail指令</h3><p>基本语法 <code>tail 选项 文件名</code></p><p>​    tail 用于输出文件中尾部的内容，默认情况下 tail 指令显示文件的后 10 行内容</p><p><code>tail -n 5 /etc/profile</code> 输出文件后5行内容</p><p><code>tail -f /etc/profile</code> 实时追踪该文档的所有更新</p><h3 id="5-3-16、-gt-指令和-gt-gt-指令"><a href="#5-3-16、-gt-指令和-gt-gt-指令" class="headerlink" title="5.3.16、&gt;指令和&gt;&gt;指令"></a>5.3.16、&gt;指令和&gt;&gt;指令</h3><p><code>&gt;输出重定向和 &gt;&gt; 追加</code></p><p><code>ls -l &gt; 文件</code>  列表的内容写入文件(覆盖)</p><p><code>ls -al &gt;&gt; 文件</code> 列表的内容追加到文件的末尾</p><p><code>cat 文件1 &gt; 文件2</code> 将文件1的内容覆盖到文件2</p><p><code>echo 内容 &gt;&gt; 文件 </code> 将内容追加到文件</p><h3 id="5-3-17、ln指令"><a href="#5-3-17、ln指令" class="headerlink" title="5.3.17、ln指令"></a>5.3.17、ln指令</h3><p>基本语法 <code>ln -s 原文件或目录 软链接名</code></p><p>软链接也称为符号链接，类似于 windows 里的快捷方式，主要存放了链接其他文件的路径</p><p>在/home 目录下创建一个软连接 myroot，连接到 /root 目录</p><p><code>ln -s /root /home/myroot</code></p><p>删除软链接<code> rm/home/myroot</code></p><h3 id="5-3-18、history指令"><a href="#5-3-18、history指令" class="headerlink" title="5.3.18、history指令"></a>5.3.18、history指令</h3><p>基本语法 <code>history</code>   查看已经执行过历史命令,也可以执行历史指令</p><p><code>history</code> 显示所有的历史命令</p><p><img src="https://images.hckun.cn/image-20220824002306873.png" alt="image-20220824002306873"></p><p><code>history 10</code> 显示最近使用过的 10 个指令</p><p>执行历史编号为 420的指令</p><p><code>!420</code></p><h2 id="5-4、时间日期类"><a href="#5-4、时间日期类" class="headerlink" title="5.4、时间日期类"></a>5.4、时间日期类</h2><h3 id="5-4-1、date指令-显示当前日期"><a href="#5-4-1、date指令-显示当前日期" class="headerlink" title="5.4.1、date指令-显示当前日期"></a>5.4.1、date指令-显示当前日期</h3><p>基本语法</p><p><code>date</code> 显示当前时间</p><p><code>date &quot;+%Y&quot;</code> 显示当前年份</p><p><code>date &quot;+%m&quot;</code> 显示当前月份 </p><p><code>date &quot;+%d&quot;</code> 显示当前是那一天</p><p><code>date &quot;+%Y-%m-%d %H:%M:%S&quot;</code> 显示年月日时分秒</p><h3 id="5-4-2、cal指令"><a href="#5-4-2、cal指令" class="headerlink" title="5.4.2、cal指令"></a>5.4.2、cal指令</h3><p><code>cal 选项</code></p><p><code>cal</code> 查看本月日历 </p><p><code>cal 2022</code> 查看2022年日历</p><h2 id="5-5、搜索查找类"><a href="#5-5、搜索查找类" class="headerlink" title="5.5、搜索查找类"></a>5.5、搜索查找类</h2><h3 id="5-5-1、find指令"><a href="#5-5-1、find指令" class="headerlink" title="5.5.1、find指令"></a>5.5.1、find指令</h3><p>find 指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端</p><p>基本语法: <code>find 搜索目录 选项</code></p><p>选项说明:</p><ul><li><code>-name</code> 按照指定文件名查找文件</li><li><code>-user</code>  查找属于指定用户名所有文件</li><li><code>-size</code> 按照指定的文件大小查找文件</li></ul><p>根据文件名查找usr目录下的hello.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 usr]# find /usr -name hello.txt</span><br><span class="line">/usr/hello.txt</span><br><span class="line">[root@ecs-414993 usr]# find /usr -name hell*.txt</span><br><span class="line">/usr/hello.txt</span><br><span class="line">[root@ecs-414993 usr]# find /usr -name *ello.txt</span><br><span class="line">/usr/hello.txt</span><br></pre></td></tr></table></figure><p>查找/usr目录下，用户名称为 root的文件</p><p><code>find /usr -user root</code></p><p>查找整个 linux 系统下大于 200M 的文件（+n 大于 -n 小于 n 等于, 单位有 k,M,G）</p><p><code>find / -size +200M</code></p><blockquote><p><code>ls-l</code>  以列表形式查看当前目录下文件,但文件大小显示的为总字节大小</p><p><code>ls-lh</code> 以列表形式查看当前目录下文件,但文件大小会自动进行单位转换</p></blockquote><p><img src="https://images.hckun.cn/%E6%88%AA%E5%B1%8F2022-09-03%2010.56.40.png" alt="截屏2022-09-03 10.56.40"></p><h3 id="5-5-2、locate-指令"><a href="#5-5-2、locate-指令" class="headerlink" title="5.5.2、locate 指令"></a>5.5.2、locate 指令</h3><p>​    locate 指令可以快速定位文件路径。locate 指令利用事先建立的系统中所有文件名称及路径的locate 数据库实现快速定位给定的文件。Locate 指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新 locate 时刻</p><p>基本语法 <code>locate 搜索文件</code></p><p>由于 locate 指令基于数据库进行查询，所以第一次运行前，必须使用 updatedb 指令创建 locate 数据库</p><p>使用<code>locate</code> 查找hello.txt文件位置</p><p><code>locate hello.txt</code></p><h3 id="5-5-3、whcih指令"><a href="#5-5-3、whcih指令" class="headerlink" title="5.5.3、whcih指令"></a>5.5.3、whcih指令</h3><p>​    可以查看某个指令在哪个目录下</p><p>基本语法 <code>whcih 指令</code></p><p>查找<code>ls</code>指令位置</p><p><code>which ls</code></p><h3 id="5-5-4、grep-指令和-管道符号"><a href="#5-5-4、grep-指令和-管道符号" class="headerlink" title="5.5.4、grep 指令和 管道符号 |"></a>5.5.4、grep 指令和 管道符号 |</h3><p>​    grep 过滤查找 ， 管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理</p><p>基本语法 <code>grep 选项 查找内容 源文件</code></p><p>选项内容:</p><ul><li><code>-n</code> 显示匹配行及行号</li><li><code>-i</code> 忽略字母大小写</li></ul><p>在hello.txt中查找yes并显示行号</p><p>写法一</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 usr]# cat hello.txt |grep yes</span><br><span class="line">yes</span><br><span class="line">yes</span><br><span class="line">[root@ecs-414993 usr]# cat hello.txt |grep -n  yes</span><br><span class="line">1:yes</span><br><span class="line">7:yes</span><br></pre></td></tr></table></figure><p>写法二</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 usr]# grep -n yes  /usr/hello.txt </span><br><span class="line">1:yes</span><br><span class="line">7:yes</span><br></pre></td></tr></table></figure><h2 id="5-6、压缩和解压类"><a href="#5-6、压缩和解压类" class="headerlink" title="5.6、压缩和解压类"></a>5.6、压缩和解压类</h2><h3 id="5-6-1、gzip-gunzip-指令"><a href="#5-6-1、gzip-gunzip-指令" class="headerlink" title="5.6.1、gzip/gunzip 指令"></a>5.6.1、gzip/gunzip 指令</h3><p>​    gzip 用于压缩文件， gunzip 用于解压的</p><p>基本语法 <code>gzip 文件</code> 压缩文件</p><pre><code>               `gunzip 文件.gz` 解压文件 </code></pre><p>将usr下的hello.txt进行压缩、解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 usr]# gzip hello.txt </span><br><span class="line">[root@ecs-414993 usr]# ls</span><br><span class="line">bin  etc  games  hello.txt.gz  include  lib  lib64  libexec  local  sbin  share  src  test  tmp</span><br><span class="line">[root@ecs-414993 usr]# gunzip hello.txt.gz </span><br><span class="line">[root@ecs-414993 usr]# ls</span><br><span class="line">bin  etc  games  hello.txt  include  lib  lib64  libexec  local  sbin  share  src  test  tmp</span><br></pre></td></tr></table></figure><h3 id="5-6-2、zip-unzip-指令"><a href="#5-6-2、zip-unzip-指令" class="headerlink" title="5.6.2、zip/unzip 指令"></a>5.6.2、zip/unzip 指令</h3><p>​    zip 用于压缩文件， unzip 用于解压的</p><p>基本语法  <code>zip 选项 XXX.zip 压缩内容</code> 压缩文件和目录的命令</p><p>​                    <code>unzip 选项 XXX.zip</code> 解压缩文件命令</p><p>zip常用选项:</p><p>-r 递归压缩,即压缩目录</p><p>unzip常用选项:</p><p>-d&lt;目录&gt; 指定解压后文件存放目录</p><p>将 /home 下的 所有文件/文件夹进行压缩成 myhome.zip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r myhome /home</span><br></pre></td></tr></table></figure><p>将 myhome.zip 解压到 /opt 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uzip -d /opt myhome.zip</span><br></pre></td></tr></table></figure><h3 id="5-6-3、tar指令"><a href="#5-6-3、tar指令" class="headerlink" title="5.6.3、tar指令"></a>5.6.3、tar指令</h3><p>​    tar 指令 是打包指令，最后打包后的文件是 .tar.gz 的文件</p><p>基本语法 <code>tar 选项 XXX.tar.gz 打包内容</code>  打包目录，压缩后的文件格式.tar.gz)</p><p>选项</p><ul><li>-c 产生.tar打包文件</li><li>-v 显示详细信息</li><li>-f 指定压缩后的文件名</li><li>-z 打包同时压缩</li><li>-x 解包.tar文件</li></ul><p>压缩多个文件 将/usr/hello.txt /usr/hello2.txt 压缩成hello.tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 usr]# tar -zcvf hello.tar.gz  hello2.txt hello.txt </span><br><span class="line">hello2.txt</span><br><span class="line">hello.txt</span><br><span class="line">[root@ecs-414993 usr]# ls</span><br><span class="line">bin  etc  games  hello2.txt  hello.tar.gz  hello.txt  include  lib  lib64  libexec  local  sbin  share  src  test  tmp</span><br></pre></td></tr></table></figure><p>将home 文件夹压缩成home.tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf home.tar.gz /home</span><br></pre></td></tr></table></figure><p>将home.tar.gz解压到当前目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf home.tar.gz </span><br></pre></td></tr></table></figure><p>将home.tar.gz 解压到usr目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf home.tar.gz -C /usr</span><br></pre></td></tr></table></figure><h2 id="6、组管理和权限管理"><a href="#6、组管理和权限管理" class="headerlink" title="6、组管理和权限管理"></a>6、组管理和权限管理</h2><p>​    在 linux 中的每个用户必须属于一个组，不能独立于组外。在 linux 中每个文件 有所有者、所在组、其它组的概念</p><h3 id="6-1、文件-目录所有者"><a href="#6-1、文件-目录所有者" class="headerlink" title="6.1、文件/目录所有者"></a>6.1、文件/目录所有者</h3><p>查看语法 <code>ls -ahl</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ecs-414993 /]# ls -ahl</span><br><span class="line">total 76K</span><br><span class="line">dr-xr-xr-x. 20 root root 4.0K Aug 23 23:39 .</span><br><span class="line">dr-xr-xr-x. 20 root root 4.0K Aug 23 23:39 ..</span><br><span class="line">-rw-r--r--   1 root root    0 Feb 10  2022 .autorelabel</span><br><span class="line">-rw-r--r--   1 root root    0 Aug 23 23:39 b</span><br></pre></td></tr></table></figure><p>第一个root代表的是文件/目录的所有者,第一个root代表的是文件/目录所在的组</p><p>修改文件/目录所有者:</p><p>基本语法 <code>chown 用户名 文件名</code></p><p>使用 root 创建一个文件 hello.txt ，然后将其所有者修改成 tom</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown tom hello.txt</span><br></pre></td></tr></table></figure><h3 id="6-2、组的创建"><a href="#6-2、组的创建" class="headerlink" title="6.2、组的创建"></a>6.2、组的创建</h3><p>基本语法 <code>gropuadd 组名</code></p><p>创建一个用户组a</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd a</span><br></pre></td></tr></table></figure><p>创建一个用户liis并指定组a</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@ecs-414993 usr]# useradd -g a lisi</span><br><span class="line">[root@ecs-414993 usr]# id lisi</span><br><span class="line">uid=1001(lisi) gid=1002(a) groups=1002(a)</span><br></pre></td></tr></table></figure><h3 id="6-3、文件-目录所在组"><a href="#6-3、文件-目录所在组" class="headerlink" title="6.3、文件/目录所在组"></a>6.3、文件/目录所在组</h3><p>​    当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组</p><h4 id="6-3-1、修改文件-目录所在组"><a href="#6-3-1、修改文件-目录所在组" class="headerlink" title="6.3.1、修改文件/目录所在组"></a>6.3.1、修改文件/目录所在组</h4><p>基本语法 <code>chgrp 组名 文件名</code></p><p> 将hello.txt文件的组修改为a组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp a hello.txt</span><br></pre></td></tr></table></figure><p>其他组:除文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组</p><h3 id="6-4、改变用户所在组"><a href="#6-4、改变用户所在组" class="headerlink" title="6.4、改变用户所在组"></a>6.4、改变用户所在组</h3><p>基本语法 <code>usermod -g 新组名 用户名</code> 修改用户所在的组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`usermod -d 目录 用户名`  改变该用户登陆的初始目录。特别说明：用户需要有进入到新目录的权限</span><br></pre></td></tr></table></figure><h3 id="6-5、权限的基本介绍"><a href="#6-5、权限的基本介绍" class="headerlink" title="6.5、权限的基本介绍"></a>6.5、权限的基本介绍</h3><p>使用<code>ls -lh</code>命令显示如下内容:</p><p>-rw-r–r–    1 root root    0 Sep 27 23:06 a.txt</p><p>0-9位含义说明</p><ul><li><p>第0位确定文件类型(d、-、l、c、b)</p><p>d是目录,相当于windows的文件夹</p><p>-是普通文件</p><p>l是链接,相当于windows的快捷方式</p><p>c是字符设备文件,鼠标、键盘</p><p>b是块设备,比如硬盘</p></li><li><p>第1-3位确定<strong>所有者</strong>(该文件的所有者)拥有该文件的权限</p></li><li><p>第4-6位确定<strong>所属组</strong>(同用户组的)拥有该文件的权限</p></li><li><p>第7-9位确定<strong>其他用户</strong>拥有该文件权限</p></li></ul><p>针对-rw-r–r–    1 root root    0 Sep 27 23:06 a.txt的具体说明</p><p><code>-</code>:类型为普通文件</p><p><code>rw-</code>:文件所有者root对文件有读、写权限</p><p><code>r--</code>:同属root组下用户,对文件有读权限</p><p><code>r--</code>:其它用户拥有读权限</p><p>rwx也可以使用数字代替 r=4 , w=2 , x=1 因此rwx=4+2+1=7</p><p><code>1</code> 如果是普通文件显示1,如果是目录显示数字为子目录数</p><p><code>root</code> 文件所属用户</p><p><code>root</code> 文件所属用户组</p><p><code>0</code> 文件大小(字节)</p><p><code>Sep 27 23:06</code> 最后修改日期</p><p><code>a</code> 文件名</p><h3 id="6-6、rwx权限"><a href="#6-6、rwx权限" class="headerlink" title="6.6、rwx权限"></a>6.6、rwx权限</h3><h4 id="6-6-1、rwx作用文件"><a href="#6-6-1、rwx作用文件" class="headerlink" title="6.6.1、rwx作用文件"></a>6.6.1、rwx作用文件</h4><ol><li> <code>r </code> 代表可读(read) 可以读取、查看</li><li><code>w </code>代表可写(write) 可以修改,但是不代表可以删除该文件,删除一个文件的前提条件是对该文件所在的目录有写的权限,才能删除该文件</li><li><code>x</code> 代表可执行(execute) 可以被执行</li></ol><h4 id="6-6-2、rwx作用目录"><a href="#6-6-2、rwx作用目录" class="headerlink" title="6.6.2、rwx作用目录"></a>6.6.2、rwx作用目录</h4><ol><li><code>r</code> 代表可读(read) 可以读取,ls查看目录内容</li><li><code>w</code> 代表可写(write) 可以修改,可对目录内创建、删除、重命名目录</li><li><code>x</code> 代表可执行(execute) 可以进入该目录</li></ol><h4 id="6-6-3、修改权限chmod"><a href="#6-6-3、修改权限chmod" class="headerlink" title="6.6.3、修改权限chmod"></a>6.6.3、修改权限chmod</h4><p>​    通过chmod指令,可以修改文件或目录的权限</p><p><strong>通过+、-、=变更权限</strong></p><p>u:所有者    g:所有组    0:其他人    a:所有人(u、g、0的总和)</p><p>示例: <code>chmod u=rwx,g=rx,o=x 文件/目录名</code>    <code>chmod o+w 文件/目录名</code>     <code>chmod a-x 文件/目录名 </code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 给 abc 文件 的所有者读写执行的权限，给所在组读执行权限，给其它组读执行权限</span><br><span class="line">chmmod u=rwx,g=rx,o=rx abc</span><br><span class="line">2. 给 abc 文件的所有者除去执行的权限，增加组写的权限</span><br><span class="line">chmod u-x,g+w abc</span><br><span class="line">3. 给 abc 文件的所有用户添加读的权限</span><br><span class="line">chmod a+r abc </span><br></pre></td></tr></table></figure><p><strong>通过数字变更权限</strong></p><p>r=4    w=2    x=1            rwx=4+2+1=7</p><p><code>chmod u=rwx,g=rx,o=x 文件/目录名</code>相当于<code>chmod 751 文件/目录名</code></p><h4 id="6-6-4、修改文件所有者chown"><a href="#6-6-4、修改文件所有者chown" class="headerlink" title="6.6.4、修改文件所有者chown"></a>6.6.4、修改文件所有者chown</h4><p><code>chown newowner 文件/目录</code> 改变所有者</p><p><code>chown newowner:newgroup 文件/目录</code> 改变所有者和所在组</p><p>选项-R    如果是目录则使其下所有子文件夹或目录递归生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.将文件abc的所有者改为tom</span><br><span class="line">chown tom a.txt</span><br><span class="line">2.将a目录下所有文件和目录的所有者修改成tom</span><br><span class="line">chown -R tom a</span><br></pre></td></tr></table></figure><h4 id="6-6-5、修改文件所在组chgrp"><a href="#6-6-5、修改文件所在组chgrp" class="headerlink" title="6.6.5、修改文件所在组chgrp"></a>6.6.5、修改文件所在组chgrp</h4><p><code>chgrp newgroup 文件/目录</code> 改变所在组</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.将文件abc的所在组改为tom</span><br><span class="line">chgrp tom a.txt</span><br><span class="line">2.将a目录下所有文件和目录的所在组修改成tom</span><br><span class="line">chgrp -R tom a</span><br></pre></td></tr></table></figure><h1 id="6、定时任务调度"><a href="#6、定时任务调度" class="headerlink" title="6、定时任务调度"></a>6、定时任务调度</h1><h2 id="6-1、任务调度基本概念"><a href="#6-1、任务调度基本概念" class="headerlink" title="6.1、任务调度基本概念"></a>6.1、任务调度基本概念</h2><p>任务调度：是指系统在某个时间执行的特定的命令或程序</p><p>任务调度分类：</p><p>1.系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等 </p><p>2.个别用户工作：个别用户可能希望执行某些程序，比如对 mysql 数据库的备份。</p><h2 id="6-2基本语法"><a href="#6-2基本语法" class="headerlink" title="6.2基本语法"></a>6.2基本语法</h2><p><code>crontab [选项]</code></p><p>常用选项</p><table><thead><tr><th>-e</th><th>编辑crontab定时任务</th></tr></thead><tbody><tr><td>-l</td><td>查询crontab定时任务</td></tr><tr><td>-r</td><td>删除当前用户所有的crontab定时任务</td></tr></tbody></table><h2 id="6-3、快速入门"><a href="#6-3、快速入门" class="headerlink" title="6.3、快速入门"></a>6.3、快速入门</h2><p>设置定时任务:<code>*/1 * * * * ls –l /etc/ &gt; /usr/a.txt</code>  每分钟执行一次<code> ls –l /etc/ &gt; /usr/a.txt</code> 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e 进入vim模式设置定时任务命令</span><br></pre></td></tr></table></figure><p>占位符说明</p><table><thead><tr><th>项目</th><th>含义</th><th>范围</th></tr></thead><tbody><tr><td>第一个 “*”</td><td>1小时中的第几分钟</td><td>0-59</td></tr><tr><td>第二个 “*”</td><td>1天当中的第几小时</td><td>0-23</td></tr><tr><td>第三个 “*”</td><td>1月中的第几天</td><td>1-31</td></tr><tr><td>第四个 “*”</td><td>1年中的第几月</td><td>1-12</td></tr><tr><td>第五个 “*”</td><td>1周中的星期几</td><td>0-7(0和7都代表星期日)</td></tr></tbody></table><p>特殊符号说明</p><table><thead><tr><th>特殊符号</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>代表任何时间.比如第一个”*”代表一个小时中每分钟都执行一次</td></tr><tr><td>,</td><td>代表不连续时间,比如”0 8,12,16 * * * 命令”代表每天都8点0分,12点0分,16点0分都执行一次命令</td></tr><tr><td>-</td><td>代表连续点时间范围,比如”0 5 * * 1-6 命令”代表周一到周六的凌晨5点0分执行命令</td></tr><tr><td>*/n</td><td>代表每隔多久执行一次,比如”*/10 * * * * 命令”代表每隔10分钟执行一次命令</td></tr></tbody></table><p>特殊时间执行案列</p><table><thead><tr><th>时间</th><th>含义</th></tr></thead><tbody><tr><td>45 22 * * * 命令</td><td>在22点45分执行命令</td></tr><tr><td>0 17 * * 1 命令</td><td>每周一的17点0分执行命令</td></tr><tr><td>0 5 1,15 * * 命令</td><td>每月1号和15号的凌晨5点0分执行命令</td></tr><tr><td>40 4 * * 1-5 命令</td><td>每周一到周五的凌晨4点40分执行命令</td></tr><tr><td>*/10 4 * * * 命令</td><td>每天的凌晨4点,每隔10分钟执行一次命令</td></tr><tr><td>0 0 1,15 * 1 命令</td><td>每月1号和15号,每周一的0点0分都会执行命令</td></tr></tbody></table><p>应用实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每隔1分钟，就将当前的日期信息，追加到 /usr/a.txt 文件中</span></span><br><span class="line">*/1 * * * * date &gt;&gt; /usr/a.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每隔1分钟，将当前日期和日历都追加到 /usr/a.txt 文件中</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">方式1:定义两个定时任务</span></span><br><span class="line">*/1 * * * * date &gt;&gt; /usr/a.txt</span><br><span class="line">*/1 * * * * cal &gt;&gt; /usr/a.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">方式2:将执行命令写入脚本,定时执行脚本</span></span><br><span class="line">*/1 * * * *   /usr/my.sh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启任务调度</span></span><br><span class="line">service crond restart</span><br></pre></td></tr></table></figure><h2 id="6-4、at定时任务"><a href="#6-4、at定时任务" class="headerlink" title="6.4、at定时任务"></a>6.4、at定时任务</h2><h3 id="6-4-1、基本介绍"><a href="#6-4-1、基本介绍" class="headerlink" title="6.4.1、基本介绍"></a>6.4.1、基本介绍</h3><ol><li>at 命令是一次性定时计划任务，at 的守护进程 atd 会以后台模式运行，检查作业队列来运行</li><li>默认情况下，atd 守护进程每 60 秒检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业</li><li>at 命令是一次性定时计划任务，执行完一个任务后不再执行此任务了</li><li>在使用 at 命令的时候，一定要保证 atd 进程的启动 , 可以使用相关指令来查看</li></ol><h3 id="6-4-2、命令格式"><a href="#6-4-2、命令格式" class="headerlink" title="6.4.2、命令格式"></a>6.4.2、命令格式</h3><p>​    <code>at [选项] [时间]</code></p><p>Ctrl + D 结束 at 命令的输入， 输出两次</p><p>at命令选项</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-m</td><td>当指定的任务被完成后,将给用户发送邮件,即使没有标准输出</td></tr><tr><td>-I</td><td>atq的别名</td></tr><tr><td>-d</td><td>atrm的别名</td></tr><tr><td>-v</td><td>显示任务将被执行的时间</td></tr><tr><td>-c</td><td>打印任务的内容到标准输出</td></tr><tr><td>-V</td><td>显示版本信息</td></tr><tr><td>-q[队列]</td><td>使用指定的队列</td></tr><tr><td>-f[文件]</td><td>从指定文件读入任务而不是从标准输入读入</td></tr><tr><td>-t[时间参数]</td><td>以时间参数的形式提交要运行的任务</td></tr></tbody></table><p>at时间定义</p><ol><li>接受在当天的 hh:mm（小时:分钟）式的时间指定。假如该时间已过去，那么就放在第二天执行。例如：04:00</li><li>使用 midnight（深夜），noon（中午），teatime（饮茶时间，一般是下午 4 点）等比较模糊的词语来指定时间。</li><li>采用 12 小时计时制，即在时间后面加上 AM（上午）或 PM（下午）来说明是上午还是下午。例如：12pm</li><li>指定命令执行的具体日期，指定格式为 month day（月 日）或 mm/dd/yy（月/日/年）或dd.mm.yy（日.月.年），指定的日期必须跟在指定时间的后面。 例如：04:00 2021-03-1</li><li>使用相对计时法。指定格式为：now + count time-units ，now 就是当前时间，time-units 是时间单位，这里能够是minutes（分钟）、hours（小时）、days（天）、weeks（星期）。count 是时间的数量，几天，几小时。例如：now+5minutes</li><li>直接使用 today（今天）、tomorrow（明天）来指定完成命令的时间</li></ol><h3 id="6-4-3、应用实例"><a href="#6-4-3、应用实例" class="headerlink" title="6.4.3、应用实例"></a>6.4.3、应用实例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2天后的下午5点执行 /bin/ls /home</span></span><br><span class="line">[root@VM-16-2-centos usr]# at 5pm + 2 days</span><br><span class="line"><span class="meta prompt_">at&gt; </span><span class="language-bash">/bin/ls /home</span>  </span><br><span class="line">job 1 at Wed Oct 12 17:00:00 2022</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">atq 命令来查看系统中没有执行的工作任务</span></span><br><span class="line">[root@VM-16-2-centos usr]# atq </span><br><span class="line">1       Wed Oct 12 17:00:00 2022 a root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">明天17点钟,输出时间到指定文件内 比如/root/date100.<span class="built_in">log</span></span></span><br><span class="line">[root@VM-16-2-centos usr]# at 5pm tomorrow</span><br><span class="line"><span class="meta prompt_">at&gt; </span><span class="language-bash"><span class="built_in">date</span> &gt; /root/date100.<span class="built_in">log</span>&lt;EOT&gt;</span></span><br><span class="line">job 2 at Tue Oct 11 17:00:00 2022</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2 分钟后，输出时间到指定文件内 比如 /root/date200.<span class="built_in">log</span></span></span><br><span class="line">[root@VM-16-2-centos usr]# at now + 2 minutes</span><br><span class="line"><span class="meta prompt_">at&gt; </span><span class="language-bash"><span class="built_in">date</span> &gt; /root/date200.<span class="built_in">log</span></span></span><br><span class="line">job 3 at Mon Oct 10 00:46:00 2022</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除已经设置的任务,atrm编号</span></span><br><span class="line">[root@VM-16-2-centos ~]# atrm 2 </span><br></pre></td></tr></table></figure><h1 id="7、磁盘分区、挂载"><a href="#7、磁盘分区、挂载" class="headerlink" title="7、磁盘分区、挂载"></a>7、磁盘分区、挂载</h1><h2 id="7-1、分区原理介绍"><a href="#7-1、分区原理介绍" class="headerlink" title="7.1、分区原理介绍"></a>7.1、分区原理介绍</h2><ol><li>Linux 来说无论有几个分区，分给哪一目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构, Linux中每个分区都是用来组成整个文件系统的一部分</li><li>Linux 采用了一种叫“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得</li></ol><h2 id="7-2、硬盘说明"><a href="#7-2、硬盘说明" class="headerlink" title="7.2、硬盘说明"></a>7.2、硬盘说明</h2><ol><li>Linux 硬盘分 IDE 硬盘和 SCSI 硬盘，目前基本上是 SCSI 硬盘</li><li>对于 IDE 硬盘，驱动器标识符为“hdx<del>”,其中“hd”表明分区所在设备的类型，这里是指IDE 硬盘了。“x”为盘号（a为基本盘，b 为基本从属盘，c 为辅助主盘，d 为辅助从属盘）,“</del>”代表分区，前四个分区用数字1 到4 表示，它们是 主分区或扩展分区，从 5 开始就是逻辑分区。例，hda3 表示为第一个 IDE 硬盘上的第三个主分区或扩展分区,hdb2表示为第二个 IDE 硬盘上的第二个主分区或扩展分区</li><li>对于 SCSI 硬盘则标识为“sdx~”，SCSI 硬盘是用“sd”来表示分区所在设备的类型的，其余则和IDE 硬盘的表示方法一样</li></ol><h2 id="7-3、查看所有设备的挂载情况"><a href="#7-3、查看所有设备的挂载情况" class="headerlink" title="7.3、查看所有设备的挂载情况"></a>7.3、查看所有设备的挂载情况</h2><p>命令:<code>lsblk</code>或<code>lsblk -f</code></p><p><img src="https://images.hckun.cn/%E6%88%AA%E5%B1%8F2022-10-10%2022.06.52.png" alt="截屏2022-10-10 22.06.52"></p><p><img src="https://images.hckun.cn/%E6%88%AA%E5%B1%8F2022-10-10%2022.06.00.png" alt="截屏2022-10-10 22.06.00"></p><h2 id="7-4、磁盘情况查询"><a href="#7-4、磁盘情况查询" class="headerlink" title="7.4、磁盘情况查询"></a>7.4、磁盘情况查询</h2><h3 id="7-4-1、查询系统整体磁盘使用情况"><a href="#7-4-1、查询系统整体磁盘使用情况" class="headerlink" title="7.4.1、查询系统整体磁盘使用情况"></a>7.4.1、查询系统整体磁盘使用情况</h3><p>语法:<code>df -h</code></p><p><img src="https://images.hckun.cn/image-20221010221000941.png" alt="image-20221010221000941"></p><h3 id="7-4-2、查询指定目录的磁盘占用情况"><a href="#7-4-2、查询指定目录的磁盘占用情况" class="headerlink" title="7..4.2、查询指定目录的磁盘占用情况"></a>7..4.2、查询指定目录的磁盘占用情况</h3><p>语法:<code>du -h</code></p><p>查询指定目录的磁盘占用情况，默认为当前目录</p><ul><li>-s 指定目录占用大小汇总 </li><li> -h 带计量单位 </li><li>-a 含文件 </li><li>–max-depth=1 子目录深度 </li><li>-c 列出明细的同时，增加汇总值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询 /opt 目录的磁盘占用情况，深度为 1</span></span><br><span class="line">du -hac /opt --max-depth=1</span><br></pre></td></tr></table></figure><h3 id="7-4-3、磁盘情况-工作实用指令"><a href="#7-4-3、磁盘情况-工作实用指令" class="headerlink" title="7.4.3、磁盘情况-工作实用指令"></a>7.4.3、磁盘情况-工作实用指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计/opt 文件夹下文件的个数</span></span><br><span class="line">ls -l /opt | grep &quot;^-&quot; | wc -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计/opt 文件夹下目录的个数</span></span><br><span class="line">ls -l /opt | grep &quot;^d&quot; | wc -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计/opt 文件夹下文件的个数，包括子文件夹里的</span></span><br><span class="line">ls -lR /opt | grep &quot;^-&quot; | wc -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计/opt 文件夹下目录的个数，包括子文件夹里的</span></span><br><span class="line">ls -lR /opt | grep &quot;^d&quot; | wc -l</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以树状显示目录结构 tree 目录 ， 注意，如果没有 tree ,则使用 yum install tree 安装</span></span><br><span class="line">tree /home/</span><br></pre></td></tr></table></figure><h1 id="8、网络配置"><a href="#8、网络配置" class="headerlink" title="8、网络配置"></a>8、网络配置</h1><h2 id="8-1、Linux网络配置原理图"><a href="#8-1、Linux网络配置原理图" class="headerlink" title="8.1、Linux网络配置原理图"></a>8.1、Linux网络配置原理图</h2><p> Linux查看IP命令:<code>ifconfig</code></p><p>Windows查看IP命令:<code>ipconfig</code></p><p><img src="https://images.hckun.cn/image-20221018230958486.png" alt="image-20221018230958486"></p><h2 id="8-2、LInux网络环境配置"><a href="#8-2、LInux网络环境配置" class="headerlink" title="8.2、LInux网络环境配置"></a>8.2、LInux网络环境配置</h2><ol><li><p>自动获取</p><p>在虚拟机环境下可在登录后,通过页面来设置自动获取IP</p><p>其特点是:Linux启动后会自动获取IP,但是每次自动获取的IP地址可能是不一样的,这样就没办法作为服务器</p></li><li><p>指定IP</p></li></ol><p>​            直接修改配置文件来指定IP,并可以连接到外网</p><p>​            在虚拟机环境喜爱,编辑ifcfg-ens33文件,输入指令<code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code>,要求将IP地址配置为静态的,比如:192.168.200.130</p><p>​            ifcfg-ens33文件说明:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=etho # 接口名（设备，网卡）</span><br><span class="line">HWADDR=00:0C:2x:6x:0x:xx # MAC 地址</span><br><span class="line">TYPE=Ethernt # 网络类型（通常是 Ethernt）</span><br><span class="line">UUID=926a57ba-92c6-4231-bacb-f27e5e6a9f44 # 随机 ID</span><br><span class="line">ONBOOT=yes # 系统启动时网络接口是否有效，可选 yes/no</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">IP 的配置方法[none|static|bootp|dhcp]（引导时使用协议|静态分配IP|BOOTP协议|DHCP协议）</span></span><br><span class="line">BOOTPROTO=static</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">IP 地址</span></span><br><span class="line">IPADDR=192.168.200.130</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">网关</span></span><br><span class="line">GATEWAY=192.168.200.2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">域名解析器</span></span><br><span class="line">DNS1=192.168.200.2</span><br></pre></td></tr></table></figure><p>文件修改完成后,需要在“虚拟机网络编辑器”中对虚拟机的网关进行修改,改成<code>192.168.200.2</code>,对子网IP进行修改,改成同一网段:如:<code>192.168.200.XX</code></p><p>最后需要重启网络服务器或重启系统生效,执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart 或者 reboot</span><br></pre></td></tr></table></figure><h2 id="8-3、主机名与hosts映射"><a href="#8-3、主机名与hosts映射" class="headerlink" title="8.3、主机名与hosts映射"></a>8.3、主机名与hosts映射</h2><ol><li><p>设置主机名</p><p>为了方便记忆,可以给Linux系统设置主机名,也可以根据需要修改主机名</p><p>查看主机名:<code>hostname</code></p><p>如果需要修改,则需在/etc/hostname文件中指定,修改后需要进行重启</p></li><li><p>设置host映射</p><p>设置主机名后，如何通过主机名 ping 通某个 Linux 系统呢？</p><p>如果在 Windows 环境下 ping Linux，需要修改 hosts 文件，这个文件的路径如下：<code>C:/Windows/System32/drivers/etc/hosts</code></p><p>比如我们 Linux 的 IP 地址是 192.168.200.130，主机名为 linux，那么需要在 hosts 文件中添加：</p><p>192.168.200.130 linux</p><p>然后在 Windows 环境下执行 <code>ping linux</code>即可</p><p>如果在 Linux 环境下 ping Windows，那么需要在 /etc/hosts 文件下指定</p><p>比如我们 Windows 的 IP 地址是 192.168.200.1（如果是虚拟机，此 IP 为 Windows 中 vmnet8 的 IPV4 地址），那么可以在 hosts 文件下添加：</p><p>192.168.200.1 windows</p><p>然后在 Linux 环境下执行<code>ping windows</code>即可    </p></li><li><p>主机名解析过程分析(hosts与DNS)</p><p>host是什么?</p><p>它是一个文本文件，用来记录 IP 和 hostname（主机名）的映射关系</p><p>DNS 是什么？</p><p>DNS，Domain Name System 的缩写，即：域名系统。它是互联网上作为域名和 IP 地址相互映射的一个分布式数据库</p><p>以用户在浏览器中输入 <a href="http://www.baidu.com/">www.baidu.com</a> 为例：</p><p>1、浏览器先检查浏览器缓存中有没有该域名解析 IP 地址，如果有就先调用这个 IP 完成解析；如果没有则检查操作系统 DNS 解析器缓存，如果有直接返回 IP 完成解析。这两个缓存，可以理解为本地解析器缓存</p><p>2、一般来说，当电脑第一次成功访问某一网站后，在一定时间内，浏览器或操作系统会缓存它的 IP 地址（DNS 解析记录)。在 Windows 环境下的 CMD 窗口中输入以下指令可查看或清理 DNS 缓存：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /displaydns # DNS 域名解析缓存</span><br><span class="line">ipconfig /flushdns # 手动清理 DNS 缓存</span><br></pre></td></tr></table></figure><p>3、如果本地解析器缓存没有找到对应映射，检查系统中 hosts 文件中有没有配置对应的域名 IP 映射，如果有，则完成解析并返回</p><p>4、如果本地 DNS 解析器缓存和 hosts 文件中均没有找到对应的 IP，则需要到域名服务 DNS 进行解析域</p><p><img src="https://images.hckun.cn/image-20221019123947856.png" alt="image-20221019123947856"></p></li></ol><h1 id="9、Linux进程管理"><a href="#9、Linux进程管理" class="headerlink" title="9、Linux进程管理"></a>9、Linux进程管理</h1><h2 id="9-1、基本介绍"><a href="#9-1、基本介绍" class="headerlink" title="9.1、基本介绍"></a>9.1、基本介绍</h2><ol><li>在 LINUX 中，每个执行的程序都称为一个进程。每一个进程都分配一个 ID 号(pid,进程号)</li><li>每个进程都可能以两种方式存在的。前台与后台，所谓前台进程就是用户目前的屏幕上可以进行操作的。后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行</li><li>一般系统的服务都是以后台进程的方式存在，而且都会常驻在系统中。直到关机才才结束</li></ol><h2 id="9-2、显示系统执行的进程"><a href="#9-2、显示系统执行的进程" class="headerlink" title="9.2、显示系统执行的进程"></a>9.2、显示系统执行的进程</h2><h3 id="9-2-1、基本介绍"><a href="#9-2-1、基本介绍" class="headerlink" title="9.2.1、基本介绍"></a>9.2.1、基本介绍</h3><p><code>ps</code> 命令是用来查看目前系统中，有哪些正在执行，以及它们执行的状况。可以不加任何参数</p><p><code>ps -a</code>:显示当前终端的所有进程信息</p><p><code>ps -u</code>:以用户格式显示进程信息</p><p> <code>ps -x</code>:显示后台进程运行的参数</p><p>实际使用一般组合使用:<code>ps -aux</code></p><h3 id="9-2-2、详解"><a href="#9-2-2、详解" class="headerlink" title="9.2.2、详解"></a>9.2.2、详解</h3><p>查看sshd服务的进程信息:<code>ps -aux|grep sshd</code></p><p>查看端口对应的进程信息:<code>netstat -ntulp |grep 端口号</code><img src="https://images.hckun.cn/image-20221020215308406.png" alt="image-20221020215308406"></p><p>   <img src="https://images.hckun.cn/image-20221020215332879.png" alt="image-20221020215332879"></p><p>   指令说明:</p><ul><li><p> <code>USER</code> :用户名称</p></li><li><p><code>PID</code> :进程号</p></li><li><p><code>%CPU</code>:进程占用 CPU 的百分比</p></li><li><p><code>%MEM</code>:进程占用物理内存的百分比</p></li><li><p><code>VSZ</code>:进程占用的虚拟内存大小（单位：KB）</p></li><li><p><code>RSS</code>:进程占用的物理内存大小（单位：KB）</p></li><li><p><code>TTV</code>:终端名称,缩写</p></li><li><p><code>STAT</code>:进程状态，其中 S-睡眠，s-表示该进程是会话的先导进程，N-表示进程拥有比普通优先级更低的优先级，R-正在运行，D-短期等待，Z-僵死进程，T-被跟踪或者被停止等</p></li><li><p><code>START</code>:进程的启动时间</p></li><li><p><code>TIME</code>:CPU 时间，即进程使用 CPU 的总时间</p></li><li><p><code>COMMAND</code>:启动进程所用的命令和参数，如果过长会被截断显示</p></li></ul><h3 id="9-2-3、应用实例"><a href="#9-2-3、应用实例" class="headerlink" title="9.2.3、应用实例"></a>9.2.3、应用实例</h3><p>以全格式显示当前所有的进程，查看进程的父进程。 查看 sshd 的父进程信息</p><p><code>ps -ef</code>是以全格式显示当前所有的进程,<code>-e</code>显示所有进程,<code>-f</code>全格式</p><p><code>ps -ef|grep sshd</code></p><p><img src="https://images.hckun.cn/image-20221020220659075.png" alt="image-20221020220659075"></p><p><img src="https://images.hckun.cn/image-20221020220821105.png" alt="image-20221020220821105"></p><ul><li><code>UID</code>:用户 ID</li><li><code>PID</code>:进程ID</li><li><code>PPID</code>:父进程ID</li><li><code>C</code>:CPU 用于计算执行优先级的因子。数值越大，表明进程是 CPU 密集型运算，执行优先级会降低；数值越小，表明进程是 I/O 密集型运算，执行优先级会提高</li><li><code>STIME</code>:进程启动的时间</li><li><code>TTY</code>:完整的终端名称</li><li><code>TIME</code>:CPU 时间</li><li><code>CMD</code>:启动进程所用的命令和参数</li></ul><h2 id="9-3、终止进程kill和killall"><a href="#9-3、终止进程kill和killall" class="headerlink" title="9.3、终止进程kill和killall"></a>9.3、终止进程kill和killall</h2><p>​    若是某个进程执行一半需要停止时，或是已消了很大的系统资源时，此时可以考虑停止该进程。使用kill 命令来完成此项任务</p><p>   基本语法:<code>kill [选项] 进程号</code> 通过进程号杀死或终止进程</p><p>​                        <code>killall 进程名称</code> 通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用</p><p>常用选项:<code>-9</code>  表示强迫进程立即停止</p><h2 id="9-4、查看进程树-pstree"><a href="#9-4、查看进程树-pstree" class="headerlink" title="9.4、查看进程树 pstree"></a>9.4、查看进程树 pstree</h2><p>基本语法:<code>pstree [选项] </code> 可以更加直观的来看进程信息</p><p>常用选项:<code>-p</code>显示进程的 PID <code>-u</code> 显示进程的所属用户   </p><h2 id="9-5、服务管理"><a href="#9-5、服务管理" class="headerlink" title="9.5、服务管理"></a>9.5、服务管理</h2><p>​    服务(service) 本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其它程序的请求，比如(mysqld, sshd防火墙等)，因此我们又称为守护进程</p><p>service 管理指令</p><ol><li><code>service 服务名 [start|stop|restart|reload|status]</code></li><li>在Centos7.0之后很多服务不在使用service而是使用systemctl</li><li>service指令管理的服务可以在/etc/init.d中查看</li></ol><p><img src="https://images.hckun.cn/image-20221020224548042.png" alt="image-20221020224548042"></p><p>查看服务名:</p><p>方式一:<code>setup</code></p><p>方式二:<code>/etc/init.d</code> 看到 service 指令管理的服务</p><h2 id="9-6、服务运行级别"><a href="#9-6、服务运行级别" class="headerlink" title="9.6、服务运行级别"></a>9.6、服务运行级别</h2><p>Linux 系统有 7 种运行级别(runlevel)：常用的是级别 3 和 5</p><ul><li>运行级别 0：系统停机状态，系统默认运行级别不能设为 0，否则不能正常启动</li><li>运行级别 1：单用户工作状态，root 权限，用于系统维护，禁止远程登陆</li><li>运行级别 2：多用户状态(没有 NFS)，不支持网络</li><li>运行级别 3：完全的多用户状态(有 NFS)，无界面，登陆后进入控制台命令行模式</li><li>运行级别 4：系统未使用，保留</li><li>运行级别 5：X11 控制台，登陆后进入图形 GUI 模式</li><li>运行级别 6：系统正常关闭并重启，默认运行级别不能设为 6，否则不能正常启动</li></ul><p>Linux开机流程图</p><p><img src="https://images.hckun.cn/image-20221020225803991.png" alt="image-20221020225803991"></p><p>CentOS7 后运行级别说明</p><p>在 /etc/inittab</p><p>multi-user.target: analogous to runlevel 3</p><p>graphical.target: analogous to runlevel 5</p><p>获取当前运行级别:<code>systemctl get-default</code></p><p>设置默认的运行级别:<code>systemctl set-default TARGET.target</code></p><h2 id="9-7、chkconfig-指令"><a href="#9-7、chkconfig-指令" class="headerlink" title="9.7、chkconfig 指令"></a>9.7、chkconfig 指令</h2><p>通过 chkconfig 命令可以给服务的各个运行级别设置自 启动/关闭</p><p>chkconfig 指令管理的服务在 /etc/init.d 查看</p><p>注意: Centos7.0 后，很多服务使用 systemctl 管理</p><p>chkconfig 基本语法</p><p>查看所有或指定服务:<code>chkconfig --list [|grep xxx]</code></p><p>查看指定服务<code>chkconfig 服务名 --list</code></p><p>修改服务在不同级别上的自启<code>chkconfig --level 5 服务名 on/off</code></p><p><img src="https://images.hckun.cn/image-20221020230952709.png" alt="image-20221020230952709"></p><p>chkconfig 重新设置服务后自启动或关闭，需要重启机器 reboot 生效</p><h2 id="9-8、systemctl-管理指令"><a href="#9-8、systemctl-管理指令" class="headerlink" title="9.8、systemctl 管理指令"></a>9.8、systemctl 管理指令</h2><p>基本语法:<code>systemctl [start|stop|restart|reload|status] 服务名</code></p><p>systemctl 指令管理的服务在 /usr/lib/systemd/system 查看</p><p>systemctl 设置服务的自启动状态:</p><p><code>systemctl list-unit-files [|grep 服务名]</code> 查看服务开机启动状态, grep 可以进行过滤</p><p><code>systemctl enable 服务名</code> 设置服务开机启动</p><p><code>systemctl disable 服务名</code>关闭服务开机启动</p><p><code>systemctl is-enabled 服务名</code>查询某个服务是否是自启动的</p><p>查看当前防火墙的状况:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld #查看防火墙状态</span><br><span class="line">systemctl stop firewalld #停止防火墙</span><br><span class="line">systemctl start firewalld #启动防火墙</span><br></pre></td></tr></table></figure><p>防火墙关闭或者启用防火墙后，立即生效;这种方式只是临时生效，当重启系统后，还是回归以前对服务的设置</p><p>如果希望设置某个服务自启动或关闭永久生效，要使用 <code>systemctl [enable|disable] 服务名</code></p><p>防火墙打开或关闭指定端口</p><ul><li>打开端口:<code>firewall-cmd --permanent --add-port=端口号/协议</code></li><li>关闭端口:<code>firewall-cmd --permanent --remove-port=端口号/协议</code></li><li>重新载入,才能生效 : <code>firewall-cmd --reload</code></li><li>查询端口是否开放: <code>firewall-cmd --query-port=端口/协议</code></li></ul><h2 id="9-9、动态监控进程"><a href="#9-9、动态监控进程" class="headerlink" title="9.9、动态监控进程"></a>9.9、动态监控进程</h2><p>top 与 ps 命令很相似。它们都用来显示正在执行的进程。Top 与 ps 最大的不同之处，在于top 在执行一段时间可以更新正在运行的的进程</p><p>基本语法:<code>top[选项]</code></p><p>选项说明: <code>-d 秒数</code>指定top指令每隔几秒更新,默认3秒</p><p>​                        <code>-i</code>使用top不显示任何闲置或者僵死程序</p><p>​                        <code>-P</code>通过指定监控进程ID仅监控某个进程的状态</p><p>交互操作说明:</p><p><code>P</code>:以CPU使用率排序,默认</p><p><code>M</code>:以内存使用率排序</p><p><code>N</code>:以PID排序</p><p><code>q</code>:退出top</p><p>案例 1.监视特定用户, 比如我们监控 tom 用户 </p><p>top：输入此命令，按回车键，查看执行的进程。 u：然后输入“u”回车，再输入用户名，即可</p><p>案例 2：终止指定的进程, 比如我们要结束 tom 登录 </p><p>top：输入此命令，按回车键，查看执行的进程。 k：然后输入“k”回车，再输入要结束的进程 ID 号</p><p>案例 3:指定系统状态更新的时间(每隔 10 秒自动更新), 默认是 3 秒 </p><p>top -d 10</p><h2 id="9-10、监控网络状态"><a href="#9-10、监控网络状态" class="headerlink" title="9.10、监控网络状态"></a>9.10、监控网络状态</h2><p>查看系统网络情况 netstat</p><p>基本语法:<code>netstat [选项]</code></p><p>选项说明:<code>-an</code>按一定顺序排列输出</p><p>​                        <code>-p</code>:显示哪个进程在调用</p><p>查看服务名为 sshd 的服务的信息:<code>netstat -anp | grep sshd</code></p><h1 id="10、RPM与YUM"><a href="#10、RPM与YUM" class="headerlink" title="10、RPM与YUM"></a>10、RPM与YUM</h1><h2 id="10-1、RPM包管理"><a href="#10-1、RPM包管理" class="headerlink" title="10.1、RPM包管理"></a>10.1、RPM包管理</h2><h3 id="10-1-1、介绍"><a href="#10-1-1、介绍" class="headerlink" title="10.1.1、介绍"></a>10.1.1、介绍</h3><p>​    rpm 用于互联网下载包的打包及安装工具，它包含在某些 Linux 分发版中。它生成具有.RPM扩展名的文件。RPM是 RedHat Package Manager（RedHat 软件包管理工具）的缩写，类似 windows 的 setup.exe，这一文件格式名称虽然打上了 RedHat 的标志，但理念是通用的</p><h3 id="10-1-2、RPM包查询"><a href="#10-1-2、RPM包查询" class="headerlink" title="10.1.2、RPM包查询"></a>10.1.2、RPM包查询</h3><p>查询已安装的RPM列表: <code>rpm -qa | grep xx</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep mysql #查询已安装的mysql包</span><br></pre></td></tr></table></figure><h3 id="10-1-3、RPM包名基本格式"><a href="#10-1-3、RPM包名基本格式" class="headerlink" title="10.1.3、RPM包名基本格式"></a>10.1.3、RPM包名基本格式</h3><p>例如:<code>firefox-60.2.2-1.el7.centos.x86_64</code></p><p><code>firefox</code>表示名称,<code>60.2.2-1</code>代表版本号,适用操作系统<code>el7.centos.x86_64</code>表示centos7.x的64位系统</p><p>如果是 i686、i386 表示 32 位系统，noarch 表示通用</p><h3 id="10-1-4、RPM包的其它查询指令"><a href="#10-1-4、RPM包的其它查询指令" class="headerlink" title="10.1.4、RPM包的其它查询指令"></a>10.1.4、RPM包的其它查询指令</h3><p><code>rpm -qa</code>:查询所安装的所有rpm包</p><p><code>rpm -qa | more</code>: 分页查看rpm包</p><p><code>rpm -qa | grep xx</code> :查询指定包名rpm包</p><p>查询软件包是否安装:<code>rpm -q 包名</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -q mysql-community-libs</span><br></pre></td></tr></table></figure><p>查询软件包信息:<code>rpm -qi 软件包名</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qi mysql-community-libs</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221022132138481.png" alt="image-20221022132138481"></p><p>查询软件包中的文件:<code>rpm -ql 软件包名</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ql mysql-community-libs</span><br></pre></td></tr></table></figure><p>查询文件所属软件包:<code>rpm -qf 文件全路径名</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qf /usr/lib64/mysql</span><br></pre></td></tr></table></figure><h3 id="10-1-5、安装RMP包"><a href="#10-1-5、安装RMP包" class="headerlink" title="10.1.5、安装RMP包"></a>10.1.5、安装RMP包</h3><p>基本语法:<code>rpm -ivh rmp包全路径名称</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh firefox</span><br></pre></td></tr></table></figure><p>参数说明:<code>i=install</code>:安装、<code>v=verbose</code>提示、<code>h=hash</code>:进度条</p><h3 id="10-1-6、卸载RMP包"><a href="#10-1-6、卸载RMP包" class="headerlink" title="10.1.6、卸载RMP包"></a>10.1.6、卸载RMP包</h3><p>基本语法:<code>rpm -e  软件包名</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e firefox</span><br></pre></td></tr></table></figure><ul><li><p>如果其它软件包依赖于您要卸载的软件包，卸载时则会产生错误信息</p></li><li><p>如果我们就是要删除 foo 这个 rpm 包，可以增加参数 –nodeps ,就可以强制删除，但是一般不推荐这样做，因为依赖于该软件包的程序可能无法运行</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e  --nodeps firefox #强制卸载</span><br></pre></td></tr></table></figure><h2 id="10-2、YUM"><a href="#10-2、YUM" class="headerlink" title="10.2、YUM"></a>10.2、YUM</h2><h3 id="10-2-1、YUM介绍"><a href="#10-2-1、YUM介绍" class="headerlink" title="10.2.1、YUM介绍"></a>10.2.1、YUM介绍</h3><p>​    Yum 是一个 Shell 前端软件包管理器。基于 RPM 包管理，能够从指定的服务器自动 下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包</p><h3 id="10-2-2、YUM基本指令"><a href="#10-2-2、YUM基本指令" class="headerlink" title="10.2.2、YUM基本指令"></a>10.2.2、YUM基本指令</h3><p>查询yum服务器是否有需要安装的软件:<code>yun list | grep 软件名称</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list  | grep firefox</span><br></pre></td></tr></table></figure><p>安装制定的yum包:<code>yum install xxx</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install forefox</span><br></pre></td></tr></table></figure><h1 id="11、搭建JavaEE环境"><a href="#11、搭建JavaEE环境" class="headerlink" title="11、搭建JavaEE环境"></a>11、搭建JavaEE环境</h1><h2 id="11-1、JDK8安装"><a href="#11-1、JDK8安装" class="headerlink" title="11.1、JDK8安装"></a>11.1、JDK8安装</h2><ul><li>将jdk安装包上传至Linux系统中</li></ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-15-centos jdk]# pwd</span><br><span class="line">/usr/local/environment/jdk</span><br><span class="line">[root@VM-4-15-centos jdk]# ls</span><br><span class="line">jdk-1.8.0_333-linux-x64.tar.g</span><br></pre></td></tr></table></figure><ul><li><p>解压到当前文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-1.8.0_333-linux-x64.tar.gz </span><br></pre></td></tr></table></figure></li><li><p>配置jdk环境环境变量</p><p>使用<code>vi</code>或<code>vim</code>打开<code>/etc/profile</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>输入大写的<code>G</code>到达文件末尾,再按<code>i</code>进入编辑模式,追加以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/environment/jdk/jdk1.8.0_333</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>按<code>Esc</code>退出编辑模式,输入<code>:wq</code>保存退出</p></li><li><p>执行下面命令使配置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>使用以下命令查看jdk是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>出现以下内容,则安装成功</p><p><img src="https://images.hckun.cn/image-20221021190009626.png" alt="image-20221021190009626"></p></li></ul><h2 id="11-2、Tomcat安装"><a href="#11-2、Tomcat安装" class="headerlink" title="11.2、Tomcat安装"></a>11.2、Tomcat安装</h2><ul><li><p>上传Tomcat安装包至Linux服务器中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-15-centos tomcat]# ls</span><br><span class="line">apache-tomcat-8.5.82.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压Tomcat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-8.5.82.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>进入bin目录启动Tomcat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd  apache-tomcat-8.5.82/bin  #进入bin目录</span><br><span class="line">./startup.sh  #启动Tomcat服务</span><br></pre></td></tr></table></figure><p>出现如下内容代表服务Tomcat服务启动成功        <img src="https://images.hckun.cn/image-20221021190830665.png" alt="image-20221021190830665"></p></li><li><p>浏览输入IP+端口号(默认端口8080)进行访问</p><p>访问不到需检查防火墙是开启8080端口</p></li></ul><p><img src="https://images.hckun.cn/image-20221021191321861.png" alt="image-20221021191321861"></p><h2 id="11-3、MySQL5-7安装"><a href="#11-3、MySQL5-7安装" class="headerlink" title="11.3、MySQL5.7安装"></a>11.3、MySQL5.7安装</h2><ul><li><p>创建MySQL压缩包存放目录,并进入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-15-centos environment]# mkdir mysql</span><br><span class="line">[root@VM-4-15-centos environment]# cd mysql</span><br></pre></td></tr></table></figure></li><li><p>通过网络wget获取安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure></li><li><p>下载完毕后对其进行解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure><p>注意:解压指令不要使用<code>z</code>选项,因为添加此选项表示通过gzip指令处理备份文件,此压缩文件没有<code>.gz</code>后缀,因此是不能使用<code>z</code>选项的</p></li><li><p>检查是否有<code>mariadb</code></p><p>CentOS7.6会自带一个类MySQL数据库mariadb,它会和MySQL冲突,因此需要将其删除</p><p>运行以下指令,查询mariadb相关安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep maria</span><br></pre></td></tr></table></figure><p>如果查询内容部不为空,需要将相关安装包删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps mariadb-libs #强制卸载</span><br></pre></td></tr></table></figure></li><li><p>安装MySQL</p><p>执行以下安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>若执行第四条指令报错如下:</p></li></ul><p><img src="https://images.hckun.cn/%E5%AE%89%E8%A3%85MySQL%E7%BC%BA%E5%B0%91libaio.png" alt="img"></p><p>这是因为缺少libaio依赖,使用如下指令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install libaio</span><br></pre></td></tr></table></figure><p>安装完成之后再次运行第四条指令</p><ul><li><p>启动Mysql</p><p>以上安装完毕之后,我们来启动Mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><p>查看MySQL运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld.service</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221022104017328.png" alt="image-20221022104017328"></p></li><li><p>修改初始化密码</p><p>MySQL会自动给root用户设置随机密码,运行以下指令可看到初始化密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;password&quot; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p>使用以下指令与初始化密码登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p # 执行指令后输入初始密码</span><br></pre></td></tr></table></figure><p>成功登录后要修改初始化密码,密码中必须包含大小写字母数字及符号,但对于个人开发设置一个简单的密码就行了,因此可以执行以下语句更改MySQL密码验证策略(默认策略是1)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_policy=0;</span><br></pre></td></tr></table></figure><p>运行以下语句设置新密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password for &#x27;root&#x27;@&#x27;localhost&#x27;=password(&#x27;新密码&#x27;);</span><br></pre></td></tr></table></figure><p>如果上述语句运行失败,可以使用以下语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure><p>最后运行以下语句使密码生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li><li><p>使用客户端工具连接</p><p>我们一般操作数据库都会使用客户端工具连接,这里我们使用Navicat进行连接</p><p>首选我们需要登录进数据库,进行如下配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql; #进入mysql数据库</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;数据库密码&#x27;; #授权远程连接</span><br><span class="line">flush privileges;  #刷新重新加载用户权限</span><br></pre></td></tr></table></figure><p>防火墙开放数据库端口,Navicat中进行连接</p><p><img src="https://images.hckun.cn/image-20221022110251178.png" alt="image-20221022110251178"></p></li><li><p>MySQL常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service # 开启服务</span><br><span class="line">systemctl stop mysqld.service # 关闭服务</span><br><span class="line">systemctl status mysqld.service # 查看服务状态</span><br><span class="line">mysql -u root -p # 进入命令窗口</span><br></pre></td></tr></table></figure></li><li><p>MySQL密码验证策略</p></li></ul><p><img src="https://images.hckun.cn/image-20221022110630356.png" alt="image-20221022110630356"></p><p>MySQL密码验证策略有三种,其中0密码复杂度最低,2密码复杂度最高</p><h2 id="11-4、Redis安装"><a href="#11-4、Redis安装" class="headerlink" title="11.4、Redis安装"></a>11.4、Redis安装</h2><ul><li>官网<code>https://redis.io/</code>下载对应系统安装包,将安装包上传至服务器中</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-15-centos redis]# pwd</span><br><span class="line">/usr/local/environment/redis</span><br><span class="line">[root@VM-4-15-centos redis]# ls</span><br><span class="line">redis-6.2.7.tar.gz</span><br></pre></td></tr></table></figure><ul><li><p>使用<code>tar -zxvf redis-6.2.7.tar.gz </code>  解压至当前目录</p></li><li><p>进入解压后redis目录分别执行<code>make</code> <code>make install</code></p></li><li><p>打开redis配置文件<code>redis.conf</code>我们来进行一些必要的配置</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JUST COMMENT OUT THE FOLLOWING LINE.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line">bind 127.0.0.1 -::1  #只允许来自指定IP的请求</span><br><span class="line">port 6379 #redis端口号</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">requirepass foobared <span class="comment">#配置redis客户端连接密码</span></span></span><br><span class="line">daemonize no #是否后台运行redis服务</span><br></pre></td></tr></table></figure><ul><li>配置完之后启动redis服务端</li></ul><p>​        进入src目录执行命令:<code>redis-server ../redis.conf </code></p><ul><li>客户端连接reids<br>执行命令:<code>redis-cli</code>进入客户端,输入<code>auth 密码</code>即可成功连接</li></ul><h2 id="11-5、Nginx安装"><a href="#11-5、Nginx安装" class="headerlink" title="11.5、Nginx安装"></a>11.5、Nginx安装</h2><ul><li><p>下载nginx安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://nginx.org/download/nginx-1.9.9.tar.gz</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">若提示没有wget命令则安装wget</span></span><br><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure></li><li><p>解压到当前目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.9.9.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>编译安装</p><p>进入解压后nginx目录,执行下列命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/environment/nginx/nginx-1.9.9/src #后面路径替换为实际安装目录</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>测试是否安装成功</p><p>进入nginx /usr/local/environment/nginx/nginx-1.9.9/src/sbin目录中,执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -t</span><br></pre></td></tr></table></figure><p>显示如下信息,代表成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-15-centos sbin]# ./nginx -t</span><br><span class="line">nginx: the configuration file /usr/local/environment/nginx/nginx-1.9.9/src/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/environment/nginx/nginx-1.9.9/src/conf/nginx.conf test is successful</span><br></pre></td></tr></table></figure></li><li><p>启动nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure></li><li><p>浏览器ip+端口访问,默认端口80</p><p><img src="https://images.hckun.cn/image-20221020195312667.png" alt="image-20221020195312667"></p></li><li><p>nginx常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./nginx -v #查看 nginx 版本号</span><br><span class="line">./nginx #启动 nginx</span><br><span class="line">./nginx -s stop #停止 nginx</span><br><span class="line">./nginx -s reload #重新加载 nginx</span><br></pre></td></tr></table></figure></li></ul><h2 id="11-6、MySQL5-7卸载"><a href="#11-6、MySQL5-7卸载" class="headerlink" title="11.6、MySQL5.7卸载"></a>11.6、MySQL5.7卸载</h2><ol><li><p>查看已安装的mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep -i mysql</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221031212638946.png" alt="image-20221031212638946"></p></li><li><p>卸载mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove mysql-community-server-5.7.26-1.el7.x86_64</span><br></pre></td></tr></table></figure><p>继续执行<code>rpm -qa | grep -i mysql</code>查看mysql的其它依赖</p><p>参考上述使用<code>yum remove mysql-xxx</code>依次卸载libs、common、client</p></li><li><p>删除mysql文件目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -name mysql #查看mysql相关的文件目录</span><br><span class="line"></span><br><span class="line">使用rm -rf 命令删除查询出的mysql的文件目录</span><br></pre></td></tr></table></figure><p>至此mysql已成功卸载</p></li></ol><h2 id="11-7、Tomcat、MySQL、Redis服务开机自启配置"><a href="#11-7、Tomcat、MySQL、Redis服务开机自启配置" class="headerlink" title="11.7、Tomcat、MySQL、Redis服务开机自启配置"></a>11.7、Tomcat、MySQL、Redis服务开机自启配置</h2><h3 id="11-7-1、Tomcat开机自启"><a href="#11-7-1、Tomcat开机自启" class="headerlink" title="11.7.1、Tomcat开机自启"></a>11.7.1、Tomcat开机自启</h3><ol><li>在<code>/etc/init.d</code>文件夹下新建tomcat文件，并 写入以下内容</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/init.d</span><br><span class="line">vim  tomcat</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">description: Tomcat9 Start Stop Restart</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">processname: tomcat9</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">chkconfig: 234 20 80</span></span><br><span class="line"></span><br><span class="line">CATALINA_HOME=/usr/local/environment/tomcat/apache-tomcat-8.5.82 #tomcat 安装目录</span><br><span class="line">TOMCAT_USER=root</span><br><span class="line">case $1 in</span><br><span class="line">        start)</span><br><span class="line">                su - $TOMCAT_USER -c &quot;sh $CATALINA_HOME/bin/startup.sh&quot;</span><br><span class="line">                ;;</span><br><span class="line">        stop)</span><br><span class="line">                su - $TOMCAT_USER -c &quot;sh $CATALINA_HOME/bin/shutdown.sh&quot;</span><br><span class="line">                ;;</span><br><span class="line">        restart)</span><br><span class="line">                su - $TOMCAT_USER -c &quot;sh $CATALINA_HOME/bin/shutdown.sh&quot;</span><br><span class="line">                su - $TOMCAT_USER -c &quot;sh $CATALINA_HOME/bin/startup.sh&quot;</span><br><span class="line">                ;;</span><br><span class="line">        *)</span><br><span class="line">                echo &#x27;please use : tomcat &#123;start | stop | restart&#125;&#x27;</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><ol start="2"><li>赋予执行权限</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 tomcat</span><br></pre></td></tr></table></figure><ol start="3"><li>向chkconfig添加 tomcat 服务的管理</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --add tomcat</span><br></pre></td></tr></table></figure><ol start="4"><li>设置tomcat服务自启动</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig tomcat on</span><br></pre></td></tr></table></figure><ol start="5"><li>查看tomcat的启动状态</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list | grep tomcat</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221026190615693.png" alt="image-20221026190615693"></p><p>运行级别3为on则证明设置成功</p><ol start="6"><li>重启Linux测试</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p><strong>解决Tomcat服务执行<code>./shutdown.sh</code>后服务关闭但进程仍存在问题</strong></p><p>问题原因:项目中存在非守护线程</p><p>解决办法:记录tomcat进程pid，shutdown时强制关闭进程</p><ol><li><p>进入tomcat的bin目录，使用<code>vim catalina.sh</code>命令编辑文件，输入/PRGDIR=<code>dirname &quot;$PRG&quot;</code> 然后回车搜索，在搜索到的位置后添加如下内容后保存退出</p><p><img src="https://images.hckun.cn/image-20221026191516808.png" alt="image-20221026191516808"></p><p><img src="https://images.hckun.cn/image-20221026191815175.png" alt="image-20221026191815175"></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ -z &quot;$CATALINA_PID&quot; ]; then</span><br><span class="line">    CATALINA_PID=$PRGDIR/CATALINA_PID</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ol start="2"><li>在tomcat的bin目录下，使用<code>vim shutdown.sh</code>命令编辑文件，输入<code>/exec &quot;$PRGDIR&quot;/&quot;$EXECUTABLE&quot;</code>然后回车搜索，在搜索到的位置按图添加如下内容后保存退出</li></ol><p><img src="https://images.hckun.cn/image-20221026192235375.png" alt="image-20221026192235375"></p><p><img src="https://images.hckun.cn/image-20221026192903624.png" alt="image-20221026192903624"></p><ol start="3"><li><p>测试完美解决</p><p><img src="https://images.hckun.cn/image-20221026192836842.png" alt="image-20221026192836842"></p></li></ol><h3 id="11-7-2、MySQL开机自启"><a href="#11-7-2、MySQL开机自启" class="headerlink" title="11.7.2、MySQL开机自启"></a>11.7.2、MySQL开机自启</h3><ol><li><p>按照11.3中方式安装MySQL执行如下命令即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld  #设置mysql服务开机启动</span><br><span class="line">systemctl is-enabled mysqld  #查询mysql服务是否开机启动</span><br></pre></td></tr></table></figure></li></ol><h3 id="11-7-3、Redis开机自启"><a href="#11-7-3、Redis开机自启" class="headerlink" title="11.7.3、Redis开机自启"></a>11.7.3、Redis开机自启</h3><pre><code>  1. 新建一个系统服务文件</code></pre>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/redis.service</span><br></pre></td></tr></table></figure><pre><code>  2. 将以下内容写入`redis.service`文件中</code></pre>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这行配置内容要根据redis的安装目录自定义路径</span></span><br><span class="line">ExecStart=/usr/local/environment/redis/redis-6.2.7/src/redis-server  /usr/local/environment/redis/redis-6.2.7/redis.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>   3 .保存系统服务文件，然后输入命令，重载系统服务</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><pre><code>  4. 设置开机自启</code></pre>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable redis</span><br></pre></td></tr></table></figure><pre><code>  5. 查询redis自启状态</code></pre>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-15-centos ~]# systemctl is-enabled redis</span><br><span class="line">enabled</span><br></pre></td></tr></table></figure><pre><code>  6. 重启Linux</code></pre>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><pre><code>  7. 查询redis进程是否启动</code></pre><p>   <img src="https://images.hckun.cn/image-20221026183538638.png" alt="image-20221026183538638"></p><h1 id="12、Shell编程"><a href="#12、Shell编程" class="headerlink" title="12、Shell编程"></a>12、Shell编程</h1><h2 id="12-1、Shell-编程语言"><a href="#12-1、Shell-编程语言" class="headerlink" title="12.1、Shell 编程语言"></a>12.1、Shell 编程语言</h2><h3 id="12-1-1、为什么要学习shell语言"><a href="#12-1-1、为什么要学习shell语言" class="headerlink" title="12.1.1、为什么要学习shell语言"></a>12.1.1、为什么要学习shell语言</h3><ol><li>Linux 运维工程师在进行服务器集群管理时，需要编写 Shell 程序来进行服务器管理</li><li>对于 JavaEE 和 Python 程序员来说，工作的需要，你的老大会要求你编写一些 Shell 脚本进行程序或者是服务器的维护，比如编写一个定时备份数据库的脚本</li><li>对于大数据程序员来说，需要编写 Shell 程序来管理集群</li></ol><h3 id="12-1-2、Shell是什么"><a href="#12-1-2、Shell是什么" class="headerlink" title="12.1.2、Shell是什么"></a>12.1.2、Shell是什么</h3><p>​    Shell 是一个命令行解释器，它为用户提供了一个向 Linux 内核发送请求以便运行程序的界面系统级程序，用户可以用 Shell 来启动、挂起、停止甚至是编写一些程序</p><h2 id="12-2、Shell-脚本的执行方式"><a href="#12-2、Shell-脚本的执行方式" class="headerlink" title="12.2、Shell 脚本的执行方式"></a>12.2、Shell 脚本的执行方式</h2><p>1、脚本格式要求</p><ul><li>脚本以<code>#!/bin/bash</code>开头</li><li>脚本需要有可执行权限</li></ul><p>2、编写第一个Shell脚本</p><p>创建一个Shell脚本,输出hello,word</p><p>创建<code>hello.sh</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch hello.sh</span><br></pre></td></tr></table></figure><p>写入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;hello,word&quot;</span><br></pre></td></tr></table></figure><p>3、执行脚本</p><p>方式1:首先要赋予<code>hello.sh</code>脚本的执行权限,再执行脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x hello.sh </span><br><span class="line">./hello.sh #使用相对路径执行</span><br><span class="line">/home/mysh/hello.sh  #使用绝对路径执行</span><br></pre></td></tr></table></figure><p>方式2:不用赋予执行权限,使用<code>sh 脚本全路径</code>即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod a-x hello.sh </span><br><span class="line">sh hello.sh</span><br><span class="line">sh /home/mysh/hello.sh</span><br></pre></td></tr></table></figure><h2 id="12-3、Shell变量"><a href="#12-3、Shell变量" class="headerlink" title="12.3、Shell变量"></a>12.3、Shell变量</h2><blockquote><p>Shell变量介绍</p></blockquote><p>1、Linux Shell中的变量分为系统变量和用户自定义变量</p><p>2、系统变量:<code>$HOME</code>、<code>$PWD``、$SHELL``、$USER</code>等,比如:<code>echo $HOME</code></p><p>3、显示当前系统中所有变量:<code>set</code></p><blockquote><p>Shell变量定义</p></blockquote><p>1、基本语法:</p><ul><li>定义变量: 变量名-值</li><li>撤销变量: unset 变量名</li><li>生命静态变量: readonly 变量  不能unset</li></ul><p>2、定义变量的规则</p><ul><li>变量名称可以由字母、数字和下划线组成，但是不能以数字开头。5A=200(×)</li><li>等号两侧不能有空格</li><li>变量名称一般习惯为大写</li></ul><p>3、快速入门</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.定义变量A</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.撤销变量A</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.声明静态的变量B=2</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义变量A，赋值为100</span></span><br><span class="line">A=100</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出A需加上$</span></span><br><span class="line">echo $A</span><br><span class="line">echo A=$A</span><br><span class="line">echo &quot;A=$A&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">撤销变量A</span></span><br><span class="line">unset A</span><br><span class="line">echo A=$A</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">声明静态变量B</span></span><br><span class="line">readonly B=200</span><br><span class="line">echo B=$B</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">撤销变量B，运行报错</span></span><br><span class="line">unset B</span><br></pre></td></tr></table></figure><p>4、将命令的返回值赋给变量</p><ul><li>A=<code>date</code>反引号，运行里面的命令，并把结果返回给变量 A</li><li>A=$(date) 等价于反引号</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">C=`date`</span><br><span class="line">D=$(date)</span><br><span class="line">echo &quot;C=$C&quot;</span><br><span class="line">echo &quot;D=$D&quot;</span><br></pre></td></tr></table></figure><h2 id="12-4、环境变量"><a href="#12-4、环境变量" class="headerlink" title="12.4、环境变量"></a>12.4、环境变量</h2><blockquote><p>基本语法</p></blockquote><ul><li>export 变量名=变量值    将 shell 变量输出为环境变量/全局变量</li><li>source 配置文件     让修改后的配置信息立即生效</li><li>echo $变量名      查询环境变量的值</li></ul><blockquote><p>快速入门</p></blockquote><p>1..在/etc/profile 文件中定义 TOMCAT_HOME 环境变量<br>2.查看环境变量 TOMCAT_HOME 的值<br>3.在另外一个 shell 程序中使用 TOMCAT_HOME</p><p>找到<code>/etc/profile</code>文件在末尾写上以下语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export TOMCAT_HOME=/usr/local/environment/tomcat</span><br></pre></td></tr></table></figure><p>让修改后的配置信息立即生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>打印TOMCAT_HOME变量内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $TOMCAT_HOME</span><br></pre></td></tr></table></figure><p>在我们自定义的my.sh脚本中打印TOMCAT_HOME的值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo TOMCAT_HOME=$TOMCAT_HOME</span><br></pre></td></tr></table></figure><p>shell脚本多行注释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;!</span><br><span class="line"></span><br><span class="line">   内容</span><br><span class="line">!</span><br></pre></td></tr></table></figure><h2 id="12-5、位置参数变量"><a href="#12-5、位置参数变量" class="headerlink" title="12.5、位置参数变量"></a>12.5、位置参数变量</h2><blockquote><p>介绍</p></blockquote><p>​    当我们执行一个 shell 脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量比如 ： ./myshell.sh 100 200 , 这个就是一个执行 shell 的命令行，可以在 myshell 脚本中获取到参数信息</p><blockquote><p>基本语法</p></blockquote><ul><li>$n （功能描述：n 为数字，$0 代表命令本身，$1-$9 代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如${10}）</li><li>$* （功能描述：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体）</li><li>$@（功能描述：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待）</li><li>$#（功能描述：这个变量代表命令行中所有参数的个数）</li></ul><blockquote><p>实际案例</p></blockquote><p>编写一个 shell 脚本 myshell.sh ， 在脚本中获取到命令行的各个参数信息</p><p>脚本内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo 1=$1 2=$2</span><br><span class="line">echo 所有的参数：$*</span><br><span class="line">echo $@</span><br><span class="line">echo 参数个数：$#</span><br></pre></td></tr></table></figure><p>执行脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./myshell.sh  100 200</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20221022152459679.png" alt="image-20221022152459679"></p><h2 id="12-6、预定义变量"><a href="#12-6、预定义变量" class="headerlink" title="12.6、预定义变量"></a>12.6、预定义变量</h2><blockquote><p>基本介绍</p></blockquote><p>预定义变量就是 shell 设计者事先已经定义好的变量，可以直接在 shell 脚本中使用</p><blockquote><p>基本语法</p></blockquote><ul><li>$$    当前进程的进程号（PID）</li><li>$!    后台运行的最后一个进程的进程号（PID）</li><li>$？最后一次执行的命令的返回状态。如果这个变量的值为 0，证明上一个命令正确执行；如果这个变量的值为非 0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了</li></ul><blockquote><p>实际案例</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo 当前执行的进程ID=$$</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以后台形式运行一个脚本，并获取它的进程号</span></span><br><span class="line">/home/mysh/myshell.sh &amp;</span><br><span class="line">echo 最后一个后台方式运行的程序ID=$!</span><br><span class="line">echo 执行的结果是：$?</span><br></pre></td></tr></table></figure><h2 id="12-7、运算符"><a href="#12-7、运算符" class="headerlink" title="12.7、运算符"></a>12.7、运算符</h2><blockquote><p>基本语法</p></blockquote><ul><li>“$((运算式))”或“$[运算式]”或者 expr m + n  //expression 表达式</li><li>注意 expr 运算符间要有空格, 如果希望将 expr 的结果赋给某个变量，使用 ``</li><li>expr <code>\*</code> 、<code>\</code>、<code>%</code>  分别代表乘、除、取余</li></ul><blockquote><p>实际案例</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">案例 1：计算（2+3）X4 的值</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用第一种方式</span></span><br><span class="line">REST1=$(((2+3)*4))</span><br><span class="line">echo rest1=$REST1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用第二种方式, 推荐使用</span></span><br><span class="line">REST2=$[(2+3)*4]</span><br><span class="line">echo rest2=$REST2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用第三种方式 <span class="built_in">expr</span></span></span><br><span class="line">TEMP=`expr 2 + 3`</span><br><span class="line">echo temp=$TEMP</span><br><span class="line">REST3=`expr $TEMP \* 4`</span><br><span class="line">echo rest3=$REST3</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">案例 2：请求出命令行的两个参数[整数]的和 20 50</span></span><br><span class="line">REST4=$[$1+$2]</span><br><span class="line">echo rest4=$REST4</span><br></pre></td></tr></table></figure><p>执行命令:<code>./oper.sh  100 200</code></p><h2 id="12-8、条件判断"><a href="#12-8、条件判断" class="headerlink" title="12.8、条件判断"></a>12.8、条件判断</h2><blockquote><p>基本语法</p></blockquote><p>[ condition ] 注意 condition 前后要有空格,非空返回true 可使用$?验证(0为true,&gt;1为false)</p><p>应用实例</p><ul><li>[ tom ] 返回true</li><li>[  ] 返回false</li><li>[ condition ] &amp;&amp; echo OK || echo notok 条件满足执行后面的语句</li></ul><blockquote><p>判断语句</p></blockquote><ul><li><p>字符串比较: = </p></li><li><p>整数比较</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-lt 小于</span><br><span class="line">-le 小于等于 little equal </span><br><span class="line">-eq 等于</span><br><span class="line">-gt 大于</span><br><span class="line">-ge 大于等于</span><br><span class="line">-ne 不等于</span><br></pre></td></tr></table></figure></li><li><p>文件权限判断</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-r 有读的权限</span><br><span class="line">-w 有写的权限</span><br><span class="line">-x 有执行的权限</span><br></pre></td></tr></table></figure></li><li><p>文件类型进行判断</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-f 文件存在并且是一个常规的文件</span><br><span class="line">-e 文件存在</span><br><span class="line">-d 文件存在并是一个目录</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>应用实例</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">案例 1：<span class="string">&quot;ok&quot;</span>是否等于<span class="string">&quot;ok&quot;</span></span></span><br><span class="line">if [ &quot;ok&quot; = &quot;ok&quot; ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;等于&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">案例 2：23 是否大于等于 22</span></span><br><span class="line">if [ 23 -ge 22 ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;大于&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">：/home/mysh/a.txt 目录中的文件是否存在</span></span><br><span class="line">if [ -f /home/mysh/a.txt ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;存在&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ tom ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;tom&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [  ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;tom&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出结果</span><br><span class="line">等于</span><br><span class="line">大于</span><br><span class="line">存在</span><br><span class="line">tom</span><br></pre></td></tr></table></figure><h2 id="12-9、流程控制if"><a href="#12-9、流程控制if" class="headerlink" title="12.9、流程控制if"></a>12.9、流程控制if</h2><p>基本语法:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">代码</span><br><span class="line">fi</span><br><span class="line">或者,多分支</span><br><span class="line">if [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">代码</span><br><span class="line">elif [ 条件判断式 ]</span><br><span class="line">then</span><br><span class="line">代码</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>应用案例:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">请编写一个 shell 程序，如果输入的参数，大于等于 60，则输出 <span class="string">&quot;及格了&quot;</span>，如果小于60,则输出<span class="string">&quot;不及格&quot;</span></span></span><br><span class="line">if [ $1 -ge 60  ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;及格了&quot;</span><br><span class="line">elif [ $1 -lt 60 ]</span><br><span class="line">then</span><br><span class="line">        echo &quot;不及格&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h2 id="12-10、流程控制case"><a href="#12-10、流程控制case" class="headerlink" title="12.10、流程控制case"></a>12.10、流程控制case</h2><p>基本语法:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">case $变量名 in</span><br><span class="line">“值1”)</span><br><span class="line">如果变量的值等于值 1，则执行程序 1</span><br><span class="line">;;</span><br><span class="line">“值2”)</span><br><span class="line">如果变量的值等于值 2，则执行程序 2</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">如果变量的值都不是以上的值，则执行此程序</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>应用实例:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">当命令行参数是 1 时，输出 <span class="string">&quot;周一&quot;</span>, 是 2 时，就输出<span class="string">&quot;周二&quot;</span>， 其它情况输出<span class="string">&quot;other&quot;</span></span></span><br><span class="line">case $1 in</span><br><span class="line">1)</span><br><span class="line">echo &quot;周一&quot;</span><br><span class="line">;;</span><br><span class="line">2)</span><br><span class="line">echo &quot;周二&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;other&quot;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h2 id="12-11、流程控制for"><a href="#12-11、流程控制for" class="headerlink" title="12.11、流程控制for"></a>12.11、流程控制for</h2><p>基本语法:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">语法1:</span><br><span class="line"></span><br><span class="line">for 变量 in 值1 值2 值3 ...</span><br><span class="line">do</span><br><span class="line">程序代码</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">应用实例:</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打印命令行输入的参数 [这里可以看出$* 和 <span class="variable">$@</span> 的区别]</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">$* 是把输入的参数,当做一个整体,所以,只会数据一句</span></span><br><span class="line">for i in &quot;$*&quot;</span><br><span class="line">do</span><br><span class="line">        echo &quot;$i&quot;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;------------------------------&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="variable">$@</span> 来获取输入的参数,这种是分别对待,有几个参数,就会输出几个</span></span><br><span class="line">for j in &quot;$@&quot;</span><br><span class="line">do</span><br><span class="line">        echo &quot;$j&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">语法2:</span><br><span class="line">for(( 初始值;循环控制条件;变量变化 ))</span><br><span class="line">do </span><br><span class="line">程序代码</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">应用实例:</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从 1 加到 100 的值输出显示</span></span><br><span class="line">SUM=0</span><br><span class="line">for(( i=1;i&lt;=100;i++))</span><br><span class="line">do</span><br><span class="line">        SUM=$((SUM+$i))</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;求和结果SUM=$SUM&quot;</span><br></pre></td></tr></table></figure><h2 id="12-12、流程控制while循环"><a href="#12-12、流程控制while循环" class="headerlink" title="12.12、流程控制while循环"></a>12.12、流程控制while循环</h2><p>基本语法:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while [ 条件判断式 ]</span><br><span class="line">do</span><br><span class="line">程序代码</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>应用实例:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从 1 加到 100 的值输出显示</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果我们需要从控制台接受参数，只需将100改为<span class="variable">$1</span>即可</span></span><br><span class="line">SUM=0</span><br><span class="line">i=100</span><br><span class="line">while [ $i -ge 0 ]</span><br><span class="line">do</span><br><span class="line">        SUM=$((SUM+$i))</span><br><span class="line">        i=$(($i-1))</span><br><span class="line">done</span><br><span class="line">echo &quot;求和结果SUM=$SUM&quot;</span><br></pre></td></tr></table></figure><h2 id="12-13、read读取控制台输入"><a href="#12-13、read读取控制台输入" class="headerlink" title="12.13、read读取控制台输入"></a>12.13、read读取控制台输入</h2><p>基本语法:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">read[选项][参数]</span><br><span class="line">选项:</span><br><span class="line">-p:指定读取值时的提示符</span><br><span class="line">-t指定读取值时等待的时间（秒），如果没有在指定的时间内输入，就不再等待了</span><br><span class="line">参数:</span><br><span class="line">变量:指定读取值的变量名</span><br></pre></td></tr></table></figure><p>应用实例:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">读取控制台输入一个 NUM1 值</span></span><br><span class="line">read -p &quot;请输入NUM1的值:&quot; NUM1</span><br><span class="line">echo &quot;输入NUM1的值为：$NUM1&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">读取控制台输入一个 NUM2 值，在 10 秒内输入。</span></span><br><span class="line">read -t 5 -p &quot;请输入NUM2的值:&quot; NUM2</span><br><span class="line">echo &quot;输入NUM2的值为：$NUM2&quot;</span><br></pre></td></tr></table></figure><h2 id="12-14、函数"><a href="#12-14、函数" class="headerlink" title="12.14、函数"></a>12.14、函数</h2><p>​    shell 编程和其它编程语言一样，有系统函数，也可以自定义函数</p><blockquote><p>系统函数</p></blockquote><ul><li><p>basename  返回完整路径最后 / 的部分，常用于获取文件名</p><p>basename [pathname] [suffix]  basename 命令会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串显示出来</p><p>suffix 为后缀，如果 suffix 被指定了，basename 会将 pathname 或 string 中的 suffix 去掉</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-15-centos mysh]# basename /home/mysh/a.txt</span><br><span class="line">a.txt</span><br><span class="line">[root@VM-4-15-centos mysh]# basename /home/mysh/a.txt a.txt</span><br><span class="line">a.txt</span><br><span class="line">[root@VM-4-15-centos mysh]# basename /home/mysh/a.txt .txt</span><br><span class="line">a</span><br><span class="line">[root@VM-4-15-centos mysh]# basename /home/mysh/a.txt t</span><br><span class="line">a.tx</span><br></pre></td></tr></table></figure><ul><li><p>dirname 返回完整路径最后 / 的前面的部分，常用于返回路径部分</p><p>dirname 文件绝对路径 （功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分））</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-4-15-centos mysh]# dirname /home/mysh/a.txt</span><br><span class="line">/home/mysh</span><br></pre></td></tr></table></figure><blockquote><p>自定义函数</p></blockquote><p>基本语法:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[function] function[()]</span><br><span class="line">&#123;</span><br><span class="line">Action;</span><br><span class="line">[return int;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用直接写函数名：funname [值]</p><p>应用实例:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">计算输入两个参数的和(动态的获取)， getSum</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义函数</span></span><br><span class="line">function getSum()&#123;</span><br><span class="line">SUM=$[ $n1+$n2 ]</span><br><span class="line">echo &quot;两数之和为：$SUM&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输入两个值</span></span><br><span class="line">read -p &quot;请输入第一个值：&quot; n1</span><br><span class="line">read -p &quot;请输入第一二值：&quot; n2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">调用函数</span></span><br><span class="line">getSum $n1 $n2</span><br></pre></td></tr></table></figure><h2 id="12-15、综合案例"><a href="#12-15、综合案例" class="headerlink" title="12.15、综合案例"></a>12.15、综合案例</h2><blockquote><p>需求分析</p></blockquote><p>1、每天凌晨 2:30 备份 数据库 test 到 /data/backup/db</p><p>2、备份开始和备份结束能够给出相应的提示信息</p><p>3、备份后的文件要求以备份时间为文件名，并打包成 .tar.gz 的形式，比如：2022-10-22_182901.tar.gz</p><p>4、在备份的同时，检查是否有 10 天前备份的数据库文件，如果有就将其删除</p><blockquote><p>脚本编写步骤</p></blockquote><p>执行以下指令进入sbin目录并创建Shell脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/sbin </span><br><span class="line">vim mysql_db_backup.sh</span><br></pre></td></tr></table></figure><p>然后在脚本中编写以下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份目录</span></span><br><span class="line">BACKUP=/data/backup/db</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当前时间</span></span><br><span class="line">DATETIME=$(date +%Y-%m-%d_%H%M%S)</span><br><span class="line">echo $DATETIME</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据库地址</span></span><br><span class="line">HOST=localhost</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据库用户名</span></span><br><span class="line">DB_USER=root</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据库密码</span></span><br><span class="line">DB_PW=123456</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份的数据库名</span></span><br><span class="line">DATABASE=test</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建备份目录，如果不存在就创建</span></span><br><span class="line">[ ! -d &quot;$&#123;BACKUP&#125;/$&#123;DATETIME&#125;&quot; ] &amp;&amp; mkdir -p &quot;$&#123;BACKUP&#125;/$&#123;DATETIME&#125;&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">备份数据库</span></span><br><span class="line">mysqldump -u$&#123;DB_USER&#125; -p$&#123;DB_PW&#125; --host=$&#123;HOST&#125; -q -R --databases $&#123;DATABASE&#125; | gzip &gt; $&#123;BACKUP&#125;/$&#123;DATETIME&#125;/$DATETIME.sql.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将文件处理成 tar.gz</span></span><br><span class="line">cd $&#123;BACKUP&#125;</span><br><span class="line">tar -zcvf $DATETIME.tar.gz $&#123;DATETIME&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除对应的备份目录</span></span><br><span class="line">rm -rf $&#123;BACKUP&#125;/$&#123;DATETIME&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除10天前的备份文件</span></span><br><span class="line">find $&#123;BACKUP&#125; -atime +10 -name &quot;*.tar.gz&quot; -exec rm -rf &#123;&#125; \;</span><br><span class="line">echo &quot;备份数据库 $&#123;DATABASE&#125; 成功&quot;</span><br></pre></td></tr></table></figure><p>赋予执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x mysql_db_backup.sh</span><br></pre></td></tr></table></figure><p>最后就是让编写的脚本定时执行即可</p><p>先执行以下指令进入调度文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>在调度文件中追加以下内容,表示每天2:30执行备份脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 2 * * * /usr/sbin/mysql_db_backup.sh</span><br></pre></td></tr></table></figure><p>然后保存并退出，执行以下指令查看当前任务调度信息中是否有刚刚追加的调度任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><p>到此，我们的定时备份脚本就写完了</p><p>Linux更多使用Ubuntu-的使用、日志管理、定制自己的-Linux、 Linux 内核源码与升级、备份与恢复、Linux 可视化管理工具、Linux 面试题、常用指令实践 请参考:<a href="https://www.bilibili.com/video/BV1Sv411r7vd?spm_id_from=333.337.search-card.all.click">【小白入门 通俗易懂】2021韩顺平 一周学会Linux</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支付宝支付</title>
      <link href="/post/3338cec1.html"/>
      <url>/post/3338cec1.html</url>
      
        <content type="html"><![CDATA[<p>本文参考:<a href="https://www.bilibili.com/video/BV1US4y1D77m">【尚硅谷】微信支付&amp;支付宝支付，一套搞定Java在线支付开发教程</a></p><h1 id="1、支付宝接入指引"><a href="#1、支付宝接入指引" class="headerlink" title="1、支付宝接入指引"></a>1、支付宝接入指引</h1><h2 id="1-1、开放平台注册账号"><a href="#1-1、开放平台注册账号" class="headerlink" title="1.1、开放平台注册账号"></a>1.1、开放平台注册账号</h2><p><a href="https://open.alipay.com/">https://open.alipay.com/</a></p><p><img src="https://images.hckun.cn/image-20220815220610422.png" alt="image-20220815220610422"></p><h3 id="1-2、常规接入流程"><a href="#1-2、常规接入流程" class="headerlink" title="1.2、常规接入流程"></a>1.2、常规接入流程</h3><ul><li>**创建应用 **选择应⽤类型、填写应⽤基本信息、添加应⽤功能、配置应⽤环境（获取⽀付宝公<br>钥、应⽤公钥、应⽤私钥、⽀付宝⽹关地址，配置接⼝内容加密⽅式）、查看 APPID</li><li><strong>绑定应用</strong> 将开发者账号中的APPID和商家账号PID进⾏绑定</li><li><strong>配置秘钥</strong> 即创建应⽤中的“配置应⽤环境”步骤</li><li><strong>上线应用</strong> 将应⽤提交审核</li><li><strong>签约功能</strong> 在商家中⼼上传营业执照、已备案⽹站信息等，提交审核进⾏签约</li></ul><h3 id="1-3、使⽤沙箱"><a href="#1-3、使⽤沙箱" class="headerlink" title="1.3、使⽤沙箱"></a>1.3、使⽤沙箱</h3><ul><li><strong>沙箱环境配置</strong> <a href="https://opendocs.alipay.com/common/02kkv7">https://opendocs.alipay.com/common/02kkv7</a></li><li><strong>沙箱版⽀付宝的下载和登录</strong> <a href="https://open.alipay.com/platform/appDaily.htm?tab=tool">https://open.alipay.com/platform/appDaily.htm?tab=tool</a></li></ul><h1 id="2、支付环境参数"><a href="#2、支付环境参数" class="headerlink" title="2、支付环境参数"></a>2、支付环境参数</h1><h2 id="2-1、环境准备"><a href="#2-1、环境准备" class="headerlink" title="2.1、环境准备"></a>2.1、环境准备</h2><p>我们这里还是使用我们之前在微信支付中使用的后端和前端案例演示</p><h2 id="2-2、引⼊⽀付参数"><a href="#2-2、引⼊⽀付参数" class="headerlink" title="2.2、引⼊⽀付参数"></a>2.2、引⼊⽀付参数</h2><h3 id="2-2-1、引入沙箱支付参数"><a href="#2-2-1、引入沙箱支付参数" class="headerlink" title="2.2.1、引入沙箱支付参数"></a>2.2.1、引入沙箱支付参数</h3><p>创建alipay-sandbox.properties配置文件，放于resource目录下，相关参数从开发者平台进行获取</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 支付宝支付相关参数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 应用ID,您的APPID，收款账号既是您的APPID对应支付宝账号</span></span><br><span class="line"><span class="attr">alipay.app-id</span>=<span class="string">20210******647812</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 商户PID,卖家支付宝账号ID</span></span><br><span class="line"><span class="attr">alipay.seller-id</span>=<span class="string">208*******991097448</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 支付宝网关</span></span><br><span class="line"><span class="attr">alipay.gateway-url</span>=<span class="string">https://openapi.alipaydev.com/gateway.do</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 商户私钥，您的PKCS8格式RSA2私钥</span></span><br><span class="line"><span class="attr">alipay.merchant-private-key</span>=<span class="string">MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCKF4C7OxQJ/nWBZOwsR5puDFPWlDdJYxCWjUdKY4uBVuwhc0FgyY1mTbyKnjJd6qlxUcqW6TpJBl2pWQCuUQHI7dooVJsSGUX6ferIoDXklgG3JXoOxroOCYOce9uDGbh5ch3VMM6V/QYIauB7oAWAV/q7+lA5my+yjYmI7LvanCMxUaxdeugy0pPJ1mUIFasgmvAnjVF2MIhLaj6GLJRRdiKq/476CZwDnrpwhRdWZUcIRuDgi1aTMd47DQzKVGD752CCEWtt2uikJSZtNHIRfHxDwOKIMnAMkBw9xfi+kMsCNy7U8FyWpoR/wYkbGpXx+2OPlp2ckPnfHPUoI/ZjAgMBAAECggEAdJoH3xCxiQbN3aaELZeAdLAAEs4wKM13ckh1DAEmCN6GoHAbokhOFzZIn5uY1+iPjtoLgIYK6yJu79HxWz+XjDwa27clAZFJn4u3NhThrNRlOmpwuA1hiPzLntSOtBKBzDppqlx98/QkpfLo/jpOquKfGx7votTA37nXikCrFplDVCV2FbwDj/GeEpqByjBxMyQQvL5Mh7swkWOy4TEBqRC9Q5CvMzEot5k3/8YJ7afgeOc8Es6HRuF8J2kqW/4aGNiKqUFU/DRBgXRJAvkHji0drcLlUJ22I0E0zeRVor5qPwNxe6DsaRrRzqE+DkrqDaB+/r3B27iGERvQWW7rEQKBgQDbtAtz1d0h3PWivIKtBy/kw1GRb9K6CJlnS4g762LWAkouW6zwU8ydPxQUuJs6fr/vRbRZWTwOUAix/Pcnimo3eMdrQJHhU8xKNRpND3TPZ/xaf78huZvCvr78fp3LvmdTxDQQY5PewOWXt4QXu8vFJcJOGD3Z79p3swD2Jkg5zwKBgQCg59jbvirBFu7kD5dVDpI/oEayWEmNFX3sqDBgFcdL/2NKWE6QTxldgdCWOb/6rEgUaNFdtVF5g8QBDub83YF9wjZ9T5SDXk22lc1jcJHHS333UL6CD7+DWhjQgwhL/55o4kfe4oWHxV6zbMvkxWl/Ism9HtHXxMRTxVjsFGjKVVO2jLQKBgB+dtjQyJ4NS/8ouZIOv0BWUge1y8RkyWZkCxpUQ14VCiRhIuwdOl9hdFm+w7S2qxcYR+tUMwVax775lT8/R3F0lNVVa0mNhorlfEOzb94xNQ4Rmc8PPqPmKZ4OAWQbT3JyyVGezXLkmeyOtFgYwUS+Ksn54gJYXLRIioVXKxoQDAoGAQGRoKZBR5dH6qjP/GN/q8SGACVFBpf9K1JF+QoWUqzo6Dv+F+UReX0hbJDNaO8QEWH6WAs1UHK/5mX7QO7OdZal6Su20/lmWPFvRzIihssfYkdRGgzNT2yQvnE+gLTFlFHMpEf9HQrWEehazrEqUM/rpFCvTOL2Mgv837QD+1MUCgYAW2eRBUQ3d9HuHby+tDR0xzhgihe4qv8Td9QDqiAqF8tsBUe5PuRJMIXaaIxdXcqRriHJgacUll0cPbU9ZYfybZFx1FNOC1NdrKzU3sj5B+4aKyUOf2jdSOi9l5/UCeVJlpKkUcz5234KtD9rN1AdYnUsASk/l1Noc342w9x+XfYPzlo+w==</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 支付宝公钥,查看地址：https://openhome.alipay.com/platform/keyManage.htm 对应APPID下的支付宝公钥</span></span><br><span class="line"><span class="attr">alipay.alipay-public-key</span>=<span class="string">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5gGBprFJjRI0Ofo2XIl27r9wdGDNB06KrFmS8mu1kcbJqlGhME72yW4bNTFYi1pHp4mglSZ7pLsjpa2L2aJIx0O7X2LXW+CAsV32hi9/KCtum2iJGsUirH4J2YNpBA/6zSUhICLZpVS6gmMRrbDd0MKUBoyYLKjTb/go9fiIdM0pzUKOCO/RsRnPS5DOtjZQ7vk3RogISkGjVQjo23FEnls+miDX/MrgOZF6sofE5tNPLKp5jqFk5glcyjrP2R8RIaOLB2qlUaW2/GNcEi5y7AgMrA7WGrPGv/1hSaxzhBpuxpyeL1DHcDOVZ78wT8Rr0C9J0bnK5h337q0WHc2iDGOL1QwIDAQAB</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 接口内容加密秘钥，对称秘钥</span></span><br><span class="line"><span class="attr">alipay.content-key</span>=<span class="string">Tbm3YbRQk089G19h+WB4A7g==</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 页面跳转同步通知页面路径</span></span><br><span class="line"><span class="attr">alipay.return-url</span>=<span class="string">http://localhost:8080/#/success</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 服务器异步通知页面路径  需http://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问</span></span><br><span class="line"><span class="comment"># 注意：每次重新启动ngrok，都需要根据实际情况修改这个配置</span></span><br><span class="line"><span class="attr">alipay.notify-url</span>=<span class="string">https://77ea-221-239-177-21.ngrok.io/api/ali-pay/trade/notify</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2、创建配置文件"><a href="#2-2-2、创建配置文件" class="headerlink" title="2.2.2、创建配置文件"></a>2.2.2、创建配置文件</h3><p>在config包中创建AlipayClientConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:alipay-sandbox.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayClientConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3、测试配置文件引入"><a href="#2-2-3、测试配置文件引入" class="headerlink" title="2.2.3、测试配置文件引入"></a>2.2.3、测试配置文件引入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PayApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;appid:&#123;&#125;&quot;</span>,environment.getProperty(<span class="string">&quot;alipay.app-id&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3、引入服务端SDK"><a href="#2-3、引入服务端SDK" class="headerlink" title="2.3、引入服务端SDK"></a>2.3、引入服务端SDK</h2><h3 id="2-3-1、引入依赖"><a href="#2-3-1、引入依赖" class="headerlink" title="2.3.1、引入依赖"></a>2.3.1、引入依赖</h3><p><a href="https://search.maven.org/artifact/com.alipay.sdk/alipay-sdk-java">https://search.maven.org/artifact/com.alipay.sdk/alipay-sdk-java</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>alipay-sdk-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.22.57.ALL<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2、创建客⼾端连接对象"><a href="#2-3-2、创建客⼾端连接对象" class="headerlink" title="2.3.2、创建客⼾端连接对象"></a>2.3.2、创建客⼾端连接对象</h3><p>创建带数据签名的客⼾端对象 <a href="https://opendocs.alipay.com/common/02kf5q">https://opendocs.alipay.com/common/02kf5q</a></p><p>完善刚才的AlipayClientConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:alipay-sandbox.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayClientConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AlipayClient <span class="title function_">getAlipayClient</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">AlipayConfig</span> <span class="variable">alipayConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayConfig</span>();</span><br><span class="line">        <span class="comment">//设置网关地址</span></span><br><span class="line">        alipayConfig.setServerUrl(environment.getProperty(<span class="string">&quot;alipay.gateway-url&quot;</span>));</span><br><span class="line">        <span class="comment">//设置应用ID</span></span><br><span class="line">        alipayConfig.setAppId(environment.getProperty(<span class="string">&quot;alipay.app-id&quot;</span>));</span><br><span class="line">        <span class="comment">//设置应用私钥</span></span><br><span class="line">        alipayConfig.setPrivateKey(environment.getProperty(<span class="string">&quot;alipay.merchant-private-key&quot;</span>));</span><br><span class="line">        <span class="comment">//设置请求格式，固定值json</span></span><br><span class="line">        alipayConfig.setFormat(AlipayConstants.FORMAT_JSON);</span><br><span class="line">        <span class="comment">//设置字符集</span></span><br><span class="line">        alipayConfig.setCharset(AlipayConstants.CHARSET_UTF8);</span><br><span class="line">        <span class="comment">//设置支付宝公钥</span></span><br><span class="line">        alipayConfig.setAlipayPublicKey(environment.getProperty(<span class="string">&quot;alipay.alipay-public-key&quot;</span>));</span><br><span class="line">        <span class="comment">//设置签名类型</span></span><br><span class="line">        alipayConfig.setSignType(AlipayConstants.SIGN_TYPE_RSA2);</span><br><span class="line">        <span class="comment">//构造client</span></span><br><span class="line">        <span class="type">AlipayClient</span> <span class="variable">alipayClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAlipayClient</span>(alipayConfig);</span><br><span class="line">        <span class="keyword">return</span> alipayClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、支付功能开发"><a href="#3、支付功能开发" class="headerlink" title="3、支付功能开发"></a>3、支付功能开发</h1><h2 id="3-1、统⼀收单下单并⽀付⻚⾯"><a href="#3-1、统⼀收单下单并⽀付⻚⾯" class="headerlink" title="3.1、统⼀收单下单并⽀付⻚⾯"></a>3.1、统⼀收单下单并⽀付⻚⾯</h2><h3 id="3-1-1、支付条调用流程"><a href="#3-1-1、支付条调用流程" class="headerlink" title="3.1.1、支付条调用流程"></a>3.1.1、支付条调用流程</h3><p><a href="https://opendocs.alipay.com/open/270/105899?ref=api">https://opendocs.alipay.com/open/270/105899?ref=api</a></p><p><img src="https://gw.alipayobjects.com/os/skylark-tools/public/files/0ba3e82ad37ecf8649ee4219cfe9d16b.png%26originHeight%3D2023%26originWidth%3D2815%26size%3D526149%26status%3Ddone%26width%3D2815" alt="img"></p><h3 id="3-1-2、接口说明"><a href="#3-1-2、接口说明" class="headerlink" title="3.1.2、接口说明"></a>3.1.2、接口说明</h3><p><a href="https://opendocs.alipay.com/apis/028r8t?scene=22">https://opendocs.alipay.com/apis/028r8t?scene=22</a></p><p>公共请求参数：所有接⼝都需要的参数<br>请求参数：当前接⼝需要的参数<br>公共响应参数：所有接⼝的响应中都包含的数据<br>响应参数：当前接⼝的响应中包含的数据</p><h3 id="3-1-3、发起支付请求"><a href="#3-1-3、发起支付请求" class="headerlink" title="3.1.3、发起支付请求"></a>3.1.3、发起支付请求</h3><p>创建 AliPayController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;支付宝支付相关接口&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/ali-pay&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliPayController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliPayService aliPayService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;统一支付下单API&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/trade/page/pay/&#123;productId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">tradePagePay</span><span class="params">(<span class="meta">@PathVariable</span> Long productId)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//支付宝开放平台接受 request 请求对象后</span></span><br><span class="line">            <span class="comment">// 会为开发者生成一个html 形式的 form表单，包含自动提交的脚本</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">formStr</span> <span class="operator">=</span> aliPayService.tradePay(productId);</span><br><span class="line">            <span class="comment">//我们将form表单字符串返回给前端程序，之后前端将会调用自动提交脚本，进行表单的提交</span></span><br><span class="line">            <span class="comment">//此时，表单会自动提交到action属性所指向的支付宝开放平台中，从而为用户展示一个支付页面</span></span><br><span class="line">            <span class="keyword">return</span> R.ok().data(<span class="string">&quot;formStr&quot;</span>, formStr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 AliPayService</p><p><strong>接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AliPayService</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">tradePay</span><span class="params">(Long productId)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliPayServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AliPayService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfoService orderInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AlipayClient alipayClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">tradePay</span><span class="params">(Long productId)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//创建订单</span></span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> orderInfoService.saveOrderInfo(productId);</span><br><span class="line">        <span class="comment">//调用支付宝接口</span></span><br><span class="line">        <span class="type">AlipayTradePagePayRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradePagePayRequest</span>();</span><br><span class="line">        <span class="comment">//支付成功后,跳转地址</span></span><br><span class="line">        request.setReturnUrl(environment.getProperty(<span class="string">&quot;alipay.return-url&quot;</span>));</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">bizContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        bizContent.put(<span class="string">&quot;out_trade_no&quot;</span>, orderInfo.getOrderNo());</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">total</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(orderInfo.getTotalFee().toString()).divide(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;100&quot;</span>));</span><br><span class="line">        bizContent.put(<span class="string">&quot;total_amount&quot;</span>, total);</span><br><span class="line">        bizContent.put(<span class="string">&quot;subject&quot;</span>, orderInfo.getTitle());</span><br><span class="line">        bizContent.put(<span class="string">&quot;product_code&quot;</span>, <span class="string">&quot;FAST_INSTANT_TRADE_PAY&quot;</span>);</span><br><span class="line">        request.setBizContent(bizContent.toString());</span><br><span class="line">        <span class="comment">//执行请求</span></span><br><span class="line">        <span class="type">AlipayTradePagePayResponse</span> <span class="variable">response</span> <span class="operator">=</span> alipayClient.pageExecute(request);</span><br><span class="line">        <span class="keyword">if</span> (response.isSuccess()) &#123;</span><br><span class="line">           log.info(<span class="string">&quot;响应结果:&#123;&#125;&quot;</span>,response.getBody());</span><br><span class="line">           <span class="keyword">return</span> response.getBody();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端进行接口调用,最终效果</p><p><img src="https://images.hckun.cn/image-20220815233226262.png" alt="image-20220815233226262"></p><p>使用沙箱提供的买家账号进行登录并付款</p><p><img src="https://images.hckun.cn/image-20220815233403558.png" alt="image-20220815233403558"></p><p>同样可以使用扫码支付，需下载沙箱版支付宝 <a href="https://open.alipay.com/develop/sandbox/tool">https://open.alipay.com/develop/sandbox/tool</a></p><p><img src="https://images.hckun.cn/image-20220815233728153.png" alt="image-20220815233728153"></p><h2 id="3-2、支付结果通知"><a href="#3-2、支付结果通知" class="headerlink" title="3.2、支付结果通知"></a>3.2、支付结果通知</h2><h3 id="3-2-1、设置异步通知地址"><a href="#3-2-1、设置异步通知地址" class="headerlink" title="3.2.1、设置异步通知地址"></a>3.2.1、设置异步通知地址</h3><p>在<code>AliPayServiceImpl</code>的<code>tradePay</code>方法中设置异步通知地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//支付成功后,异步通知地址</span></span><br><span class="line">request.setNotifyUrl(environment.getProperty(<span class="string">&quot;alipay.notify-url&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="3-2-2、启动内网穿透ngrok"><a href="#3-2-2、启动内网穿透ngrok" class="headerlink" title="3.2.2、启动内网穿透ngrok"></a>3.2.2、启动内网穿透ngrok</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngrok http <span class="number">8088</span></span><br></pre></td></tr></table></figure><h3 id="3-3-3、修改内网穿透配置"><a href="#3-3-3、修改内网穿透配置" class="headerlink" title="3.3.3、修改内网穿透配置"></a>3.3.3、修改内网穿透配置</h3><p>根据ngrok每次启动的情况，修改<code> alipay-sandbox.properties</code> ⽂件中的<code> alipay.notify-url</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 服务器异步通知页面路径  需http://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问</span><br><span class="line"># 注意：每次重新启动ngrok，都需要根据实际情况修改这个配置</span><br><span class="line">alipay.notify-url=http://7bb1-112-10-222-203.ngrok.io/api/ali-pay/trade/notify</span><br></pre></td></tr></table></figure><h3 id="3-3-4、开发异步通知接口"><a href="#3-3-4、开发异步通知接口" class="headerlink" title="3.3.4、开发异步通知接口"></a>3.3.4、开发异步通知接口</h3><p><code>AliPayController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;支付宝支付相关接口&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/ali-pay&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliPayController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliPayService aliPayService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfoService orderInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;支付宝支付成功异步通知&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;trade/notify&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">tradeNotify</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String, String&gt; parmas)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;支付宝异步通知&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;failure&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//异步通知验签</span></span><br><span class="line">        <span class="comment">//调用SDK验证签名</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">signVerified</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            signVerified = AlipaySignature.rsaCheckV1(parmas, environment.getProperty(<span class="string">&quot;alipay.alipay-public-key&quot;</span>),</span><br><span class="line">                    AlipayConstants.CHARSET_UTF8,</span><br><span class="line">                    AlipayConstants.SIGN_TYPE_RSA2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!signVerified) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;验签失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//验签成功后，按照支付结果异步通知中的描述，对支付结果中的业务内容进行二次校验，校验成功后在response中返回success并继续商户自身业务处理，校验失败返回failure</span></span><br><span class="line">        <span class="comment">/*1. 商家需要验证该通知数据中的 out_trade_no 是否为商家系统中创建的订单号。</span></span><br><span class="line"><span class="comment">        2. 判断 total_amount 是否确实为该订单的实际金额（即商家订单创建时的金额）。</span></span><br><span class="line"><span class="comment">        3. 校验通知中的 seller_id（或者 seller_email) 是否为 out_trade_no 这笔单据的对应的操作方（有的时候，一个商家可能有多个 seller_id/seller_email）。</span></span><br><span class="line"><span class="comment">        4. 验证 app_id 是否为该商家本身。</span></span><br><span class="line"><span class="comment">        上述 1、2、3、4 有任何一个验证不通过，则表明本次通知是异常通知，务必忽略。 在上述验证通过后商家必须根据支付宝不同类型的业务通知，正确的进行不同的业务处理，并且过滤重复的通知结果数据。在支付宝的业务通知中，只有交易通知状态为 TRADE_SUCCESS 或 TRADE_FINISHED 时，支付宝才会认定为买家付款成功。*/</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">outTradeNo</span> <span class="operator">=</span> parmas.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> orderInfoService.getState(outTradeNo);</span><br><span class="line">        <span class="keyword">if</span> (orderInfo == <span class="literal">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;订单不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">totalAmount</span> <span class="operator">=</span> parmas.get(<span class="string">&quot;total_amount&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(totalAmount).multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100</span>)).intValue();</span><br><span class="line">        <span class="keyword">if</span> (money != orderInfo.getTotalFee().intValue()) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;订单金额不一致&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sellerId</span> <span class="operator">=</span> parmas.get(<span class="string">&quot;seller_id&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!sellerId.equals(environment.getProperty(<span class="string">&quot;alipay.seller-id&quot;</span>)))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;商户PID不一致&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">appID</span> <span class="operator">=</span> parmas.get(<span class="string">&quot;app_id&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!appID.equals(environment.getProperty(<span class="string">&quot;alipay.app-id&quot;</span>)))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;APPID不一致&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在支付宝的业务通知中，只有交易通知状态为 TRADE_SUCCESS时,支付宝才会认定为买家付款成功</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tradeStatus</span> <span class="operator">=</span> parmas.get(<span class="string">&quot;trade_status&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;TRADE_SUCCESS&quot;</span>.equals(tradeStatus))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;未支付成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理订单状态、记录支付日志</span></span><br><span class="line">        aliPayService.dealOrder(parmas);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AliPayServiceImpl</code></p><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">dealOrder</span><span class="params">(Map&lt;String, String&gt; parmas)</span>;</span><br></pre></td></tr></table></figure><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dealOrder</span><span class="params">(Map&lt;String, String&gt; parmas)</span> &#123;</span><br><span class="line">    <span class="comment">//修改订单状态</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">outTradeNo</span> <span class="operator">=</span> parmas.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line">    orderInfoService.updateState(outTradeNo, OrderStatus.SUCCESS);</span><br><span class="line">    <span class="comment">//记录支付日志</span></span><br><span class="line">    paymentInfoService.savePayLog(parmas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-5、记录支付日志"><a href="#3-3-5、记录支付日志" class="headerlink" title="3.3.5、记录支付日志"></a>3.3.5、记录支付日志</h3><p><code>PaymentInfoServiceImpl</code></p><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">savePayLog</span><span class="params">(Map&lt;String, String&gt; parmas)</span>;</span><br></pre></td></tr></table></figure><p>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">savePayLog</span><span class="params">(Map&lt;String, String&gt; parmas)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">outTradeNo</span> <span class="operator">=</span> parmas.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tradeNo</span> <span class="operator">=</span> parmas.get(<span class="string">&quot;trade_no&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tradeStatus</span> <span class="operator">=</span> parmas.get(<span class="string">&quot;trade_status&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">totalAmount</span> <span class="operator">=</span> parmas.get(<span class="string">&quot;total_amount&quot;</span>);</span><br><span class="line">        <span class="type">PaymentInfo</span> <span class="variable">paymentInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaymentInfo</span>();</span><br><span class="line">        paymentInfo.setOrderNo(outTradeNo);</span><br><span class="line">        paymentInfo.setTransactionId(tradeNo);</span><br><span class="line">        paymentInfo.setPaymentType(<span class="string">&quot;支付宝支付&quot;</span>);</span><br><span class="line">        paymentInfo.setTradeType(<span class="string">&quot;电脑网站支付&quot;</span>);</span><br><span class="line">        paymentInfo.setTradeState(tradeStatus);</span><br><span class="line">        <span class="comment">//支付金额  分</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(totalAmount).multiply(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100</span>)).intValue();</span><br><span class="line">        paymentInfo.setPayerTotal(money);</span><br><span class="line">        paymentInfo.setContent(JSONObject.toJSONString(parmas));</span><br><span class="line">        baseMapper.insert(paymentInfo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-6、重复更新订单状态记录⽀付⽇志"><a href="#3-3-6、重复更新订单状态记录⽀付⽇志" class="headerlink" title="3.3.6、重复更新订单状态记录⽀付⽇志"></a>3.3.6、重复更新订单状态记录⽀付⽇志</h3><p><img src="https://images.hckun.cn/image-20220819213355470.png" alt="image-20220819213355470"></p><p>假如出现网络故障,支付宝没有收到<code>success</code>,那么支付宝会频繁调用通知接口,导致我们多次处理订单状态、记录支付日志,所以我们要增加判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dealOrder</span><span class="params">(Map&lt;String, String&gt; parmas)</span> &#123;</span><br><span class="line">       <span class="comment">//修改订单状态</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">outTradeNo</span> <span class="operator">=</span> parmas.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line">       <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> orderInfoService.getState(outTradeNo);</span><br><span class="line">       <span class="comment">//处理重复通知</span></span><br><span class="line">       <span class="keyword">if</span> (!OrderStatus.NOTPAY.getType().equals(orderInfo.getOrderStatus())) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       orderInfoService.updateState(outTradeNo, OrderStatus.SUCCESS);</span><br><span class="line">       <span class="comment">//记录支付日志</span></span><br><span class="line">       paymentInfoService.savePayLog(parmas);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-7、数据锁"><a href="#3-3-7、数据锁" class="headerlink" title="3.3.7、数据锁"></a>3.3.7、数据锁</h3><p>防止多个线程同时进入判断、更改订单状态、记录支付日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dealOrder</span><span class="params">(Map&lt;String, String&gt; parmas)</span> &#123;</span><br><span class="line">        <span class="comment">//修改订单状态</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">outTradeNo</span> <span class="operator">=</span> parmas.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> orderInfoService.getState(outTradeNo);</span><br><span class="line">        <span class="comment">//处理重复通知</span></span><br><span class="line">        <span class="comment">//在对业务数据进行状态检查和处理之前,要采用数据锁进行并发控制,以避免函数重入造成的数据混乱</span></span><br><span class="line">        <span class="comment">//尝试获取锁：成功获取则立即返回true，获取失败则立即返回false。不必一直等待锁的释放</span></span><br><span class="line">        <span class="keyword">if</span> (reentrantLock.tryLock()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!OrderStatus.NOTPAY.getType().equals(orderInfo.getOrderStatus())) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                orderInfoService.updateState(outTradeNo, OrderStatus.SUCCESS);</span><br><span class="line">                <span class="comment">//记录支付日志</span></span><br><span class="line">                paymentInfoService.savePayLog(parmas);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//释放锁</span></span><br><span class="line">                reentrantLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-3、统⼀收单交易关闭"><a href="#3-3、统⼀收单交易关闭" class="headerlink" title="3.3、统⼀收单交易关闭"></a>3.3、统⼀收单交易关闭</h2><h3 id="3-3-1、取消订单接口"><a href="#3-3-1、取消订单接口" class="headerlink" title="3.3.1、取消订单接口"></a>3.3.1、取消订单接口</h3><p>在<code>AliPayController</code>中增加方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;统一支付取消订单&quot;)</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/trade/close/&#123;orderNo&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R <span class="title function_">tradeClose</span><span class="params">(<span class="meta">@PathVariable</span> String orderNo)</span> &#123;</span><br><span class="line">       log.info(<span class="string">&quot;取消订单&quot;</span>);</span><br><span class="line">       aliPayService.tradeClose(orderNo);</span><br><span class="line">       <span class="keyword">return</span> R.ok().data(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;订单已取消&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2、关单并修改订单状态"><a href="#3-3-2、关单并修改订单状态" class="headerlink" title="3.3.2、关单并修改订单状态"></a>3.3.2、关单并修改订单状态</h3><p><code>AliPayService</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">tradeClose</span><span class="params">(String orderNo)</span>;</span><br></pre></td></tr></table></figure><p><code>AliPayServiceImpl</code>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tradeClose</span><span class="params">(String orderNo)</span> &#123;</span><br><span class="line">        <span class="comment">//调用支付宝提供的统一关单接口</span></span><br><span class="line">        tradeAliPayClose(orderNo);</span><br><span class="line">        <span class="comment">//修改订单状态</span></span><br><span class="line">        orderInfoService.updateState(orderNo, OrderStatus.CANCEL);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3、调⽤⽀付宝接⼝"><a href="#3-3-3、调⽤⽀付宝接⼝" class="headerlink" title="3.3.3、调⽤⽀付宝接⼝"></a>3.3.3、调⽤⽀付宝接⼝</h3><p><code>AliPayServiceImpl</code>中增加方法调用支付宝关单接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">tradeAliPayClose</span><span class="params">(String orderNo)</span> &#123;</span><br><span class="line">       <span class="type">AlipayTradeCloseRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradeCloseRequest</span>();</span><br><span class="line">       <span class="type">JSONObject</span> <span class="variable">bizContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">       bizContent.put(<span class="string">&quot;out_trade_no&quot;</span>, orderNo);</span><br><span class="line">       request.setBizContent(bizContent.toString());</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">AlipayTradeCloseResponse</span> <span class="variable">response</span> <span class="operator">=</span> alipayClient.execute(request);</span><br><span class="line">           log.info(response.getBody());</span><br><span class="line">           <span class="keyword">if</span> (response.isSuccess()) &#123;</span><br><span class="line">               <span class="keyword">return</span> response.getBody();</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//订单未创建</span></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="3-4、统⼀收单线下交易查询"><a href="#3-4、统⼀收单线下交易查询" class="headerlink" title="3.4、统⼀收单线下交易查询"></a>3.4、统⼀收单线下交易查询</h2><h3 id="3-4-1、查单接口调用"><a href="#3-4-1、查单接口调用" class="headerlink" title="3.4.1、查单接口调用"></a>3.4.1、查单接口调用</h3><p>商⼾后台未收到异步⽀付结果通知时，商⼾应该主动调⽤《统⼀收单线下交易查询接⼝》，同步订单状<br>态</p><p><code>AliPayController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;查询支付订单&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/trade/query/&#123;orderNo&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">tradeQuery</span><span class="params">(<span class="meta">@PathVariable</span> String orderNo)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;查询订单&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">trade</span> <span class="operator">=</span> aliPayService.tradeQuery(orderNo);</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;trade&quot;</span>, trade);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>AliPayService</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">tradeQuery</span><span class="params">(String orderNo)</span>;</span><br></pre></td></tr></table></figure><p><code>AliPayServiceImpl</code>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">tradeQuery</span><span class="params">(String orderNo)</span> &#123;</span><br><span class="line">        <span class="type">AlipayTradeQueryRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradeQueryRequest</span>();</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">bizContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        bizContent.put(<span class="string">&quot;out_trade_no&quot;</span>, orderNo);</span><br><span class="line">        request.setBizContent(bizContent.toString());</span><br><span class="line">        <span class="type">AlipayTradeQueryResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response = alipayClient.execute(request);</span><br><span class="line">            <span class="keyword">if</span> (response.isSuccess()) &#123;</span><br><span class="line">                <span class="keyword">return</span> response.getBody();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-5、定时查单"><a href="#3-5、定时查单" class="headerlink" title="3.5、定时查单"></a>3.5、定时查单</h2><p>对未支付订单进行定时的调用支付宝查单接口进行订单状态更新</p><p>创建<code>AlipayPayTask</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayPayTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfoService orderInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AliPayService aliPayService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentInfoService paymentInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每隔30秒查询查过1分钟且未支付的订单</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/30 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;定时任务执行&quot;</span>);</span><br><span class="line">            List&lt;OrderInfo&gt; orderList = orderInfoService.getTimeOutOrder(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (OrderInfo orderInfo : orderList) &#123;</span><br><span class="line">                <span class="comment">//查询订单状态</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> aliPayService.tradeQuery(orderInfo.getOrderNo());</span><br><span class="line">                log.info(<span class="string">&quot;查询订单返回结果:&#123;&#125;&quot;</span>,result);</span><br><span class="line">                <span class="keyword">if</span> (result == <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//本地存在订单、支付端未创建订单  本地关闭订单</span></span><br><span class="line">                    orderInfoService.updateState(orderInfo.getOrderNo(),OrderStatus.CLOSED);</span><br><span class="line">                &#125;</span><br><span class="line">                Map&lt;String, Object&gt; jsonObject = JSONObject.parseObject(result, Map.class);</span><br><span class="line">                Map&lt;String,String&gt; map = (Map&lt;String, String&gt;) jsonObject.get(<span class="string">&quot;alipay_trade_query_response&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">tradeStatus</span> <span class="operator">=</span> map.get(<span class="string">&quot;trade_status&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;WAIT_BUYER_PAY&quot;</span>.equals(tradeStatus))&#123;</span><br><span class="line">                    <span class="comment">//未支付,关闭订单,更新订单状态</span></span><br><span class="line">                    aliPayService.tradeClose(orderInfo.getOrderNo());</span><br><span class="line">                    orderInfoService.updateState(orderInfo.getOrderNo(),OrderStatus.CLOSED);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;TRADE_SUCCESS&quot;</span>.equals(tradeStatus))&#123;</span><br><span class="line">                    <span class="comment">//已支付,更新订单状态,记录支付日志</span></span><br><span class="line">                    orderInfoService.updateState(orderInfo.getOrderNo(),OrderStatus.SUCCESS);</span><br><span class="line">                    paymentInfoService.savePayLog(map);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6、统⼀收单交易退款"><a href="#3-6、统⼀收单交易退款" class="headerlink" title="3.6、统⼀收单交易退款"></a>3.6、统⼀收单交易退款</h2><h3 id="3-6-1、退款接⼝"><a href="#3-6-1、退款接⼝" class="headerlink" title="3.6.1、退款接⼝"></a>3.6.1、退款接⼝</h3><p><code>AliPayController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;申请退款&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/trade/refund/&#123;orderNo&#125;/&#123;reason&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">tradeRefund</span><span class="params">(<span class="meta">@PathVariable</span> String orderNo, <span class="meta">@PathVariable</span> String reason)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;申请退款&quot;</span>);</span><br><span class="line">        aliPayService.tradeRefund(orderNo, reason);</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>AliPayService</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">tradeRefund</span><span class="params">(String orderNo,String reason)</span>;</span><br></pre></td></tr></table></figure><p><code>AliPayServiceImpl</code>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tradeRefund</span><span class="params">(String orderNo, String reason)</span> &#123;</span><br><span class="line">        <span class="comment">//创建退款订单</span></span><br><span class="line">        <span class="type">RefundInfo</span> <span class="variable">refundInfo</span> <span class="operator">=</span> refundInfoService.createAliPayRefund(orderNo, reason);</span><br><span class="line">        <span class="comment">//调用支付宝退款接口</span></span><br><span class="line">        <span class="type">AlipayTradeRefundRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradeRefundRequest</span>();</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">bizContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        bizContent.put(<span class="string">&quot;out_trade_no&quot;</span>, orderNo);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">total</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(refundInfo.getTotalFee().toString()).divide(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;100&quot;</span>));</span><br><span class="line">        bizContent.put(<span class="string">&quot;refund_amount&quot;</span>, total);</span><br><span class="line">        bizContent.put(<span class="string">&quot;refund_reason&quot;</span>, reason);</span><br><span class="line">        request.setBizContent(bizContent.toString());</span><br><span class="line">        <span class="type">AlipayTradeRefundResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response = alipayClient.execute(request);</span><br><span class="line">            <span class="keyword">if</span> (response.isSuccess())&#123;</span><br><span class="line">                <span class="comment">//退款成功、更新订单状态</span></span><br><span class="line">                orderInfoService.updateState(orderNo,OrderStatus.REFUND_SUCCESS);</span><br><span class="line">                <span class="comment">//更新退款单</span></span><br><span class="line">                refundInfoService.updateAliPayRefund(refundInfo.getRefundNo(),response.getBody(),<span class="string">&quot;REFUND_SUCCESS&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                orderInfoService.updateState(orderNo,OrderStatus.REFUND_ABNORMAL);</span><br><span class="line">                refundInfoService.updateAliPayRefund(refundInfo.getRefundNo(),response.getBody(),<span class="string">&quot;REFUND_ERROR&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-2、创建退款记录"><a href="#3-6-2、创建退款记录" class="headerlink" title="3.6.2、创建退款记录"></a>3.6.2、创建退款记录</h3><p><code>RefundInfoService</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RefundInfo <span class="title function_">createAliPayRefund</span><span class="params">(String orderNo, String reason)</span>;</span><br></pre></td></tr></table></figure><p><code>RefundInfoServiceImpl</code>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> RefundInfo <span class="title function_">createAliPayRefund</span><span class="params">(String orderNo, String reason)</span> &#123;</span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> orderInfoService.getState(orderNo);</span><br><span class="line">        <span class="type">RefundInfo</span> <span class="variable">refundInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RefundInfo</span>();</span><br><span class="line">        refundInfo.setOrderNo(orderNo);</span><br><span class="line">        refundInfo.setReason(reason);</span><br><span class="line">        <span class="comment">//退款订单编号</span></span><br><span class="line">        refundInfo.setRefundNo(OrderNoUtils.getRefundNo());</span><br><span class="line">        <span class="comment">//原订单金额</span></span><br><span class="line">        refundInfo.setTotalFee(orderInfo.getTotalFee());</span><br><span class="line">        <span class="comment">//退款金额</span></span><br><span class="line">        refundInfo.setRefund(orderInfo.getTotalFee());</span><br><span class="line">        baseMapper.insert(refundInfo);</span><br><span class="line">        <span class="keyword">return</span> refundInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-3、更新退款记录"><a href="#3-6-3、更新退款记录" class="headerlink" title="3.6.3、更新退款记录"></a>3.6.3、更新退款记录</h3><p><code>RefundInfoService</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">updateAliPayRefund</span><span class="params">(String refundNo, String body, String state)</span>;</span><br></pre></td></tr></table></figure><p><code>RefundInfoServiceImpl</code>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAliPayRefund</span><span class="params">(String refundNo, String body, String state)</span> &#123;</span><br><span class="line">       Map&lt;String,String&gt;  map = JSONObject.parseObject(body, Map.class);</span><br><span class="line">       <span class="type">RefundInfo</span> <span class="variable">refundInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RefundInfo</span>();</span><br><span class="line">       <span class="type">String</span> <span class="variable">tradeNo</span> <span class="operator">=</span> map.get(<span class="string">&quot;trade_no&quot;</span>);</span><br><span class="line">       refundInfo.setRefundId(tradeNo);</span><br><span class="line">       refundInfo.setContentReturn(body);</span><br><span class="line">       refundInfo.setRefundStatus(state);</span><br><span class="line">       QueryWrapper&lt;RefundInfo&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">       wrapper.eq(<span class="string">&quot;refund_no&quot;</span>,refundNo);</span><br><span class="line">       baseMapper.update(refundInfo,wrapper);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="3-7、统⼀收单交易退款查询"><a href="#3-7、统⼀收单交易退款查询" class="headerlink" title="3.7、统⼀收单交易退款查询"></a>3.7、统⼀收单交易退款查询</h2><p><code>AliPayController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;退款查询&quot;)</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/trade/refund/query&#123;orderNo&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R <span class="title function_">tradeRefundQuery</span><span class="params">(<span class="meta">@PathVariable</span> String orderNo)</span> &#123;</span><br><span class="line">       log.info(<span class="string">&quot;退款查询&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> aliPayService.tradeRefundQuery(orderNo);</span><br><span class="line">       <span class="keyword">return</span> R.ok().data(<span class="string">&quot;result&quot;</span>, result);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>AliPayService</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">tradeRefundQuery</span><span class="params">(String orderNo)</span>;</span><br></pre></td></tr></table></figure><p><code>AliPayServiceImpl</code>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">tradeRefundQuery</span><span class="params">(String orderNo)</span> &#123;</span><br><span class="line">        <span class="type">AlipayTradeFastpayRefundQueryRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradeFastpayRefundQueryRequest</span>();</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">bizContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        bizContent.put(<span class="string">&quot;out_trade_no&quot;</span>, orderNo);</span><br><span class="line">        bizContent.put(<span class="string">&quot;out_request_no&quot;</span>, orderNo);</span><br><span class="line">        request.setBizContent(bizContent.toString());</span><br><span class="line">        <span class="type">AlipayTradeFastpayRefundQueryResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response = alipayClient.execute(request);</span><br><span class="line">            <span class="keyword">if</span> (response.isSuccess()) &#123;</span><br><span class="line">                <span class="keyword">return</span> response.getBody();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-8、对账"><a href="#3-8、对账" class="headerlink" title="3.8、对账"></a>3.8、对账</h2><p><code>AliPayController</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;获取账单url&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/bill/downloadurl/query/&#123;billDate&#125;/&#123;type&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">queryTradeBill</span><span class="params">(<span class="meta">@PathVariable</span> String billDate, <span class="meta">@PathVariable</span> String type)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;获取账单url&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">downloadUrl</span> <span class="operator">=</span> aliPayService.queryBill(billDate, type);</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;downloadUrl&quot;</span>, downloadUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AliPayService</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">queryBill</span><span class="params">(String billDate, String type)</span>;</span><br></pre></td></tr></table></figure><p><code>AliPayServiceImpl</code>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">queryBill</span><span class="params">(String billDate, String type)</span> &#123;</span><br><span class="line">        <span class="type">AlipayDataDataserviceBillDownloadurlQueryRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">AlipayDataDataserviceBillDownloadurlQueryRequest</span>();</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">bizContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        bizContent.put(<span class="string">&quot;bill_type&quot;</span>, type);</span><br><span class="line">        bizContent.put(<span class="string">&quot;bill_date&quot;</span>, billDate);</span><br><span class="line">        request.setBizContent(bizContent.toString());</span><br><span class="line">        <span class="type">AlipayDataDataserviceBillDownloadurlQueryResponse</span> <span class="variable">response</span> <span class="operator">=</span></span><br><span class="line">                <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response = alipayClient.execute(request);</span><br><span class="line">            <span class="keyword">if</span> (response.isSuccess()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;调用成功，返回结果 ===&gt; &quot;</span> + response.getBody());</span><br><span class="line">                <span class="comment">//获取账单下载地址</span></span><br><span class="line"></span><br><span class="line">                Map&lt;String, Object&gt; result = JSONObject.parseObject(response.getBody(), Map.class);</span><br><span class="line">                Map&lt;String, String&gt; map = (Map&lt;String, String&gt;) result.get(<span class="string">&quot;alipay_data_dataservice_bill_downloadurl_query_response&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">billDownloadUrl</span> <span class="operator">=</span> map.get(<span class="string">&quot;bill_download_url&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> billDownloadUrl;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>更多使用API详见支付宝支付官方文档:<a href="https://opendocs.alipay.com/open/270/105898?ref=api">https://opendocs.alipay.com/open/270/105898?ref=api</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 支付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 支付宝支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信支付</title>
      <link href="/post/3ec27523.html"/>
      <url>/post/3ec27523.html</url>
      
        <content type="html"><![CDATA[<p>本文参考:<a href="https://www.bilibili.com/video/BV1US4y1D77m">【尚硅谷】微信支付&amp;支付宝支付，一套搞定Java在线支付开发教程</a></p><h2 id="1、微信支付产品介绍"><a href="#1、微信支付产品介绍" class="headerlink" title="1、微信支付产品介绍"></a>1、微信支付产品介绍</h2><h3 id="1-1、付款码支付"><a href="#1-1、付款码支付" class="headerlink" title="1.1、付款码支付"></a>1.1、付款码支付</h3><p>用户展示微信钱包内的“付款码”给商家，商家扫描后直接完成支付，适用于线下面对面收银的场景。</p><h3 id="1-2、JSAPI支付"><a href="#1-2、JSAPI支付" class="headerlink" title="1.2、JSAPI支付"></a>1.2、JSAPI支付</h3><ul><li>线下场所：商户展示一个支付二维码，用户使用微信扫描二维码后，输入需要支付的金额，完成支<br>付。</li><li>公众号场景：用户在微信内进入商家公众号，打开某个页面，选择某个产品，完成支付。</li><li>PC网站场景：在网站中展示二维码，用户使用微信扫描二维码，输入需要支付的金额，完成支<br>付。</li></ul><p>特点：用户在客户端输入支付金额。</p><h3 id="1-3、小程序支付"><a href="#1-3、小程序支付" class="headerlink" title="1.3、小程序支付"></a>1.3、小程序支付</h3><p>在微信小程序平台内实现支付的功能。</p><h3 id="1-4、Native支付"><a href="#1-4、Native支付" class="headerlink" title="1.4、Native支付"></a>1.4、Native支付</h3><p>Native支付是指商户展示支付二维码，用户再用微信“扫一扫”完成支付的模式。这种方式适用于PC网<br>站。</p><p>特点：商家预先指定支付金额。</p><h3 id="1-5、APP支付"><a href="#1-5、APP支付" class="headerlink" title="1.5、APP支付"></a>1.5、APP支付</h3><p>商户通过在移动端独立的APP应用程序中集成微信支付模块，完成支付。</p><h3 id="1-6、刷脸支付"><a href="#1-6、刷脸支付" class="headerlink" title="1.6、刷脸支付"></a>1.6、刷脸支付</h3><p>用户在刷脸设备前通过摄像头刷脸、识别身份后进行的一种支付方式。</p><h2 id="2、接入指引"><a href="#2、接入指引" class="headerlink" title="2、接入指引"></a>2、接入指引</h2><h3 id="2-1、获取商户号"><a href="#2-1、获取商户号" class="headerlink" title="2.1、获取商户号"></a>2.1、获取商户号</h3><p>微信商户平台：<a href="https://pay.weixin.qq.com/">https://pay.weixin.qq.com/</a></p><p>场景：Native支付</p><p>步骤：提交资料 =&gt; 签署协议 =&gt; 获取商户号</p><h3 id="2-2、获取APPID"><a href="#2-2、获取APPID" class="headerlink" title="2.2、获取APPID"></a>2.2、获取APPID</h3><p>微信公众平台：<a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a><br>步骤：注册服务号 =&gt; 服务号认证 =&gt; 获取APPID =&gt; 绑定商户号</p><h3 id="2-3、获取API秘钥"><a href="#2-3、获取API秘钥" class="headerlink" title="2.3、获取API秘钥"></a>2.3、获取API秘钥</h3><p>APIv2版本的接口需要此秘钥<br>步骤：登录商户平台 =&gt; 选择 账户中心 =&gt; 安全中心 =&gt; API安全 =&gt; 设置API密钥</p><h3 id="2-4、获取APIv3秘钥"><a href="#2-4、获取APIv3秘钥" class="headerlink" title="2.4、获取APIv3秘钥"></a>2.4、获取APIv3秘钥</h3><p>APIv3版本的接口需要此秘钥<br>步骤：登录商户平台 =&gt; 选择 账户中心 =&gt; 安全中心 =&gt; API安全 =&gt; 设置APIv3密钥<br>随机密码生成工具：<a href="https://suijimimashengcheng.bmcx.com/">https://suijimimashengcheng.bmcx.com/</a></p><h3 id="2-5、申请商户API证书"><a href="#2-5、申请商户API证书" class="headerlink" title="2.5、申请商户API证书"></a>2.5、申请商户API证书</h3><p>APIv3版本的所有接口都需要；APIv2版本的高级接口需要（如：退款、企业红包、企业付款等）<br>步骤：登录商户平台 =&gt; 选择 账户中心 =&gt; 安全中心 =&gt; API安全 =&gt; 申请API证书</p><h3 id="2-6、获取微信平台证书"><a href="#2-6、获取微信平台证书" class="headerlink" title="2.6、获取微信平台证书"></a>2.6、获取微信平台证书</h3><p>可以预先下载，也可以通过编程的方式获取。</p><p><strong>注意：以上所有API秘钥和证书需妥善保管防止泄露</strong></p><h1 id="2、支付安全（证书-秘钥-签名）"><a href="#2、支付安全（证书-秘钥-签名）" class="headerlink" title="2、支付安全（证书/秘钥/签名）"></a>2、支付安全（证书/秘钥/签名）</h1><h2 id="1、信息安全的基础-机密性"><a href="#1、信息安全的基础-机密性" class="headerlink" title="1、信息安全的基础 - 机密性"></a>1、信息安全的基础 - 机密性</h2><ul><li><strong>明文</strong>：加密前的消息叫“明文”（plain text）</li><li><strong>密文</strong>：加密后的文本叫“密文”（cipher text）</li><li><strong>密钥</strong>：只有掌握特殊“钥匙”的人，才能对加密的文本进行解密，这里的“钥匙”就叫做“密钥”（key）</li></ul><blockquote><p>“密钥”就是一个字符串，度量单位是“位”（bit），比如，密钥长度是 128，就是 16 字节的二<br>进制串</p></blockquote><ul><li><strong>加密</strong>：实现机密性最常用的手段是“加密”（encrypt）</li></ul><blockquote><p>按照密钥的使用方式，加密可以分为两大类：对称加密和非对称加密。</p></blockquote><ul><li><strong>解密</strong>：使用密钥还原明文的过程叫“解密”（decrypt）</li><li><strong>加密算法</strong>：加密解密的操作过程就是“加密算法”</li></ul><blockquote><p>所有的加密算法都是公开的，而算法使用的“密钥”则必须保密</p></blockquote><h2 id="2、对称加密和非对称加密"><a href="#2、对称加密和非对称加密" class="headerlink" title="2、对称加密和非对称加密"></a>2、对称加密和非对称加密</h2><ul><li><strong>对称加密</strong><ul><li>特点：只使用一个密钥，密钥必须保密，常用的有 AES算法</li><li>优点：运算速度快</li><li>缺点：秘钥需要信息交换的双方共享，一旦被窃取，消息会被破解，无法做到安全的密钥交<br>换</li></ul></li><li><strong>非对称加密</strong><ul><li>特点：使用两个密钥：公钥和私钥，公钥可以任意分发而私钥保密，常用的有 RSA</li><li>优点：黑客获取公钥无法破解密文，解决了密钥交换的问题</li><li>缺点：运算速度非常慢</li></ul></li><li><strong>混合加密</strong><ul><li>实际场景中把对称加密和非对称加密结合起来使用</li></ul></li></ul><h2 id="3、身份认证"><a href="#3、身份认证" class="headerlink" title="3、身份认证"></a>3、身份认证</h2><ul><li>公钥加密，私钥解密的作用是加密信息</li><li>私钥加密，公钥解密的作用是身份认证</li></ul><h2 id="4、摘要算法（Digest-Algorithm）"><a href="#4、摘要算法（Digest-Algorithm）" class="headerlink" title="4、摘要算法（Digest Algorithm）"></a>4、摘要算法（Digest Algorithm）</h2><p>摘要算法就是我们常说的散列函数、哈希函数（Hash Function），它能够把任意长度的数据“压缩”成<br>固定长度、而且独一无二的“摘要”字符串，就好像是给这段数据生成了一个数字“指纹”。</p><p><strong>作用：</strong></p><ul><li>保证信息的完整性</li></ul><p><strong>特性：</strong></p><ul><li>不可逆：只有算法，没有秘钥，只能加密，不能解密</li><li>难题友好性：想要破解，只能暴力枚举</li><li>发散性：只要对原文进行一点点改动，摘要就会发生剧烈变化</li><li>抗碰撞性：原文不同，计算后的摘要也要不同</li></ul><p><strong>常见摘要算法：</strong></p><ul><li>MD5、SHA1、SHA2（SHA224、SHA256、SHA384）</li></ul><h2 id="5、数字签名"><a href="#5、数字签名" class="headerlink" title="5、数字签名"></a>5、数字签名</h2><p>数字签名是使用私钥对摘要加密生成签名，需要由公钥将签名解密后进行验证，实现身份认证和不可否<br>认</p><p><strong>签名和验证签名的流程：</strong></p><p><img src="https://images.hckun.cn/image-20220719222035608.png" alt="image-20220719222035608"></p><h2 id="6、数字证书"><a href="#6、数字证书" class="headerlink" title="6、数字证书"></a>6、数字证书</h2><p>数字证书解决“公钥的信任”问题，可以防止黑客伪造公钥。<br>不能直接分发公钥，公钥的分发必须使用数字证书，数字证书由CA颁发</p><p><strong>https协议中的数字证书：</strong></p><p><img src="https://images.hckun.cn/image-20220719222157719.png" alt="image-20220719222157719"></p><h2 id="7、微信APIv3证书"><a href="#7、微信APIv3证书" class="headerlink" title="7、微信APIv3证书"></a>7、微信APIv3证书</h2><p><strong>商户证书：</strong></p><p>商户API证书是指由商户申请的，包含商户的商户号、公司名称、公钥信息的证书。<br>商户证书在商户后台申请：<a href="https://pay.weixin.qq.com/index.php/core/cert/api_cert#/">https://pay.weixin.qq.com/index.php/core/cert/api_cert#/</a></p><p><img src="https://images.hckun.cn/image-20220719222259333.png" alt="image-20220719222259333"></p><p><strong>平台证书（微信支付平台）：</strong></p><p>微信支付平台证书是指由微信支付 负责申请的，包含微信支付平台标识、公钥信息的证书。商户可以使<br>用平台证书中的公钥进行验签。<br>平台证书的获取：<a href="https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay3_0.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay3_0.shtml</a></p><p><img src="https://images.hckun.cn/image-20220719222340659.png" alt="image-20220719222340659"></p><h2 id="8、API密钥和APIv3密钥"><a href="#8、API密钥和APIv3密钥" class="headerlink" title="8、API密钥和APIv3密钥"></a>8、API密钥和APIv3密钥</h2><p>都是对称加密需要使用的加密和解密密钥，一定要保管好，不能泄露。<br>API密钥对应V2版本的API<br>APIv3密钥对应V3版本的API</p><h1 id="3、案例项目创建"><a href="#3、案例项目创建" class="headerlink" title="3、案例项目创建"></a>3、案例项目创建</h1><h2 id="1、创建SpringBoot项目"><a href="#1、创建SpringBoot项目" class="headerlink" title="1、创建SpringBoot项目"></a>1、创建SpringBoot项目</h2><h3 id="1-1、使用IDEA快速创建一个SpringBoot-web项目"><a href="#1-1、使用IDEA快速创建一个SpringBoot-web项目" class="headerlink" title="1.1、使用IDEA快速创建一个SpringBoot-web项目"></a>1.1、使用IDEA快速创建一个SpringBoot-web项目</h3><h3 id="1-2、引入依赖"><a href="#1-2、引入依赖" class="headerlink" title="1.2、引入依赖"></a>1.2、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3、修改配置文件"><a href="#1-3、修改配置文件" class="headerlink" title="1.3、修改配置文件"></a>1.3、修改配置文件</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">pay</span></span><br><span class="line"><span class="comment"># 应用服务 WEB 访问端口</span></span><br><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">8080</span></span><br></pre></td></tr></table></figure><h3 id="1-4、创建测试Controller"><a href="#1-4、创建测试Controller" class="headerlink" title="1.4、创建测试Controller"></a>1.4、创建测试Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5、测试"><a href="#1-5、测试" class="headerlink" title="1.5、测试"></a>1.5、测试</h3><p>访问:<a href="http://localhost:8080/test/hello">http://localhost:8080/test/hello</a></p><h2 id="2、引入Swagger"><a href="#2、引入Swagger" class="headerlink" title="2、引入Swagger"></a>2、引入Swagger</h2><p>作用：自动生成接口文档和测试页面。</p><h3 id="2-1、引入依赖"><a href="#2-1、引入依赖" class="headerlink" title="2.1、引入依赖"></a>2.1、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--swagger ui--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2、Swagger配置文件"><a href="#2-2、Swagger配置文件" class="headerlink" title="2.2、Swagger配置文件"></a>2.2、Swagger配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Config</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(<span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>().title(<span class="string">&quot;微信支付案例接口文档&quot;</span>).build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、Swagger注解"><a href="#2-3、Swagger注解" class="headerlink" title="2.3、Swagger注解"></a>2.3、Swagger注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags=&quot;商品管理&quot;)</span> <span class="comment">//用在类上</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiOperation(&quot;测试接口&quot;)</span> <span class="comment">//用在方法上</span></span><br></pre></td></tr></table></figure><h3 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h3><p>访问：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><p><img src="https://images.hckun.cn/image-20220719225526602.png" alt="image-20220719225526602"></p><h2 id="3、定义统一结果"><a href="#3、定义统一结果" class="headerlink" title="3、定义统一结果"></a>3、定义统一结果</h2><p>作用：定义统一响应结果，为前端返回标准格式的数据。</p><h3 id="3-1、引入lombok依赖"><a href="#3-1、引入lombok依赖" class="headerlink" title="3.1、引入lombok依赖"></a>3.1、引入lombok依赖</h3><p>简化实体类的开发</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2、创建R类"><a href="#3-2、创建R类" class="headerlink" title="3.2、创建R类"></a>3.2、创建R类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">ok</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.setCode(<span class="number">0</span>);</span><br><span class="line">        r.setMsg(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">error</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.setCode(<span class="number">500</span>);</span><br><span class="line">        r.setMsg(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">data</span><span class="params">(String key, Object value)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3、修改原测试Controller"><a href="#3-3、修改原测试Controller" class="headerlink" title="3.3、修改原测试Controller"></a>3.3、修改原测试Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;测试类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;测试方法&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">                .data(<span class="string">&quot;timme&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4、使用Swaagger测试"><a href="#3-4、使用Swaagger测试" class="headerlink" title="3.4、使用Swaagger测试"></a>3.4、使用Swaagger测试</h3><h3 id="3-5、配置JSON时间格式"><a href="#3-5、配置JSON时间格式" class="headerlink" title="3.5、配置JSON时间格式"></a>3.5、配置JSON时间格式</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line"><span class="comment">    # 配置JSON时间格式</span></span><br><span class="line">  <span class="attr">jackson</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">date-format</span>: <span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone</span>: <span class="string">GMT+8</span></span><br></pre></td></tr></table></figure><h2 id="4、创建数据库"><a href="#4、创建数据库" class="headerlink" title="4、创建数据库"></a>4、创建数据库</h2><p>创建数据库、执行sql文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">USE `payment_demo`;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `t_order_info` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_order_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单标题&#x27;</span>,</span><br><span class="line">  `order_no` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商户订单编号&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `product_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付产品id&#x27;</span>,</span><br><span class="line">  `total_fee` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单金额(分)&#x27;</span>,</span><br><span class="line">  `code_url` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单二维码连接&#x27;</span>,</span><br><span class="line">  `order_status` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单状态&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `t_payment_info` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_payment_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;支付记录id&#x27;</span>,</span><br><span class="line">  `order_no` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商户订单编号&#x27;</span>,</span><br><span class="line">  `transaction_id` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付系统交易编号&#x27;</span>,</span><br><span class="line">  `payment_type` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付类型&#x27;</span>,</span><br><span class="line">  `trade_type` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;交易类型&#x27;</span>,</span><br><span class="line">  `trade_state` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;交易状态&#x27;</span>,</span><br><span class="line">  `payer_total` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付金额(分)&#x27;</span>,</span><br><span class="line">  `content` text COMMENT <span class="string">&#x27;通知参数&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `t_product` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_product` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">  `price` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;价格（分）&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `t_product` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_product`(`title`,`price`) <span class="keyword">values</span> (<span class="string">&#x27;Java课程&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_product`(`title`,`price`) <span class="keyword">values</span> (<span class="string">&#x27;大数据课程&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_product`(`title`,`price`) <span class="keyword">values</span> (<span class="string">&#x27;前端课程&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `t_product`(`title`,`price`) <span class="keyword">values</span> (<span class="string">&#x27;UI课程&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `t_refund_info` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_refund_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;退款单id&#x27;</span>,</span><br><span class="line">  `order_no` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商户订单编号&#x27;</span>,</span><br><span class="line">  `refund_no` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商户退款单编号&#x27;</span>,</span><br><span class="line">  `refund_id` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付系统退款单号&#x27;</span>,</span><br><span class="line">  `total_fee` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;原订单金额(分)&#x27;</span>,</span><br><span class="line">  `refund` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;退款金额(分)&#x27;</span>,</span><br><span class="line">  `reason` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;退款原因&#x27;</span>,</span><br><span class="line">  `refund_status` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;退款状态&#x27;</span>,</span><br><span class="line">  `content_return` text COMMENT <span class="string">&#x27;申请退款返回参数&#x27;</span>,</span><br><span class="line">  `content_notify` text COMMENT <span class="string">&#x27;退款结果通知参数&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5、集成Mybatis-Plus"><a href="#5、集成Mybatis-Plus" class="headerlink" title="5、集成Mybatis-Plus"></a>5、集成Mybatis-Plus</h2><h3 id="5-1、引入依赖"><a href="#5-1、引入依赖" class="headerlink" title="5.1、引入依赖"></a>5.1、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--持久层--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2、配置数据库连接"><a href="#5-2、配置数据库连接" class="headerlink" title="5.2、配置数据库连接"></a>5.2、配置数据库连接</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">driver-class-name</span>: <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/par_demo?useSSL=false&amp;serverTimezone=GMT%2B8&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">123456</span></span><br></pre></td></tr></table></figure><h3 id="5-3、定义实体类"><a href="#5-3、定义实体类" class="headerlink" title="5.3、定义实体类"></a>5.3、定义实体类</h3><p><strong>BaseEntity：</strong>BaseEntity为父类其他实体类需继承BaseEntity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义主键策略：跟随数据库的主键自增</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> String id; <span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;<span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;<span class="comment">//更新时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OrderInfo</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_order_info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderInfo</span>  <span class="keyword">extends</span> <span class="title class_">BaseEntity</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">//订单标题</span></span><br><span class="line">    <span class="keyword">private</span> String orderNo;<span class="comment">//商户订单编号</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;<span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> Long productId;<span class="comment">//支付产品id</span></span><br><span class="line">    <span class="keyword">private</span> Integer totalFee;<span class="comment">//订单金额(分)</span></span><br><span class="line">    <span class="keyword">private</span> String codeUrl;<span class="comment">//订单二维码连接</span></span><br><span class="line">    <span class="keyword">private</span> String orderStatus;<span class="comment">//订单状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PaymentInfo</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_payment_info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentInfo</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String orderNo;<span class="comment">//商品订单编号</span></span><br><span class="line">    <span class="keyword">private</span> String transactionId;<span class="comment">//支付系统交易编号</span></span><br><span class="line">    <span class="keyword">private</span> String paymentType;<span class="comment">//支付类型</span></span><br><span class="line">    <span class="keyword">private</span> String tradeType;<span class="comment">//交易类型</span></span><br><span class="line">    <span class="keyword">private</span> String tradeState;<span class="comment">//交易状态</span></span><br><span class="line">    <span class="keyword">private</span> Integer payerTotal;<span class="comment">//支付金额(分)</span></span><br><span class="line">    <span class="keyword">private</span> String content;<span class="comment">//通知参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Product</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title; <span class="comment">//商品名称</span></span><br><span class="line">    <span class="keyword">private</span> Integer price; <span class="comment">//价格（分）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RefundInfo</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_refund_info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefundInfo</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String orderNo;<span class="comment">//商品订单编号</span></span><br><span class="line">    <span class="keyword">private</span> String refundNo;<span class="comment">//退款单编号</span></span><br><span class="line">    <span class="keyword">private</span> String refundId;<span class="comment">//支付系统退款单号</span></span><br><span class="line">    <span class="keyword">private</span> Integer totalFee;<span class="comment">//原订单金额(分)</span></span><br><span class="line">    <span class="keyword">private</span> Integer refund;<span class="comment">//退款金额(分)</span></span><br><span class="line">    <span class="keyword">private</span> String reason;<span class="comment">//退款原因</span></span><br><span class="line">    <span class="keyword">private</span> String refundStatus;<span class="comment">//退款单状态</span></span><br><span class="line">    <span class="keyword">private</span> String contentReturn;<span class="comment">//申请退款返回参数</span></span><br><span class="line">    <span class="keyword">private</span> String contentNotify;<span class="comment">//退款结果通知参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4、定义持久层"><a href="#5-4、定义持久层" class="headerlink" title="5.4、定义持久层"></a>5.4、定义持久层</h3><p>定义Mapper接口继承 BaseMapper&lt;&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderInfoMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;OrderInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentInfoMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;PaymentInfo&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Product&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RefundInfoMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;RefundInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.pay.mapper.OrderInfoMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.pay.mapper.PaymentInfoMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.pay.mapper.ProductMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.pay.mapper.RefundInfoMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-5、定义MyBatis-Plus的配置文件"><a href="#5-5、定义MyBatis-Plus的配置文件" class="headerlink" title="5.5、定义MyBatis-Plus的配置文件"></a>5.5、定义MyBatis-Plus的配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.pay.mapper&quot;)</span><span class="comment">//持久层扫描</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//启用事务管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6、定义yml配置文件"><a href="#5-6、定义yml配置文件" class="headerlink" title="5.6、定义yml配置文件"></a>5.6、定义yml配置文件</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">configuration</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">log-impl</span>: <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl #sql日志</span></span><br><span class="line">  <span class="attr">mapper-locations</span>: <span class="string">classpath:com/example/pay/mapper/xml/*.xml</span></span><br></pre></td></tr></table></figure><h3 id="5-7、定义业务层"><a href="#5-7、定义业务层" class="headerlink" title="5.7、定义业务层"></a>5.7、定义业务层</h3><p>定义业务层接口继承 IService&lt;&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderInfoService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;OrderInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentInfoService</span>  <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;PaymentInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Product&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RefundInfoService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;RefundInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义业务层接口的实现类，并继承 ServiceImpl&lt;,&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderInfoServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrderInfoMapper, OrderInfo&gt; <span class="keyword">implements</span> <span class="title class_">OrderInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentInfoServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;PaymentInfoMapper, PaymentInfo&gt; <span class="keyword">implements</span> <span class="title class_">PaymentInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ProductMapper, Product&gt; <span class="keyword">implements</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefundInfoServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;RefundInfoMapper, RefundInfo&gt; <span class="keyword">implements</span> <span class="title class_">RefundInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-8、定义接口方法查询所有商品"><a href="#5-8、定义接口方法查询所有商品" class="headerlink" title="5.8、定义接口方法查询所有商品"></a>5.8、定义接口方法查询所有商品</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;商品管理&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询所有商品&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;listProduct&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">listProduct</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Product&gt; products = productService.list();</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;rows&quot;</span>, products);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-9、pom中配置build节点"><a href="#5-9、pom中配置build节点" class="headerlink" title="5.9、pom中配置build节点"></a>5.9、pom中配置build节点</h3><p>maven工程在默认情况下 src/main/java 目录下的所有资源文件是不发布到 target 目录下的，我们<br>在 pom 文件的 节点下配置一个资源发布过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 项目打包时会将java目录中的*.xml文件也进行打包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java&lt;/direct</span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6、搭建前端环境"><a href="#6、搭建前端环境" class="headerlink" title="6、搭建前端环境"></a>6、搭建前端环境</h2><p>直接使用前端工具运行提供的项目</p><p><img src="https://images.hckun.cn/image-20220720221239747.png" alt="image-20220720221239747"></p><h1 id="4、基础支付API-V3"><a href="#4、基础支付API-V3" class="headerlink" title="4、基础支付API V3"></a>4、基础支付API V3</h1><h2 id="1、引入支付参数"><a href="#1、引入支付参数" class="headerlink" title="1、引入支付参数"></a>1、引入支付参数</h2><h3 id="1-1、定义微信支付相关参数"><a href="#1-1、定义微信支付相关参数" class="headerlink" title="1.1、定义微信支付相关参数"></a>1.1、定义微信支付相关参数</h3><p>在resources文件夹中创建wxpay.properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 微信支付相关参数</span></span><br><span class="line"><span class="comment"># 商户号</span></span><br><span class="line"><span class="attr">wxpay.mch-id</span>=<span class="string">1558950191</span></span><br><span class="line"><span class="comment"># 商户API证书序列号</span></span><br><span class="line"><span class="attr">wxpay.mch-serial-no</span>=<span class="string">34345964330B66427E0D3D28826C4993C77E631F</span></span><br><span class="line"><span class="comment"># 商户私钥文件</span></span><br><span class="line"><span class="attr">wxpay.private-key-path</span>=<span class="string">classpath:apiclient_key.pem</span></span><br><span class="line"><span class="comment"># APIv3密钥</span></span><br><span class="line"><span class="attr">wxpay.api-v3-key</span>=<span class="string">UDuLFDcmy5Eb6o0nTNZdu6ek4DDh4K8B</span></span><br><span class="line"><span class="comment"># APPID</span></span><br><span class="line"><span class="attr">wxpay.appid</span>=<span class="string">wx74862e0dfcf69954</span></span><br><span class="line"><span class="comment"># 微信服务器地址</span></span><br><span class="line"><span class="attr">wxpay.domain</span>=<span class="string">https://api.mch.weixin.qq.com</span></span><br><span class="line"><span class="comment"># 接收结果通知地址</span></span><br><span class="line"><span class="comment"># 注意：每次重新启动ngrok，都需要根据实际情况修改这个配置</span></span><br><span class="line"><span class="attr">wxpay.notify-domain</span>=<span class="string">https://500c-219-143-130-12.ngrok.io</span></span><br></pre></td></tr></table></figure><h3 id="1-2、读取支付参数"><a href="#1-2、读取支付参数" class="headerlink" title="1.2、读取支付参数"></a>1.2、读取支付参数</h3><p>使用WxPayConfig.java读取wxpay.properties文件中的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:wxpay.properties&quot;)</span> <span class="comment">//读取配置文件</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;wxpay&quot;)</span> <span class="comment">//读取wxpay节点</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//使用set方法将wxpay节点中的值填充到当前类的属性中</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商户号</span></span><br><span class="line">    <span class="keyword">private</span> String mchId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商户API证书序列号</span></span><br><span class="line">    <span class="keyword">private</span> String mchSerialNo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商户私钥文件</span></span><br><span class="line">    <span class="keyword">private</span> String privateKeyPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// APIv3密钥</span></span><br><span class="line">    <span class="keyword">private</span> String apiV3Key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// APPID</span></span><br><span class="line">    <span class="keyword">private</span> String appid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 微信服务器地址</span></span><br><span class="line">    <span class="keyword">private</span> String domain;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收结果通知地址</span></span><br><span class="line">    <span class="keyword">private</span> String notifyDomain;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3、测试支付参数的获取"><a href="#1-3、测试支付参数的获取" class="headerlink" title="1.3、测试支付参数的获取"></a>1.3、测试支付参数的获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;测试类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxPayConfig wxPayConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;getPayConfig&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getPayConfig</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;appid&quot;</span>,wxPayConfig.getAppid());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4、配置-Annotation-Processor"><a href="#1-4、配置-Annotation-Processor" class="headerlink" title="1.4、配置 Annotation Processor"></a>1.4、配置 Annotation Processor</h3><p>可以帮助我们生成自定义配置的元数据信息，让配置文件和Java代码之间的对应参数可以自动定位，方<br>便开发</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、加载商户私钥"><a href="#2、加载商户私钥" class="headerlink" title="2、加载商户私钥"></a>2、加载商户私钥</h2><h3 id="2-1、复制商户私钥"><a href="#2-1、复制商户私钥" class="headerlink" title="2.1、复制商户私钥"></a>2.1、复制商户私钥</h3><p>将apiclient_key.pem私钥文件复制到resources文件夹下</p><h3 id="2-2、引入SDK"><a href="#2-2、引入SDK" class="headerlink" title="2.2、引入SDK"></a>2.2、引入SDK</h3><p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay6_0.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay6_0.shtml</a><br>我们可以使用官方提供的 SDK，帮助我们完成开发。实现了请求签名的生成和应答签名的验证。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.wechatpay-apiv3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wechatpay-apache-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3、获取商户私钥"><a href="#2-3、获取商户私钥" class="headerlink" title="2.3、获取商户私钥"></a>2.3、获取商户私钥</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> PrivateKey <span class="title function_">getPrivateKey</span><span class="params">(String path)</span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> PemUtil.loadPrivateKey(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(ResourceUtils.getFile(path)));</span><br><span class="line">       &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="2-4、测试商户私钥的获取"><a href="#2-4、测试商户私钥的获取" class="headerlink" title="2.4、测试商户私钥的获取"></a>2.4、测试商户私钥的获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PayApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxPayConfig wxPayConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">privateKeyPath</span> <span class="operator">=</span> wxPayConfig.getPrivateKeyPath();</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> wxPayConfig.getPrivateKey(privateKeyPath);</span><br><span class="line">        System.out.println(privateKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、获取签名验证器和HttpClient"><a href="#3、获取签名验证器和HttpClient" class="headerlink" title="3、获取签名验证器和HttpClient"></a>3、获取签名验证器和HttpClient</h2><h3 id="3-1、证书密钥使用说明"><a href="#3-1、证书密钥使用说明" class="headerlink" title="3.1、证书密钥使用说明"></a>3.1、证书密钥使用说明</h3><p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3_partner/wechatpay/wechatpay3_0.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3_partner/wechatpay/wechatpay3_0.shtml</a></p><p><img src="https://pay.weixin.qq.com/wiki/doc/apiv3/assets/img/common/ico-guide/chapter1_5_1.png" alt="img"></p><h3 id="3-2、获取签名验证器"><a href="#3-2、获取签名验证器" class="headerlink" title="3.2、获取签名验证器"></a>3.2、获取签名验证器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Verifier <span class="title function_">getVerifier</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取证书管理器实例</span></span><br><span class="line">            <span class="type">CertificatesManager</span> <span class="variable">certificatesManager</span> <span class="operator">=</span> CertificatesManager.getInstance();</span><br><span class="line">            <span class="comment">// 向证书管理器增加需要自动更新平台证书的商户信息</span></span><br><span class="line">            certificatesManager.putMerchant(mchId, <span class="keyword">new</span> <span class="title class_">WechatPay2Credentials</span>(mchId,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">PrivateKeySigner</span>(mchSerialNo, getPrivateKey(privateKeyPath))), apiV3Key.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            <span class="comment">// 从证书管理器中获取verifier</span></span><br><span class="line">            <span class="keyword">return</span> certificatesManager.getVerifier(mchId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3、获取-HttpClient-对象"><a href="#3-3、获取-HttpClient-对象" class="headerlink" title="3.3、获取 HttpClient 对象"></a>3.3、获取 HttpClient 对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> CloseableHttpClient <span class="title function_">getHttpClient</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">WechatPayHttpClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> WechatPayHttpClientBuilder.create()</span><br><span class="line">               .withMerchant(mchId, mchSerialNo, getPrivateKey(privateKeyPath))</span><br><span class="line">               .withValidator(<span class="keyword">new</span> <span class="title class_">WechatPay2Validator</span>(getVerifier()));</span><br><span class="line">       <span class="comment">// 通过WechatPayHttpClientBuilder构造的HttpClient，会自动的处理签名和验签，并进行证书自动更新</span></span><br><span class="line">       <span class="keyword">return</span> builder.build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="4、Native下单API"><a href="#4、Native下单API" class="headerlink" title="4、Native下单API"></a>4、Native下单API</h2><h3 id="4-1、Native支付流程"><a href="#4-1、Native支付流程" class="headerlink" title="4.1、Native支付流程"></a>4.1、Native支付流程</h3><p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_4.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_4.shtml</a></p><p><img src="https://pay.weixin.qq.com/wiki/doc/apiv3/wxpay/assets/img/common/pay/chapter3_1_2.png" alt="img"></p><h3 id="4-2、Native下单API"><a href="#4-2、Native下单API" class="headerlink" title="4.2、Native下单API"></a>4.2、Native下单API</h3><p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_1.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_1.shtml</a></p><p>商户端发起支付请求，微信端创建支付订单并生成支付二维码链接，微信端将支付二维码返回给商户<br>端，商户端显示支付二维码，用户使用微信客户端扫码后发起支付</p><h4 id="4-2-1、添加所需工具类"><a href="#4-2-1、添加所需工具类" class="headerlink" title="4.2.1、添加所需工具类"></a>4.2.1、添加所需工具类</h4><p>订单状态、微信支付状态、微信API地址枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">OrderStatus</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未支付</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NOTPAY(<span class="string">&quot;未支付&quot;</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUCCESS(<span class="string">&quot;支付成功&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已关闭</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CLOSED(<span class="string">&quot;超时已关闭&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已取消</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CANCEL(<span class="string">&quot;用户已取消&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退款中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REFUND_PROCESSING(<span class="string">&quot;退款中&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已退款</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REFUND_SUCCESS(<span class="string">&quot;已退款&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退款异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REFUND_ABNORMAL(<span class="string">&quot;退款异常&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">WxApiType</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Native下单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NATIVE_PAY(<span class="string">&quot;/v3/pay/transactions/native&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Native下单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NATIVE_PAY_V2(<span class="string">&quot;/pay/unifiedorder&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ORDER_QUERY_BY_NO(<span class="string">&quot;/v3/pay/transactions/out-trade-no/%s&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CLOSE_ORDER_BY_NO(<span class="string">&quot;/v3/pay/transactions/out-trade-no/%s/close&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 申请退款</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DOMESTIC_REFUNDS(<span class="string">&quot;/v3/refund/domestic/refunds&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询单笔退款</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DOMESTIC_REFUNDS_QUERY(<span class="string">&quot;/v3/refund/domestic/refunds/%s&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 申请交易账单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">TRADE_BILLS(<span class="string">&quot;/v3/bill/tradebill&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 申请资金账单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">FUND_FLOW_BILLS(<span class="string">&quot;/v3/bill/fundflowbill&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">WxNotifyType</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NATIVE_NOTIFY(<span class="string">&quot;/api/wx-pay/native/notify&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NATIVE_NOTIFY_V2(<span class="string">&quot;/api/wx-pay-v2/native/notify&quot;</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 退款结果通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">REFUND_NOTIFY(<span class="string">&quot;/api/wx-pay/refunds/notify&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>订单编号生成工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderNoUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取订单编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getOrderNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ORDER_&quot;</span> + getNo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取退款单编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getRefundNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;REFUND_&quot;</span> + getNo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newDate</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            result += random.nextInt(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newDate + result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2、创建WxPayController"><a href="#5-2-2、创建WxPayController" class="headerlink" title="5.2.2、创建WxPayController"></a>5.2.2、创建WxPayController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;微信支付相关接口&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/wxpay&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxPayService wxPayService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;调用native支付接口,获取支付二维码&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/native/&#123;productId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">nativePay</span><span class="params">(<span class="meta">@PathVariable</span> Long productId)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;获取支付二维码&quot;</span>);</span><br><span class="line">            Map&lt;String, Object&gt; map = wxPayService.nativePay(productId);</span><br><span class="line">            <span class="keyword">return</span> R.ok().data(<span class="string">&quot;data&quot;</span>, map);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2、创建WxPayService"><a href="#5-2-2、创建WxPayService" class="headerlink" title="5.2.2、创建WxPayService"></a>5.2.2、创建WxPayService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WxPayService</span> &#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; <span class="title function_">nativePay</span><span class="params">(Long productId)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-3、创建WxPayServiceIpl"><a href="#5-2-3、创建WxPayServiceIpl" class="headerlink" title="5.2.3、创建WxPayServiceIpl"></a>5.2.3、创建WxPayServiceIpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">WxPayService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxPayConfig wxPayConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">nativePay</span><span class="params">(Long productId)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//生成订单</span></span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderInfo</span>();</span><br><span class="line">        orderInfo.setProductId(productId);</span><br><span class="line">        <span class="comment">//订单号,使用工具类获取</span></span><br><span class="line">        orderInfo.setOrderNo(OrderNoUtils.getOrderNo());</span><br><span class="line">        <span class="comment">//订单状态,订单枚举类获取</span></span><br><span class="line">        orderInfo.setOrderStatus(OrderStatus.NOTPAY.getType());</span><br><span class="line">        orderInfo.setTitle(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="comment">//订单金额,分</span></span><br><span class="line">        orderInfo.setTotalFee(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用native下单接口</span></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(wxPayConfig.getDomain().concat(WxApiType.NATIVE_PAY.getType()));</span><br><span class="line">        <span class="comment">// 请求body参数</span></span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">&quot;appid&quot;</span>, wxPayConfig.getAppid());</span><br><span class="line">        params.put(<span class="string">&quot;mchid&quot;</span>, wxPayConfig.getMchId());</span><br><span class="line">        params.put(<span class="string">&quot;description&quot;</span>, orderInfo.getTitle());</span><br><span class="line">        params.put(<span class="string">&quot;out_trade_no&quot;</span>, orderInfo.getOrderNo());</span><br><span class="line">        params.put(<span class="string">&quot;notify_url&quot;</span>, wxPayConfig.getNotifyDomain().concat(WxNotifyType.NATIVE_NOTIFY.getType()));</span><br><span class="line">        <span class="comment">//订单金额</span></span><br><span class="line">        Map&lt;String, Object&gt; amountMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        amountMap.put(<span class="string">&quot;total&quot;</span>, orderInfo.getTotalFee());</span><br><span class="line">        amountMap.put(<span class="string">&quot;currency&quot;</span>, <span class="string">&quot;CNY&quot;</span>);</span><br><span class="line">        params.put(<span class="string">&quot;amount&quot;</span>, amountMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(JSONObject.toJSONString(params), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        httpPost.setEntity(entity);</span><br><span class="line">        httpPost.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="comment">//完成签名并执行请求</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> wxPayConfig.getHttpClient().execute(httpPost);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//响应状态码</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">        <span class="comment">//响应结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">codeUrl</span> <span class="operator">=</span> JSONObject.parseObject(result).get(<span class="string">&quot;code_url&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        resultMap.put(<span class="string">&quot;orderNo&quot;</span>, orderInfo.getOrderNo());</span><br><span class="line">        resultMap.put(<span class="string">&quot;codeUrl&quot;</span>, codeUrl);</span><br><span class="line">        <span class="keyword">return</span> resultMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-4、测试效果"><a href="#5-2-4、测试效果" class="headerlink" title="5.2.4、测试效果"></a>5.2.4、测试效果</h4><p><img src="https://images.hckun.cn/image-20220730112448445.png" alt="image-20220730112448445"></p><p><img src="https://images.hckun.cn/image-20220730112503826.png" alt="image-20220730112503826"></p><p><img src="https://images.hckun.cn/image-20220730112542659.png" alt="image-20220730112542659"></p><h3 id="4-3、创建课程订单"><a href="#4-3、创建课程订单" class="headerlink" title="4.3、创建课程订单"></a>4.3、创建课程订单</h3><h4 id="4-3-1、保存订单"><a href="#4-3-1、保存订单" class="headerlink" title="4.3.1、保存订单"></a>4.3.1、保存订单</h4><p>将5.2中生成的订单信息存储数据库</p><p>OrderInfoService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderInfoService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;OrderInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">   OrderInfo <span class="title function_">saveOrderInfo</span><span class="params">(Long productId)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderInfoServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderInfoServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrderInfoMapper, OrderInfo&gt; <span class="keyword">implements</span> <span class="title class_">OrderInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> OrderInfo <span class="title function_">saveOrderInfo</span><span class="params">(Long productId)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查找存在且未支付的订单</span></span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">noPayOrder</span> <span class="operator">=</span> getNoPayOrder(productId);</span><br><span class="line">        <span class="keyword">if</span> (noPayOrder != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> noPayOrder;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查询商品信息</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.selectById(productId);</span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderInfo</span>();</span><br><span class="line">        orderInfo.setProductId(productId);</span><br><span class="line">        <span class="comment">//订单号,使用工具类获取</span></span><br><span class="line">        orderInfo.setOrderNo(OrderNoUtils.getOrderNo());</span><br><span class="line">        <span class="comment">//订单状态,订单枚举类获取</span></span><br><span class="line">        orderInfo.setOrderStatus(OrderStatus.NOTPAY.getType());</span><br><span class="line">        orderInfo.setTitle(product.getTitle());</span><br><span class="line">        <span class="comment">//订单金额,分</span></span><br><span class="line">        orderInfo.setTotalFee(product.getPrice());</span><br><span class="line">        baseMapper.insert(orderInfo);</span><br><span class="line">        <span class="keyword">return</span> orderInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    OrderInfo <span class="title function_">getNoPayOrder</span><span class="params">(Long productId)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;OrderInfo&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;product_id&quot;</span>, productId);</span><br><span class="line">        wrapper.eq(<span class="string">&quot;order_status&quot;</span>, OrderStatus.NOTPAY.getType());</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectOne(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-2、存储二维码"><a href="#4-3-2、存储二维码" class="headerlink" title="4.3.2、存储二维码"></a>4.3.2、存储二维码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderInfoService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;OrderInfo&gt; &#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">saveCodeUrl</span><span class="params">(String orderNo,String codeUrl)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderInfoServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;OrderInfoMapper, OrderInfo&gt; <span class="keyword">implements</span> <span class="title class_">OrderInfoService</span> &#123;</span><br><span class="line">    <span class="comment">//存储生成的订单编号</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCodeUrl</span><span class="params">(String orderNo, String codeUrl)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;OrderInfo&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//更新条件</span></span><br><span class="line">        wrapper.eq(<span class="string">&quot;order_no&quot;</span>, orderNo);</span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderInfo</span>();</span><br><span class="line">        orderInfo.setCodeUrl(codeUrl);</span><br><span class="line">        baseMapper.update(orderInfo, wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4、获取订单列表"><a href="#4-4、获取订单列表" class="headerlink" title="4.4、获取订单列表"></a>4.4、获取订单列表</h3><p>创建OrderInfoController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;订单相关接口&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/order&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderInfoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfoService orderInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询订单列表&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/listOrder&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">listOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        QueryWrapper&lt;OrderInfo&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;OrderInfo&gt;().orderByDesc(<span class="string">&quot;create_time&quot;</span>);</span><br><span class="line">        List&lt;OrderInfo&gt; list = orderInfoService.list(wrapper);</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;data&quot;</span>, list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20220730122918394.png" alt="image-20220730122918394"></p><h2 id="5、支付通知API"><a href="#5、支付通知API" class="headerlink" title="5、支付通知API"></a>5、支付通知API</h2><h3 id="5-1、接收通知和返回应答"><a href="#5-1、接收通知和返回应答" class="headerlink" title="5.1、接收通知和返回应答"></a>5.1、接收通知和返回应答</h3><p>微信支付通过支付通知接口将用户支付成功消息通知给商户,这里我们要使用内网穿透工具，把我们的内网映射出去，可以让微信调用到我们的通知接口</p><p>增加解析请求体内容工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将通知参数转化为字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readData</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            br = request.getReader();</span><br><span class="line">            <span class="keyword">for</span> (String line; (line = br.readLine()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (result.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    result.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                result.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (br != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收回调通知方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//微信回调通知</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/native/notify&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">tokenUrl</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">       <span class="comment">//获取响应数据</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> HttpUtils.readData(request);</span><br><span class="line">       Map&lt;String, Object&gt; map = JSONObject.parseObject(data, Map.class);</span><br><span class="line">       log.info(<span class="string">&quot;接收内容:&#123;&#125;&quot;</span>, map);</span><br><span class="line">       <span class="comment">//成功应答</span></span><br><span class="line">       Map&lt;String, String&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       result.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;SUCCESS&quot;</span>);</span><br><span class="line">       result.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> JSONObject.toJSONString(result);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20220730130123324.png" alt="image-20220730130123324"></p><h3 id="5-2、验签"><a href="#5-2、验签" class="headerlink" title="5.2、验签"></a>5.2、验签</h3><p>对于微信的回调通知我们要进行身份验证，商户系统对于开启结果通知的内容一定要做签名验证，并校验通知的信息是否与商户侧的信息一致，防止数据泄露导致出现“假通知”，造成资金损失</p><p>创建通知验签工具类：WechatPay2ValidatorForRequest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WechatPay2ValidatorForRequest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(WechatPay2ValidatorForRequest.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应答超时时间，单位为分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">RESPONSE_EXPIRED_MINUTES</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Verifier verifier;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String requestId;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String body;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WechatPay2ValidatorForRequest</span><span class="params">(Verifier verifier, String requestId, String body)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.verifier = verifier;</span><br><span class="line">        <span class="built_in">this</span>.requestId = requestId;</span><br><span class="line">        <span class="built_in">this</span>.body = body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> IllegalArgumentException <span class="title function_">parameterError</span><span class="params">(String message, Object... args)</span> &#123;</span><br><span class="line">        message = String.format(message, args);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;parameter error: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> IllegalArgumentException <span class="title function_">verifyFail</span><span class="params">(String message, Object... args)</span> &#123;</span><br><span class="line">        message = String.format(message, args);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;signature verify fail: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">validate</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//处理请求参数</span></span><br><span class="line">            validateParameters(request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//构造验签名串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> buildMessage(request);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">serial</span> <span class="operator">=</span> request.getHeader(WECHAT_PAY_SERIAL);</span><br><span class="line">            <span class="type">String</span> <span class="variable">signature</span> <span class="operator">=</span> request.getHeader(WECHAT_PAY_SIGNATURE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//验签</span></span><br><span class="line">            <span class="keyword">if</span> (!verifier.verify(serial, message.getBytes(StandardCharsets.UTF_8), signature)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> verifyFail(<span class="string">&quot;serial=[%s] message=[%s] sign=[%s], request-id=[%s]&quot;</span>,</span><br><span class="line">                        serial, message, signature, requestId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            log.warn(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">validateParameters</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> ensure HEADER_WECHAT_PAY_TIMESTAMP at last</span></span><br><span class="line">        String[] headers = &#123;WECHAT_PAY_SERIAL, WECHAT_PAY_SIGNATURE, WECHAT_PAY_NONCE, WECHAT_PAY_TIMESTAMP&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (String headerName : headers) &#123;</span><br><span class="line">            header = request.getHeader(headerName);</span><br><span class="line">            <span class="keyword">if</span> (header == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> parameterError(<span class="string">&quot;empty [%s], request-id=[%s]&quot;</span>, headerName, requestId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断请求是否过期</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">timestampStr</span> <span class="operator">=</span> header;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Instant</span> <span class="variable">responseTime</span> <span class="operator">=</span> Instant.ofEpochSecond(Long.parseLong(timestampStr));</span><br><span class="line">            <span class="comment">// 拒绝过期请求</span></span><br><span class="line">            <span class="keyword">if</span> (Duration.between(responseTime, Instant.now()).abs().toMinutes() &gt;= RESPONSE_EXPIRED_MINUTES) &#123;</span><br><span class="line">                <span class="keyword">throw</span> parameterError(<span class="string">&quot;timestamp=[%s] expires, request-id=[%s]&quot;</span>, timestampStr, requestId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DateTimeException | NumberFormatException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> parameterError(<span class="string">&quot;invalid timestamp=[%s], request-id=[%s]&quot;</span>, timestampStr, requestId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String <span class="title function_">buildMessage</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">timestamp</span> <span class="operator">=</span> request.getHeader(WECHAT_PAY_TIMESTAMP);</span><br><span class="line">        <span class="type">String</span> <span class="variable">nonce</span> <span class="operator">=</span> request.getHeader(WECHAT_PAY_NONCE);</span><br><span class="line">        <span class="keyword">return</span> timestamp + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                + nonce + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                + body + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String <span class="title function_">getResponseBody</span><span class="params">(CloseableHttpResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">        <span class="keyword">return</span> (entity != <span class="literal">null</span> &amp;&amp; entity.isRepeatable()) ? EntityUtils.toString(entity) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在微信回调通知中进行签名验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/native/notify&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">tokenUrl</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">       Map&lt;String, String&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//获取响应数据</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> HttpUtils.readData(request);</span><br><span class="line">           Map&lt;String, Object&gt; map = JSONObject.parseObject(data, Map.class);</span><br><span class="line">           log.info(<span class="string">&quot;接收内容:&#123;&#125;&quot;</span>, map);</span><br><span class="line">           <span class="comment">//签名验证</span></span><br><span class="line">           <span class="type">WechatPay2ValidatorForRequest</span> <span class="variable">validator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WechatPay2ValidatorForRequest</span>(Verifier, map.get(<span class="string">&quot;id&quot;</span>).toString(), data);</span><br><span class="line">           <span class="keyword">if</span> (!validator.validate(request)) &#123;</span><br><span class="line">               log.info(<span class="string">&quot;签名验证失败&quot;</span>);</span><br><span class="line">               response.setStatus(<span class="number">500</span>);</span><br><span class="line">               result.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">               result.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;失败&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span> JSONObject.toJSONString(result);</span><br><span class="line">           &#125;</span><br><span class="line">           log.info(<span class="string">&quot;签名验证成功&quot;</span>);</span><br><span class="line">           <span class="comment">//成功应答</span></span><br><span class="line">           response.setStatus(<span class="number">200</span>);</span><br><span class="line">           result.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;SUCCESS&quot;</span>);</span><br><span class="line">           result.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">           <span class="keyword">return</span> JSONObject.toJSONString(result);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           result.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">           result.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;失败&quot;</span>);</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> JSONObject.toJSONString(result);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="5-3、解密"><a href="#5-3、解密" class="headerlink" title="5.3、解密"></a>5.3、解密</h3><p>由于微信回调信息为加密数据，我们需要进行解密获取明文数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">decryption</span><span class="params">(String msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> JSONObject.parseObject(msg, Map.class);</span><br><span class="line">     Map&lt;String, String&gt; resource = (Map&lt;String, String&gt;) map.get(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">     <span class="type">AesUtil</span> <span class="variable">aesUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesUtil</span>(wxPayConfig.getApiV3Key().getBytes(StandardCharsets.UTF_8));</span><br><span class="line">     <span class="type">String</span> <span class="variable">clear</span> <span class="operator">=</span> aesUtil.decryptToString(resource.get(<span class="string">&quot;associated_data&quot;</span>).getBytes(),</span><br><span class="line">             resource.get(<span class="string">&quot;nonce&quot;</span>).getBytes(),</span><br><span class="line">             resource.get(<span class="string">&quot;ciphertext&quot;</span>));</span><br><span class="line">     log.info(<span class="string">&quot;解密后的明文:&#123;&#125;&quot;</span>, clear);</span><br><span class="line">     <span class="keyword">return</span> clear;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20220730153004594.png" alt="image-20220730153004594"></p><h3 id="5-4、处理订单"><a href="#5-4、处理订单" class="headerlink" title="5.4、处理订单"></a>5.4、处理订单</h3><h4 id="5-4-1、处理订单业务"><a href="#5-4-1、处理订单业务" class="headerlink" title="5.4.1、处理订单业务"></a>5.4.1、处理订单业务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dealOrder</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">clear</span> <span class="operator">=</span> <span class="built_in">this</span>.decryption(data);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> JSONObject.parseObject(clear, Map.class);</span><br><span class="line">        <span class="comment">//更新订单状态</span></span><br><span class="line">        orderInfoService.updateState(map.get(<span class="string">&quot;out_trade_no&quot;</span>).toString(), OrderStatus.SUCCESS);</span><br><span class="line">        <span class="comment">//记录支付日志</span></span><br><span class="line">        paymentInfoService.savePaymentInfo(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-2、更新订单状态"><a href="#5-4-2、更新订单状态" class="headerlink" title="5.4.2、更新订单状态"></a>5.4.2、更新订单状态</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">updateState</span><span class="params">(String orderNo, OrderStatus success)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateState</span><span class="params">(String orderNo, OrderStatus success)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;OrderInfo&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//更新条件</span></span><br><span class="line">        wrapper.eq(<span class="string">&quot;order_no&quot;</span>, orderNo);</span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderInfo</span>();</span><br><span class="line">        orderInfo.setOrderStatus(success.getType());</span><br><span class="line">        baseMapper.update(orderInfo, wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-3、记录支付日志"><a href="#5-4-3、记录支付日志" class="headerlink" title="5.4.3、记录支付日志"></a>5.4.3、记录支付日志</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">savePaymentInfo</span><span class="params">(Map map)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">savePaymentInfo</span><span class="params">(Map map)</span> &#123;</span><br><span class="line">        <span class="type">PaymentInfo</span> <span class="variable">paymentInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaymentInfo</span>();</span><br><span class="line">        paymentInfo.setOrderNo(map.get(<span class="string">&quot;out_trade_no&quot;</span>).toString());</span><br><span class="line">        paymentInfo.setPaymentType(<span class="string">&quot;微信支付&quot;</span>);</span><br><span class="line">        paymentInfo.setTransactionId(map.get(<span class="string">&quot;transaction_id&quot;</span>).toString());</span><br><span class="line">        paymentInfo.setTradeType(map.get(<span class="string">&quot;trade_type&quot;</span>).toString());</span><br><span class="line">        paymentInfo.setTradeState(map.get(<span class="string">&quot;trade_state&quot;</span>).toString());</span><br><span class="line">        <span class="type">Map</span> <span class="variable">amount</span> <span class="operator">=</span> (Map) map.get(<span class="string">&quot;amount&quot;</span>);</span><br><span class="line">        paymentInfo.setPayerTotal(Integer.valueOf(amount.get(<span class="string">&quot;payer_total&quot;</span>).toString()));</span><br><span class="line">        paymentInfo.setContent(JSONObject.toJSONString(map));</span><br><span class="line">        baseMapper.insert(paymentInfo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-5、处理重复通知"><a href="#5-5、处理重复通知" class="headerlink" title="5.5、处理重复通知"></a>5.5、处理重复通知</h3><p>用户支付完成后，微信会把相关支付结果和用户信息发送给商户，商户需要接收处理该消息，并返回应答。对后台通知交互时，如果微信收到商户的应答不符合规范或超时，微信认为通知失败，微信会通过一定的策略定期重新发起通知，尽可能提高通知的成功率，但微信不保证通知最终能成功。（通知频率为15s/15s/30s/3m/10m/20m/30m/30m/30m/60m/3h/3h/3h/6h/6h - 总计 24h4m）</p><p><img src="https://images.hckun.cn/image-20220730155955165.png" alt="image-20220730155955165"></p><p>在处理订单任务之前，需对订单支付状态进行查询判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dealOrder</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">clear</span> <span class="operator">=</span> <span class="built_in">this</span>.decryption(data);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> JSONObject.parseObject(clear, Map.class);</span><br><span class="line">    <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> map.get(<span class="string">&quot;out_trade_no&quot;</span>).toString();</span><br><span class="line">    <span class="comment">//查询订单支付状态</span></span><br><span class="line">    <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> orderInfoService.getState(orderNo);</span><br><span class="line">    <span class="keyword">if</span> (orderInfo != <span class="literal">null</span> &amp;&amp; !orderInfo.getOrderStatus().equals(OrderStatus.NOTPAY.getType())) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//更新订单状态</span></span><br><span class="line">    orderInfoService.updateState(orderNo, OrderStatus.SUCCESS);</span><br><span class="line">    <span class="comment">//记录支付日志</span></span><br><span class="line">    paymentInfoService.savePaymentInfo(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OrderInfo <span class="title function_">getState</span><span class="params">(String orderNo)</span>;</span><br><span class="line"><span class="keyword">public</span> OrderInfo <span class="title function_">getState</span><span class="params">(String orderNo)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;OrderInfo&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;order_no&quot;</span>,orderNo);</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectOne(wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-6、数据锁"><a href="#5-6、数据锁" class="headerlink" title="5.6、数据锁"></a>5.6、数据锁</h3><p>在6.5我们已经实现了对重复请求处理进行判断,但在并发情况下仍会出现,所以我们需要加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">WxPayService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dealOrder</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">clear</span> <span class="operator">=</span> <span class="built_in">this</span>.decryption(data);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> JSONObject.parseObject(clear, Map.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> map.get(<span class="string">&quot;out_trade_no&quot;</span>).toString();</span><br><span class="line">        <span class="keyword">if</span> (lock.tryLock()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//查询订单支付状态</span></span><br><span class="line">                <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> orderInfoService.getState(orderNo);</span><br><span class="line">                <span class="keyword">if</span> (orderInfo != <span class="literal">null</span> &amp;&amp; !orderInfo.getOrderStatus().equals(OrderStatus.NOTPAY.getType())) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//更新订单状态</span></span><br><span class="line">                orderInfoService.updateState(orderNo, OrderStatus.SUCCESS);</span><br><span class="line">                <span class="comment">//记录支付日志</span></span><br><span class="line">                paymentInfoService.savePaymentInfo(map);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、商户定时查询本地订单"><a href="#6、商户定时查询本地订单" class="headerlink" title="6、商户定时查询本地订单"></a>6、商户定时查询本地订单</h2><p>支付成功后，商户查询本地数据库，订单是否支付成功，然后前端进行相应的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;查询订单状态&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/orderState/&#123;orderNo&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">orderState</span><span class="params">(<span class="meta">@PathVariable</span> String orderNo)</span> &#123;</span><br><span class="line">    <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> orderInfoService.getState(orderNo);</span><br><span class="line">    <span class="keyword">if</span> (orderInfo != <span class="literal">null</span> &amp;&amp; orderInfo.getOrderStatus().equals(OrderStatus.SUCCESS.getType()))&#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;支付成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error().data(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;支付中...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询订单状态</span></span><br><span class="line">    <span class="title function_">queryOrderStatus</span>(<span class="params"></span>) &#123;</span><br><span class="line">      orderInfoApi.<span class="title function_">queryOrderStatus</span>(<span class="variable language_">this</span>.<span class="property">orderNo</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查询订单状态：&#x27;</span> + response.<span class="property">code</span>)</span><br><span class="line">        <span class="comment">// 支付成功后的页面跳转</span></span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">code</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;清除定时器&#x27;</span>)</span><br><span class="line">          <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">          <span class="comment">// 三秒后跳转到支付成功页面</span></span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/success&#x27;</span> &#125;)</span><br><span class="line">          &#125;, <span class="number">3000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/image-20220730164557665.png" alt="image-20220730164557665"></p><h2 id="7、用户取消订单API接口"><a href="#7、用户取消订单API接口" class="headerlink" title="7、用户取消订单API接口"></a>7、用户取消订单API接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/cancleOder/&#123;orderNo&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancleOder</span><span class="params">(<span class="meta">@PathVariable</span> String orderNo)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wxPayService.cancleOder(orderNo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">cancleOder</span><span class="params">(String orderNo)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancleOder</span><span class="params">(String orderNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> String.format(wxPayConfig.getDomain().concat(WxApiType.CLOSE_ORDER_BY_NO.getType()), orderNo);</span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">&quot;mchid&quot;</span>, wxPayConfig.getMchId());</span><br><span class="line">        <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(JSONObject.toJSONString(params), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        httpPost.setEntity(entity);</span><br><span class="line">        httpPost.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="comment">//完成签名并执行请求</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> wxPayConfig.getHttpClient().execute(httpPost);</span><br><span class="line">        <span class="comment">//响应状态码</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">204</span> == statusCode) &#123;</span><br><span class="line">            <span class="comment">//取消成功,更新订单状态</span></span><br><span class="line">            orderInfoService.updateState(orderNo, OrderStatus.CANCEL);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="8、微信支付查单API"><a href="#8、微信支付查单API" class="headerlink" title="8、微信支付查单API"></a>8、微信支付查单API</h2><h3 id="8-1、集成Spring-Task"><a href="#8-1、集成Spring-Task" class="headerlink" title="8.1、集成Spring Task"></a>8.1、集成Spring Task</h3><ul><li><p>SpringBoot启动类增加@EnableScheduling</p></li><li><p>编写测试方法测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试</span></span><br><span class="line"><span class="comment">     * (cron=&quot;秒 分 时 日 月 周&quot;)</span></span><br><span class="line"><span class="comment">     * *：每隔一秒执行</span></span><br><span class="line"><span class="comment">     * 0/3：从第0秒开始，每隔3秒执行一次</span></span><br><span class="line"><span class="comment">     * 1-3: 从第1秒开始执行，到第3秒结束执行</span></span><br><span class="line"><span class="comment">     * 1,2,3：第1、2、3秒执行</span></span><br><span class="line"><span class="comment">     * ?：不指定，若指定日期，则不指定周，反之同理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron=&quot;0/3 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;定时任务执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-2、定时处理超时订单"><a href="#8-2、定时处理超时订单" class="headerlink" title="8.2、定时处理超时订单"></a>8.2、定时处理超时订单</h3><p>每隔30秒查询查过5分钟且未支付的订单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;OrderInfo&gt; <span class="title function_">getTimeOutOrder</span><span class="params">(<span class="type">int</span> min)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        instance.add(Calendar.MINUTE,-<span class="number">5</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        QueryWrapper&lt;OrderInfo&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.le(<span class="string">&quot;create_time&quot;</span>, format.format(instance.getTime()));</span><br><span class="line">        wrapper.eq(<span class="string">&quot;order_status&quot;</span>,OrderStatus.NOTPAY.getType());</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectList(wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="8-3、处理超时订单"><a href="#8-3、处理超时订单" class="headerlink" title="8.3、处理超时订单"></a>8.3、处理超时订单</h3><p>对于已支付的订单：进行修改订单状态、记录支付记录</p><p>对于未支付订单：进行取消支付操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled(cron = &quot;0/30 * * * * ?&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;定时任务执行&quot;</span>);</span><br><span class="line">        List&lt;OrderInfo&gt; orderList = orderInfoService.getTimeOutOrder(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (OrderInfo orderInfo : orderList) &#123;</span><br><span class="line">            <span class="comment">//查询订单状态</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> wxPayService.queryOrderState(orderInfo.getOrderNo());</span><br><span class="line">            Map&lt;String, Object&gt; jsonObject = JSONObject.parseObject(result, Map.class);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">tradeState</span> <span class="operator">=</span> jsonObject.get(<span class="string">&quot;trade_state_desc&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (OrderStatus.SUCCESS.getType().equals(tradeState.toString())) &#123;</span><br><span class="line">                <span class="comment">//修改订单状态</span></span><br><span class="line">                orderInfoService.updateState(orderInfo.getOrderNo(), OrderStatus.SUCCESS);</span><br><span class="line">                <span class="comment">//记录支付日志</span></span><br><span class="line">                paymentInfoService.savePaymentInfo(jsonObject);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tradeState.toString().contains(OrderStatus.NOTPAY.getType())) &#123;</span><br><span class="line">                <span class="comment">//未支付,取消支付,更新订单状态</span></span><br><span class="line">                wxPayService.cancleOder(orderInfo.getOrderNo());</span><br><span class="line">                orderInfoService.updateState(orderInfo.getOrderNo(), OrderStatus.CLOSED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、申请退款API"><a href="#9、申请退款API" class="headerlink" title="9、申请退款API"></a>9、申请退款API</h2><p><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_9.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_9.shtml</a></p><p><img src="https://images.hckun.cn/image-20220731101830006.png" alt="image-20220731101830006"></p><h3 id="9-1、创建退款单"><a href="#9-1、创建退款单" class="headerlink" title="9.1、创建退款单"></a>9.1、创建退款单</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">RefundInfo <span class="title function_">save</span><span class="params">(String orderNo, String reason)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RefundInfo <span class="title function_">save</span><span class="params">(String orderNo, String reason)</span> &#123;</span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> orderInfoService.getState(orderNo);</span><br><span class="line">        <span class="type">RefundInfo</span> <span class="variable">refundInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RefundInfo</span>();</span><br><span class="line">        refundInfo.setOrderNo(orderNo);</span><br><span class="line">        refundInfo.setReason(reason);</span><br><span class="line">        <span class="comment">//退款订单编号</span></span><br><span class="line">        refundInfo.setRefundNo(OrderNoUtils.getRefundNo());</span><br><span class="line">        <span class="comment">//原订单金额</span></span><br><span class="line">        refundInfo.setTotalFee(orderInfo.getTotalFee());</span><br><span class="line">        <span class="comment">//退款金额</span></span><br><span class="line">        refundInfo.setRefund(orderInfo.getTotalFee());</span><br><span class="line">        baseMapper.insert(refundInfo);</span><br><span class="line">        <span class="keyword">return</span> refundInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="9-2、更新退款单"><a href="#9-2、更新退款单" class="headerlink" title="9.2、更新退款单"></a>9.2、更新退款单</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">updateRefund</span><span class="params">(String result)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateRefund</span><span class="params">(String result)</span> &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> JSONObject.parseObject(result, Map.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">refundNo</span> <span class="operator">=</span>  map.get(<span class="string">&quot;out_refund_no&quot;</span>).toString();</span><br><span class="line">        QueryWrapper&lt;RefundInfo&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;refund_no&quot;</span>, refundNo);</span><br><span class="line">        <span class="type">RefundInfo</span> <span class="variable">refundInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RefundInfo</span>();</span><br><span class="line">        refundInfo.setContentReturn(result);</span><br><span class="line">        refundInfo.setRefundId(map.get(<span class="string">&quot;refund_id&quot;</span>).toString());</span><br><span class="line">        refundInfo.setRefundStatus(map.get(<span class="string">&quot;status&quot;</span>).toString());</span><br><span class="line">        baseMapper.update(refundInfo,wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="9-3、申请退款"><a href="#9-3、申请退款" class="headerlink" title="9.3、申请退款"></a>9.3、申请退款</h3><p>WxPayController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;申请退款&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/refunds/&#123;orderNo&#125;/&#123;reason&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">refunds</span><span class="params">(<span class="meta">@PathVariable</span> String orderNo,<span class="meta">@PathVariable</span> String reason)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           wxPayService.refunds(orderNo,reason);</span><br><span class="line">            <span class="keyword">return</span> R.ok();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>WxPayService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">refunds</span><span class="params">(String orderNo, String reason)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refunds</span><span class="params">(String orderNo, String reason)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//创建退款订单</span></span><br><span class="line">        <span class="type">RefundInfo</span> <span class="variable">refundInfo</span> <span class="operator">=</span> refundInfoService.save(orderNo, reason);</span><br><span class="line">        <span class="comment">//调用退款API</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> wxPayConfig.getDomain().concat(WxApiType.DOMESTIC_REFUNDS.getType());</span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line">        <span class="comment">// 请求body参数</span></span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">&quot;out_trade_no&quot;</span>, orderNo);</span><br><span class="line">        params.put(<span class="string">&quot;out_refund_no&quot;</span>, refundInfo.getRefundNo());</span><br><span class="line">        params.put(<span class="string">&quot;reason&quot;</span>, reason);</span><br><span class="line">        <span class="comment">//退款结果通知url</span></span><br><span class="line">        params.put(<span class="string">&quot;notify_url&quot;</span>, wxPayConfig.getNotifyDomain().concat(WxNotifyType.REFUND_NOTIFY.getType()));</span><br><span class="line">        Map&lt;String, Object&gt; amountMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//原订单金额</span></span><br><span class="line">        amountMap.put(<span class="string">&quot;total&quot;</span>, refundInfo.getTotalFee());</span><br><span class="line">        <span class="comment">//退款金额</span></span><br><span class="line">        amountMap.put(<span class="string">&quot;refund&quot;</span>, refundInfo.getRefund());</span><br><span class="line">        amountMap.put(<span class="string">&quot;currency&quot;</span>, <span class="string">&quot;CNY&quot;</span>);</span><br><span class="line">        params.put(<span class="string">&quot;amount&quot;</span>, amountMap);</span><br><span class="line">        <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(JSONObject.toJSONString(params), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        httpPost.setEntity(entity);</span><br><span class="line">        httpPost.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="comment">//完成签名并执行请求</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> wxPayConfig.getHttpClient().execute(httpPost);</span><br><span class="line">        <span class="comment">//响应状态码</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">        <span class="comment">//响应结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">200</span>==statusCode)&#123;</span><br><span class="line">            <span class="comment">//申请退款成功,返回信息</span></span><br><span class="line">            log.info(<span class="string">&quot;申请退款返回内容:&#123;&#125;&quot;</span>,result);</span><br><span class="line">            <span class="comment">//更新订单、退款记录</span></span><br><span class="line">            orderInfoService.updateState(orderNo,OrderStatus.REFUND_PROCESSING);</span><br><span class="line">            refundInfoService.updateRefund(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="9-4、退款结果通知"><a href="#9-4、退款结果通知" class="headerlink" title="9.4、退款结果通知"></a>9.4、退款结果通知</h3><p>处理微信申请退款回调通知</p><p>WxPayController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//申请退款回调通知</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/refunds/notify&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">refundsNotify</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">       Map&lt;String, String&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//获取响应数据</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> HttpUtils.readData(request);</span><br><span class="line">           Map&lt;String, Object&gt; map = JSONObject.parseObject(data, Map.class);</span><br><span class="line">           log.info(<span class="string">&quot;接收内容:&#123;&#125;&quot;</span>, map);</span><br><span class="line">           <span class="comment">//签名验证</span></span><br><span class="line">           <span class="type">WechatPay2ValidatorForRequest</span> <span class="variable">validator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WechatPay2ValidatorForRequest</span>(Verifier, map.get(<span class="string">&quot;id&quot;</span>).toString(), data);</span><br><span class="line">           <span class="keyword">if</span> (!validator.validate(request)) &#123;</span><br><span class="line">               log.info(<span class="string">&quot;签名验证失败&quot;</span>);</span><br><span class="line">               response.setStatus(<span class="number">500</span>);</span><br><span class="line">               result.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">               result.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;失败&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span> JSONObject.toJSONString(result);</span><br><span class="line">           &#125;</span><br><span class="line">           log.info(<span class="string">&quot;签名验证成功&quot;</span>);</span><br><span class="line">           <span class="comment">//处理退款订单</span></span><br><span class="line">           wxPayService.dealRefundOrder(data);</span><br><span class="line">           <span class="comment">//成功应答</span></span><br><span class="line">           response.setStatus(<span class="number">200</span>);</span><br><span class="line">           result.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;SUCCESS&quot;</span>);</span><br><span class="line">           result.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">           <span class="keyword">return</span> JSONObject.toJSONString(result);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           result.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">           result.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;失败&quot;</span>);</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> JSONObject.toJSONString(result);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>WxPayService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">dealRefundOrder</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dealRefundOrder</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//解密密文</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">clear</span> <span class="operator">=</span> <span class="built_in">this</span>.decryption(data);</span><br><span class="line">       <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> JSONObject.parseObject(clear, Map.class);</span><br><span class="line">       log.info(<span class="string">&quot;退款回调内容:&quot;</span>,clear);</span><br><span class="line">       <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> map.get(<span class="string">&quot;out_trade_no&quot;</span>).toString();</span><br><span class="line">       <span class="keyword">if</span> (lock.tryLock()) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//查询订单支付状态</span></span><br><span class="line">               <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> orderInfoService.getState(orderNo);</span><br><span class="line">               <span class="keyword">if</span> (orderInfo != <span class="literal">null</span> &amp;&amp; !orderInfo.getOrderStatus().equals(OrderStatus.REFUND_PROCESSING.getType())) &#123;</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//更新订单状态</span></span><br><span class="line">               orderInfoService.updateState(orderNo, OrderStatus.REFUND_SUCCESS);</span><br><span class="line">               <span class="comment">//更新退款单状态</span></span><br><span class="line">               refundInfoService.updateRefund(clear);</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               lock.unlock();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>RefundInfoService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateRefund</span><span class="params">(String result)</span> &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> JSONObject.parseObject(result, Map.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">refundNo</span> <span class="operator">=</span> map.get(<span class="string">&quot;out_refund_no&quot;</span>).toString();</span><br><span class="line">        QueryWrapper&lt;RefundInfo&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;refund_no&quot;</span>, refundNo);</span><br><span class="line">        <span class="type">RefundInfo</span> <span class="variable">refundInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RefundInfo</span>();</span><br><span class="line">        refundInfo.setRefundId(map.get(<span class="string">&quot;refund_id&quot;</span>).toString());</span><br><span class="line">        <span class="comment">//申请退款通知</span></span><br><span class="line">        <span class="keyword">if</span> (map.get(<span class="string">&quot;status&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            refundInfo.setRefundStatus(map.get(<span class="string">&quot;status&quot;</span>).toString());</span><br><span class="line">            refundInfo.setContentReturn(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//退款回调通知</span></span><br><span class="line">        <span class="keyword">if</span> (map.get(<span class="string">&quot;refund_status&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            refundInfo.setRefundStatus(map.get(<span class="string">&quot;refund_status&quot;</span>).toString());</span><br><span class="line">            refundInfo.setContentNotify(result);</span><br><span class="line">        &#125;</span><br><span class="line">        baseMapper.update(refundInfo, wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="10、查询退款API"><a href="#10、查询退款API" class="headerlink" title="10、查询退款API"></a>10、查询退款API</h2><h3 id="10-1、查询退款订单"><a href="#10-1、查询退款订单" class="headerlink" title="10.1、查询退款订单"></a>10.1、查询退款订单</h3><p>提交退款申请后，通过调用该接口查询退款状态。退款有一定延时，建议在提交退款申请后1分钟发起查询退款状态，一般来说零钱支付的退款5分钟内到账，银行卡支付的退款1-3个工作日到账。</p><p>WxPayController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;查询退款&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/queryRefunds/&#123;refundNo&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">refunds</span><span class="params">(<span class="meta">@PathVariable</span> String refundNo)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> wxPayService.queryRefunds(refundNo);</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;msg&quot;</span>, result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.error();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WxPayService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">queryRefunds</span><span class="params">(String refundNo)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">queryRefunds</span><span class="params">(String refundNo)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> String.format(wxPayConfig.getDomain().concat(WxApiType.DOMESTIC_REFUNDS_QUERY.getType()), refundNo);</span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">        httpGet.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="comment">//完成签名并执行请求</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> wxPayConfig.getHttpClient().execute(httpGet);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试结果:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;&#123;&quot;</span>amount<span class="string">&quot;:&#123;&quot;</span>currency<span class="string">&quot;:&quot;</span>CNY<span class="string">&quot;,&quot;</span>discount_refund<span class="string">&quot;:0,&quot;</span>from<span class="string">&quot;:[],&quot;</span>payer_refund<span class="string">&quot;:1,&quot;</span>payer_total<span class="string">&quot;:1,&quot;</span>refund<span class="string">&quot;:1,&quot;</span>settlement_refund<span class="string">&quot;:1,&quot;</span>settlement_total<span class="string">&quot;:1,&quot;</span>total<span class="string">&quot;:1&#125;,&quot;</span>channel<span class="string">&quot;:&quot;</span>ORIGINAL<span class="string">&quot;,&quot;</span>create_time<span class="string">&quot;:&quot;</span><span class="number">2022</span><span class="number">-07</span><span class="number">-31</span>T11<span class="punctuation">:</span><span class="number">18</span><span class="punctuation">:</span><span class="number">37</span>+<span class="number">08</span><span class="punctuation">:</span><span class="number">00</span><span class="string">&quot;,&quot;</span>funds_account<span class="string">&quot;:&quot;</span>AVAILABLE<span class="string">&quot;,&quot;</span>out_refund_no<span class="string">&quot;:&quot;</span>REFUND_20220731111750766<span class="string">&quot;,&quot;</span>out_trade_no<span class="string">&quot;:&quot;</span>ORDER_20220731111723768<span class="string">&quot;,&quot;</span>promotion_detail<span class="string">&quot;:[],&quot;</span>refund_id<span class="string">&quot;:&quot;</span><span class="number">50302202652022073123263356639</span><span class="string">&quot;,&quot;</span>status<span class="string">&quot;:&quot;</span>SUCCESS<span class="string">&quot;,&quot;</span>success_time<span class="string">&quot;:&quot;</span><span class="number">2022</span><span class="number">-07</span><span class="number">-31</span>T11<span class="punctuation">:</span><span class="number">18</span><span class="punctuation">:</span><span class="number">44</span>+<span class="number">08</span><span class="punctuation">:</span><span class="number">00</span><span class="string">&quot;,&quot;</span>transaction_id<span class="string">&quot;:&quot;</span><span class="number">4200001544202207317704787292</span><span class="string">&quot;,&quot;</span>user_received_account<span class="string">&quot;:&quot;</span>支付用户零钱<span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="10-2、超时未处理退款订单"><a href="#10-2、超时未处理退款订单" class="headerlink" title="10.2、超时未处理退款订单"></a>10.2、超时未处理退款订单</h3><p>使用定时任务对超时未处理的退款订单进行处理</p><p>创建定时任务处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从第0秒开始每隔30秒执行1次，查询创建超过5分钟，并且未成功的退款单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/30 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refundConfirm</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;refundConfirm 被执行......&quot;</span>);</span><br><span class="line">        <span class="comment">//找出申请退款超过5分钟并且未成功的退款单</span></span><br><span class="line">        List&lt;RefundInfo&gt; refundInfoList =</span><br><span class="line">                refundInfoService.getNoRefundOrderByDuration(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (RefundInfo refundInfo : refundInfoList) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">refundNo</span> <span class="operator">=</span> refundInfo.getRefundNo();</span><br><span class="line">            log.warn(<span class="string">&quot;超时未退款的退款单号 ===&gt; &#123;&#125;&quot;</span>, refundNo);</span><br><span class="line">            <span class="comment">//核实订单状态：调用微信支付查询退款接口</span></span><br><span class="line">            wxPayService.checkRefundStatus(refundNo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>超时退款单查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">List&lt;RefundInfo&gt; <span class="title function_">getNoRefundOrderByDuration</span><span class="params">(<span class="type">int</span> min)</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> List&lt;RefundInfo&gt; <span class="title function_">getNoRefundOrderByDuration</span><span class="params">(<span class="type">int</span> min)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        instance.add(Calendar.MINUTE,-<span class="number">5</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        QueryWrapper&lt;RefundInfo&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.le(<span class="string">&quot;create_time&quot;</span>, format.format(instance.getTime()));</span><br><span class="line">        wrapper.eq(<span class="string">&quot;refund_status&quot;</span>, <span class="string">&quot;PROCESSING&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectList(wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>wxPayService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">checkRefundStatus</span><span class="params">(String refundNo)</span><span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkRefundStatus</span><span class="params">(String refundNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//调用查询退款单接口</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> queryRefunds(refundNo);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> JSONObject.parseObject(result, Map.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> map.get(<span class="string">&quot;status&quot;</span>).toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> map.get(<span class="string">&quot;out_trade_no&quot;</span>).toString();</span><br><span class="line">        <span class="keyword">if</span> (OrderStatus.SUCCESS.getType().equals(status)) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;核实订单已退款成功 ===&gt; &#123;&#125;&quot;</span>, refundNo);</span><br><span class="line">            <span class="comment">//如果确认退款成功，则更新订单状态</span></span><br><span class="line">            orderInfoService.updateState(orderNo,</span><br><span class="line">                    OrderStatus.REFUND_SUCCESS);</span><br><span class="line">            <span class="comment">//更新退款单</span></span><br><span class="line">            refundInfoService.updateRefund(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;ABNORMAL&quot;</span>.equals(status)) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;核实订单退款异常 ===&gt; &#123;&#125;&quot;</span>, refundNo);</span><br><span class="line">            <span class="comment">//如果确认退款成功，则更新订单状态</span></span><br><span class="line">            orderInfoService.updateState(orderNo,</span><br><span class="line">                    OrderStatus.REFUND_ABNORMAL);</span><br><span class="line">            <span class="comment">//更新退款单</span></span><br><span class="line">            refundInfoService.updateRefund(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="11、账单"><a href="#11、账单" class="headerlink" title="11、账单"></a>11、账单</h2><h3 id="11-1、申请交易账单和资金账单"><a href="#11-1、申请交易账单和资金账单" class="headerlink" title="11.1、申请交易账单和资金账单"></a>11.1、申请交易账单和资金账单</h3><p><strong>交易账单</strong></p><p>微信支付按天提供交易账单文件，商户可以通过该接口获取账单文件的下载地址。文件内包含交易相关的金额、时间、营销等信息，供商户核对订单、退款、银行到账等情况。</p><blockquote><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>• 微信侧未成功下单的交易不会出现在对账单中。支付成功后撤销的交易会出现在对账单中，跟原支付单订单号一致；</p><p>• 对账单中涉及金额的字段单位为“元”；</p><p>• 对账单接口只能下载三个月以内的账单。</p></blockquote><p><strong>资金账单</strong></p><p>微信支付按天提供微信支付账户的资金流水账单文件，商户可以通过该接口获取账单文件的下载地址。文件内包含该账户资金操作相关的业务单号、收支金额、记账时间等信息，供商户进行核对。</p><blockquote><h4 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h4><p>• 资金账单中的数据反映的是商户微信支付账户资金变动情况；</p><p>• 对账单中涉及金额的字段单位为“元”。</p></blockquote><p>WxPayController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;获取账单url&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/querybill/&#123;billDate&#125;/&#123;type&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">queryTradeBill</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@PathVariable</span> String billDate,</span></span><br><span class="line"><span class="params">        <span class="meta">@PathVariable</span> String type)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    log.info(<span class="string">&quot;获取账单url&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">downloadUrl</span> <span class="operator">=</span> wxPayService.queryBill(billDate, type);</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;downloadUrl&quot;</span>, downloadUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WxPayService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">queryBill</span><span class="params">(String billDate, String type)</span><span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">queryBill</span><span class="params">(String billDate, String type)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;tradebill&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="comment">//交易账单</span></span><br><span class="line">            url = WxApiType.TRADE_BILLS.getType();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;fundflowbill&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="comment">//资金账单</span></span><br><span class="line">            url = WxApiType.FUND_FLOW_BILLS.getType();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不支持的账单类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        url = wxPayConfig.getDomain().concat(url).concat(<span class="string">&quot;?bill_date=&quot;</span>).concat(billDate);</span><br><span class="line">        <span class="comment">//创建远程Get 请求对象</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">        httpGet.addHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="comment">//使用wxPayClient发送请求得到响应</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> wxPayConfig.getHttpClient().execute(httpGet);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">bodyAsString</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">            <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">//获取账单下载地址</span></span><br><span class="line">                Map&lt;String, String&gt; resultMap = JSONObject.parseObject(bodyAsString,</span><br><span class="line">                        Map.class);</span><br><span class="line">                <span class="keyword">return</span> resultMap.get(<span class="string">&quot;download_url&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            response.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>成功获取到下载地址</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;downloadUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.mch.weixin.qq.com/v3/billdownload/file?token=YGnAEdXw0UN-ZokmoldJpshHJz7tDWBgGCtRTrDOIjYCzVCAVM-ScQxFi2Yr9kr6&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="11-2、下载账单"><a href="#11-2、下载账单" class="headerlink" title="11.2、下载账单"></a>11.2、下载账单</h3><p>下载账单API为通用接口，交易/资金账单都可以通过该接口获取到对应的账单。</p><blockquote><h4 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h4><p>• 账单文件的下载地址的有效时间为30s。</p><p>• 强烈建议商户将实际账单文件的哈希值和之前从接口获取到的哈希值进行比对，以确认数据的完整性。</p><p>• 该接口响应的信息请求头中不包含微信接口响应的签名值，因此需要跳过验签的流程。</p><p>•微信在次日9点启动生成前一天的对账单，建议商户10点后再获取。</p></blockquote><p>WxPayController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;下载账单&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/downloadbill/&#123;billDate&#125;/&#123;type&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">downloadBill</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@PathVariable</span> String billDate,</span></span><br><span class="line"><span class="params">        <span class="meta">@PathVariable</span> String type)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    log.info(<span class="string">&quot;下载账单&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> wxPayService.downloadBill(billDate, type);</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">&quot;result&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WxPayService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">downloadBill</span><span class="params">(String billDate, String type)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">downloadBill</span><span class="params">(String billDate, String type)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;下载账单接口调用 &#123;&#125;, &#123;&#125;&quot;</span>, billDate, type);</span><br><span class="line">        <span class="comment">//获取账单url地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">downloadUrl</span> <span class="operator">=</span> <span class="built_in">this</span>.queryBill(billDate, type);</span><br><span class="line">        <span class="comment">//创建远程Get 请求对象</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(downloadUrl);</span><br><span class="line">        httpGet.addHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="comment">//使用wxPayClient发送请求得到响应</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> WechatPayHttpClientBuilder.create()</span><br><span class="line">                .withMerchant(wxPayConfig.getMchId(), wxPayConfig.getMchSerialNo(), wxPayConfig.getPrivateKey(wxPayConfig.getPrivateKeyPath()))</span><br><span class="line">                .withValidator(response -&gt; <span class="literal">true</span>) <span class="comment">// <span class="doctag">NOTE:</span> 设置一个空的应答签名验证器，**不要**用在业务请求</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">bodyAsString</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">            <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> bodyAsString;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            response.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>更多使用API详见微信支付官方文档:<a href="https://pay.weixin.qq.com/wiki/doc/apiv3/wxpay/pages/index.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/wxpay/pages/index.shtml</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 支付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ授权登录</title>
      <link href="/post/ef1ae727.html"/>
      <url>/post/ef1ae727.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、QQ登录介绍"><a href="#1、QQ登录介绍" class="headerlink" title="1、QQ登录介绍"></a>1、QQ登录介绍</h2><p>QQ互联开放平台为第三方网站提供了丰富的API。第三方网站接入QQ互联开放平台后，即可通过调用平台提供的API实现用户使用QQ帐号登录网站功能，且可以获取到腾讯QQ用户的相关信息。<br>第三方网站也可以调用腾讯方提供的API实现网站的分享、评论、邀请等功能，即网站的社交化功能。且可以将相关信息同步到QQ空间、腾讯朋友、腾讯微博等平台，建立网站与腾讯各平台的互动关系，利用庞大的QQ用户群来实现网站的快速传播。<span id="more"></span><br>网站接入QQ互联开放平台后，您将获得：<br><strong>海量新用户</strong>：用户使用已有的QQ号码即可登录网站，QQ一键登录更可减少登录交互操作，大大降低网站注册门槛，给网站带来海量新用户。<br><strong>活跃的访问量</strong>：已登录用户可以将在网站上发布、分享的信息即时同步到QQ空间，使网站内容通过QQ好友关系链得到进一步的传播，从而提升网站的访问量。<br><strong>丰富的开放API</strong>：网站可以通过用户资料接口获取用户的空间昵称和头像，来丰富用户注册资料。此外，还可以通过说说，相册，日志等开放接口使用户直接在网站上访问或修改他们在QQ空间、腾讯朋友、腾讯微博上的数据，与腾讯各平台实现更进一步的互联互通。</p><h2 id="1-1、注册网站应用"><a href="#1-1、注册网站应用" class="headerlink" title="1.1、注册网站应用"></a>1.1、注册网站应用</h2><p><font color="red">注意:官网文档地址<a href="https://wiki.connect.qq.com/%E6%89%80%E6%9C%89%E5%86%85%E5%AE%B9%E5%9D%87%E5%8F%AF%E5%9C%A8%E6%96%87%E6%A1%A3%E4%B8%AD%E6%89%BE%E5%88%B0%E7%AD%94%E6%A1%88%E3%80%82">https://wiki.connect.qq.com/所有内容均可在文档中找到答案。</a></font></p><ul><li><p>登录qq开发者平台<a href="https://connect.qq.com/index.html">https://connect.qq.com/index.html</a></p><p><img src="https://images.hckun.cn/img/ROE3N0A%7DD8_G7A7MNE2Z6~4.png"></p></li><li><p>如果没有实名认证则需要提交信息进行实名认证,已认证则忽略</p><p><img src="https://images.hckun.cn/img/awertyuiol.png"></p></li><li><p>创建网站应用,填入相关的网站信息</p><p><img src="https://images.hckun.cn/img/784516546.png"></p><p><img src="https://images.hckun.cn/img/15487451254.png"></p></li><li><p>在网站的主页面添加qq登录图标,并把跳转地址链接到qq授权地址(<strong>否则审核不通过</strong>)</p><p>参考文档:<a href="https://wiki.connect.qq.com/%e6%94%be%e7%bd%aeqq%e7%99%bb%e5%bd%95%e6%8c%89%e9%92%ae_oauth2-0">https://wiki.connect.qq.com/%e6%94%be%e7%bd%aeqq%e7%99%bb%e5%bd%95%e6%8c%89%e9%92%ae_oauth2-0</a></p><p>代码示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;/login&quot;</span>&gt;&lt;img th:src=<span class="string">&quot;@&#123;/static/images/qqLogin.png&#125;&quot;</span>&gt;&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *跳转qq授权页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *参数说明:</span></span><br><span class="line"><span class="comment">    *response_type授权类型，此值固定为“code”</span></span><br><span class="line"><span class="comment">    *client_id      申请QQ登录成功后，分配给应用的appid</span></span><br><span class="line"><span class="comment">    *state          client端的状态值。用于第三方应用防止CSRF攻击，成功授权后回调时会原样带回。请务必严格按照流程检查用     *  户与state参数状态的绑定</span></span><br><span class="line"><span class="comment">    *redirect_uri  成功授权后的回调地址，必须是注册appid时填写的主域名下的地址，建议设置为网站首页或网站的用户中心。注意   需要将url进行URLEncode</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=*********&amp;state=&quot;</span>+ UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) +<span class="string">&quot;&amp;redirect_uri=http%3A%2F%2Fwww.hckun.cn%2FqqLogin&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>等待审核成功</p><p><img src="http://images.hckun.cn/img/852653265.png"></p></li></ul><h2 id="2、接入QQ登录"><a href="#2、接入QQ登录" class="headerlink" title="2、接入QQ登录"></a>2、接入QQ登录</h2><p>​    <strong>在完成以上内容之后，下面就可以正式的接入QQ登录</strong></p><h3 id="2-1、环境搭建"><a href="#2-1、环境搭建" class="headerlink" title="2.1、环境搭建"></a>2.1、环境搭建</h3><ul><li><p>使用idea快速的搭建一个springbot项目，并导入相关的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">&lt;!--qqsdk--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.gplatform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Sdk4J<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--http--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpcore<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpasyncclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpmime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--fastjson--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--thymeleaf--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>首页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只是简单的放置了一个qq登录图标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/login&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/images/qqLogin.png&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转首页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toIndex</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *跳转qq授权页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *参数说明:</span></span><br><span class="line"><span class="comment">         *response_type 授权类型，此值固定为“code”</span></span><br><span class="line"><span class="comment">         *client_id      申请QQ登录成功后，分配给应用的appid</span></span><br><span class="line"><span class="comment">         *state          client端的状态值。用于第三方应用防止CSRF攻击，成功授权后回调时会原样带回。请务必严格按照流程                           检查用户与state参数状态的绑定</span></span><br><span class="line"><span class="comment">         *redirect_uri  成功授权后的回调地址，必须是注册appid时填写的主域名下的地址，建议设置为网站首页或网站的用户中心。注意需要将url进行URLEncode</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:https://graph.qq.com/oauth2.0/authorize?response_type=code&amp;client_id=101951053&amp;state=&quot;</span>+ UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) +<span class="string">&quot;&amp;redirect_uri=http%3A%2F%2Fwww.hckun.cn%2FqqLogin&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>HTTP请求工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PoolingHttpClientConnectionManager connMgr;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RequestConfig requestConfig;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_TIMEOUT</span> <span class="operator">=</span> <span class="number">7000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(HttpUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 设置连接池</span></span><br><span class="line">        connMgr = <span class="keyword">new</span> <span class="title class_">PoolingHttpClientConnectionManager</span>();</span><br><span class="line">        <span class="comment">// 设置连接池大小</span></span><br><span class="line">        connMgr.setMaxTotal(<span class="number">100</span>);</span><br><span class="line">        connMgr.setDefaultMaxPerRoute(connMgr.getMaxTotal());</span><br><span class="line">        <span class="comment">// Validate connections after 1 sec of inactivity</span></span><br><span class="line">        connMgr.setValidateAfterInactivity(<span class="number">1000</span>);</span><br><span class="line">        RequestConfig.<span class="type">Builder</span> <span class="variable">configBuilder</span> <span class="operator">=</span> RequestConfig.custom();</span><br><span class="line">        <span class="comment">// 设置连接超时</span></span><br><span class="line">        configBuilder.setConnectTimeout(MAX_TIMEOUT);</span><br><span class="line">        <span class="comment">// 设置读取超时</span></span><br><span class="line">        configBuilder.setSocketTimeout(MAX_TIMEOUT);</span><br><span class="line">        <span class="comment">// 设置从连接池获取连接实例的超时</span></span><br><span class="line">        configBuilder.setConnectionRequestTimeout(MAX_TIMEOUT);</span><br><span class="line"></span><br><span class="line">        requestConfig = configBuilder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送 GET 请求（HTTP），不带输入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doGet</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> doGet(url, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送 GET 请求（HTTP），K-V形式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doGet</span><span class="params">(String url, Map&lt;String, Object&gt; params)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">apiUrl</span> <span class="operator">=</span> url;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">param</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String key : params.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">                param.append(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                param.append(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">            param.append(key).append(<span class="string">&quot;=&quot;</span>).append(params.get(key));</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        apiUrl += param;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">HttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (apiUrl.startsWith(<span class="string">&quot;https&quot;</span>)) &#123;</span><br><span class="line">            httpClient = HttpClients.custom().setSSLSocketFactory(createSSLConnSocketFactory())</span><br><span class="line">                    .setConnectionManager(connMgr).setDefaultRequestConfig(requestConfig).build();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            httpClient = HttpClients.createDefault();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(apiUrl);</span><br><span class="line">            <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line">            <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">            <span class="keyword">if</span> (entity != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">instream</span> <span class="operator">=</span> entity.getContent();</span><br><span class="line">                result = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(instream)).lines().collect(Collectors.joining(System.lineSeparator()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送 POST 请求（HTTP），不带输入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> apiUrl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doPost</span><span class="params">(String apiUrl)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> doPost(apiUrl, <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送 POST 请求，K-V形式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> apiUrl API接口URL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params 参数map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doPost</span><span class="params">(String apiUrl, Map&lt;String, Object&gt; params)</span> &#123;</span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (apiUrl.startsWith(<span class="string">&quot;https&quot;</span>)) &#123;</span><br><span class="line">            httpClient = HttpClients.custom().setSSLSocketFactory(createSSLConnSocketFactory())</span><br><span class="line">                    .setConnectionManager(connMgr).setDefaultRequestConfig(requestConfig).build();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            httpClient = HttpClients.createDefault();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">httpStr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(apiUrl);</span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            httpPost.setConfig(requestConfig);</span><br><span class="line">            List&lt;NameValuePair&gt; pairList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(params.size());</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : params.entrySet()) &#123;</span><br><span class="line">                <span class="type">NameValuePair</span> <span class="variable">pair</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicNameValuePair</span>(entry.getKey(), entry.getValue().toString());</span><br><span class="line">                pairList.add(pair);</span><br><span class="line">            &#125;</span><br><span class="line">            httpPost.setEntity(<span class="keyword">new</span> <span class="title class_">UrlEncodedFormEntity</span>(pairList, Charset.forName(<span class="string">&quot;UTF-8&quot;</span>)));</span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line">            <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">            httpStr = EntityUtils.toString(entity, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    EntityUtils.consume(response.getEntity());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    logger.error(e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> httpStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送 POST 请求，JSON形式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> apiUrl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> json   json对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doPost</span><span class="params">(String apiUrl, Object json)</span> &#123;</span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (apiUrl.startsWith(<span class="string">&quot;https&quot;</span>)) &#123;</span><br><span class="line">            httpClient = HttpClients.custom().setSSLSocketFactory(createSSLConnSocketFactory())</span><br><span class="line">                    .setConnectionManager(connMgr).setDefaultRequestConfig(requestConfig).build();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            httpClient = HttpClients.createDefault();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">httpStr</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(apiUrl);</span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            httpPost.setConfig(requestConfig);</span><br><span class="line">            <span class="type">StringEntity</span> <span class="variable">stringEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(json.toString(), <span class="string">&quot;UTF-8&quot;</span>);<span class="comment">// 解决中文乱码问题</span></span><br><span class="line">            stringEntity.setContentEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            stringEntity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            httpPost.setEntity(stringEntity);</span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line">            <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">            httpStr = EntityUtils.toString(entity, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    EntityUtils.consume(response.getEntity());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    logger.error(e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> httpStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建SSL安全连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SSLConnectionSocketFactory <span class="title function_">createSSLConnSocketFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SSLConnectionSocketFactory</span> <span class="variable">sslsf</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SSLContext</span> <span class="variable">sslContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SSLContextBuilder</span>().loadTrustMaterial(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">TrustStrategy</span>() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).build();</span><br><span class="line">            sslsf = <span class="keyword">new</span> <span class="title class_">SSLConnectionSocketFactory</span>(sslContext, <span class="keyword">new</span> <span class="title class_">HostnameVerifier</span>() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verify</span><span class="params">(String arg0, SSLSession arg1)</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (GeneralSecurityException e) &#123;</span><br><span class="line">            logger.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sslsf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*gitHub开始*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送get请求，利用java代码发送请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">doGetHub</span><span class="params">(String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpclient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">        <span class="comment">// 发送了一个http请求</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpclient.execute(httpGet);</span><br><span class="line">        <span class="comment">// 如果响应200成功,解析响应结果</span></span><br><span class="line">        <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取响应的内容</span></span><br><span class="line">            <span class="type">HttpEntity</span> <span class="variable">responseEntity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> EntityUtils.toString(responseEntity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将字符串转换成map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> responseEntity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">getMap</span><span class="params">(String responseEntity)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 以&amp;来解析字符串</span></span><br><span class="line">        String[] result = responseEntity.split(<span class="string">&quot;\\&amp;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String str : result) &#123;</span><br><span class="line">            <span class="comment">// 以=来解析字符串</span></span><br><span class="line">            String[] split = str.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">            <span class="comment">// 将字符串存入map中</span></span><br><span class="line">            <span class="keyword">if</span> (split.length == <span class="number">1</span>) &#123;</span><br><span class="line">                map.put(split[<span class="number">0</span>], <span class="literal">null</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过json获得map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> responseEntity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">getMapByJson</span><span class="params">(String responseEntity)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 阿里巴巴fastjson  将json转换成map</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONObject.parseObject(responseEntity);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : jsonObject.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="comment">// 将obj转换成string</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> String.valueOf(entry.getValue());</span><br><span class="line">            map.put(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>点击登录图标跳转到授权页面</p><p><img src="http://images.hckun.cn/img/6545152656.png"></p></li></ul><p>​    </p><h3 id="2-2、通过Authorization-Code获取Access-Token"><a href="#2-2、通过Authorization-Code获取Access-Token" class="headerlink" title="2.2、通过Authorization Code获取Access Token"></a>2.2、通过Authorization Code获取Access Token</h3><p>​    在用户授权完成之后会回调我们申请时填写的<strong>网站回调域</strong>中的地址，进入该回调方法，并返回code和state</p><p>​    例如：<a href="http://www.hckun.cn/qqLogin?code=A373E96D30BF02A9EA546270D9A5BE86&amp;state=3b509b07f2b3477ca4828c4a8ff09112">http://www.hckun.cn/qqLogin?code=A373E96D30BF02A9EA546270D9A5BE86&amp;state=3b509b07f2b3477ca4828c4a8ff09112</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *qq授权成功回调页面</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/qqLogin&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">qqLogin</span><span class="params">(String code,  Model model)</span>&#123;</span><br><span class="line">     <span class="comment">//封装请求获取Access Token的请求参数,请求地址:https://graph.qq.com/oauth2.0/token</span></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * grant_type 授权类型，在本步骤中，此值为“authorization_code”</span></span><br><span class="line"><span class="comment">      * client_id  申请QQ登录成功后，分配给网站的appid</span></span><br><span class="line"><span class="comment">      * client_secret 申请QQ登录成功后，分配给网站的appkey</span></span><br><span class="line"><span class="comment">      * code 上一步返回的authorization code 如果用户成功登录并授权，则会跳转到指定的回调地址，并在URL中带上Authorization Code</span></span><br><span class="line"><span class="comment">      * redirect_uri 与上面一步中传入的redirect_uri保持一致</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">     map.put(<span class="string">&quot;grant_type&quot;</span>,<span class="string">&quot;authorization_code&quot;</span>);</span><br><span class="line">     map.put(<span class="string">&quot;client_id&quot;</span>,<span class="string">&quot;*******10**53&quot;</span>);</span><br><span class="line">     map.put(<span class="string">&quot;client_secret&quot;</span>,<span class="string">&quot;****************22549d8fd&quot;</span>);</span><br><span class="line">     map.put(<span class="string">&quot;code&quot;</span>,code);</span><br><span class="line">     map.put(<span class="string">&quot;redirect_uri&quot;</span>,<span class="string">&quot;http%3A%2F%2Fwww.hckun.cn%2FqqLogin&quot;</span>);</span><br><span class="line">     <span class="comment">//发送请求 通过授权返回的Authorization Code获取Access Token</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> HttpUtil.doGet(<span class="string">&quot;https://graph.qq.com/oauth2.0/token&quot;</span>, map);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>请求成功返回示例:access_token=*<em><strong><strong><strong><strong>12A843D</strong></strong></strong></strong></em>**7EA77E7&amp;expires_in=7776000&amp;refresh_token=</p><p>32C<em>32AE</em>*****************。对返回的数据进行分隔存入map集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,String&gt; res = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       String[] split = result.split(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">           String[] strings = s.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">          res.put(strings[<span class="number">0</span>],strings[<span class="number">1</span>]);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、获取用户OpenID-OAuth2-0"><a href="#2-3、获取用户OpenID-OAuth2-0" class="headerlink" title="2.3、获取用户OpenID_OAuth2.0"></a>2.3、获取用户OpenID_OAuth2.0</h3><p>​    通过3.2获取的access_token来换取用户的openid</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//通过获取的Access Token换取用户的OpenId 请求地址:https://graph.qq.com/oauth2.0/me</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数:access_token在3.2中获取到的access token</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">oppenIdString</span> <span class="operator">=</span> HttpUtil.doGet(<span class="string">&quot;https://graph.qq.com/oauth2.0/me?access_token=&quot;</span> + res.get(<span class="string">&quot;access_token&quot;</span>));</span><br></pre></td></tr></table></figure><p>返回示例:callback( {“client_id”:”<strong><strong><strong>053”,”openid”:”523</strong></strong></strong>55CB******2C”} );</p><p>截取出我们想要的openid的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//截取出openid</span></span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONObject.parseObject(oppenIdString.substring(oppenIdString.indexOf(<span class="string">&quot;(&quot;</span>)+<span class="number">1</span>,oppenIdString.lastIndexOf(<span class="string">&quot;)&quot;</span>)));</span><br><span class="line"><span class="type">String</span> <span class="variable">openid</span> <span class="operator">=</span> (String) jsonObject.get(<span class="string">&quot;openid&quot;</span>);</span><br></pre></td></tr></table></figure><p><font color="red">OpenID是此网站上或应用中唯一对应用户身份的标识，网站或应用可将此ID进行存储，便于用户下次登录时辨识其身份，或将其与用户在网站上或应用中的原有账号进行绑定</font></p><h3 id="2-4、OpenAPI调用获取用户信息"><a href="#2-4、OpenAPI调用获取用户信息" class="headerlink" title="2.4、OpenAPI调用获取用户信息"></a>2.4、OpenAPI调用获取用户信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用openid获取用户信息 请求地址:https://graph.qq.com/user/get_user_info</span></span><br><span class="line"><span class="comment">//封装请求参数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * access_token 之前获取的access_token</span></span><br><span class="line"><span class="comment"> * oauth_consumer_key 申请QQ登录成功后，分配给应用的appid</span></span><br><span class="line"><span class="comment"> * openid 用户的ID，与QQ号码一一对应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Map&lt;String,Object&gt; userMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">userMap.put(<span class="string">&quot;access_token&quot;</span>,res.get(<span class="string">&quot;access_token&quot;</span>));</span><br><span class="line">userMap.put(<span class="string">&quot;openid&quot;</span>,openid);</span><br><span class="line">userMap.put(<span class="string">&quot;oauth_consumer_key&quot;</span>,<span class="string">&quot;101951053&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">userInfo</span> <span class="operator">=</span> HttpUtil.doGet(<span class="string">&quot;https://graph.qq.com/user/get_user_info&quot;</span>, userMap);</span><br></pre></td></tr></table></figure><p>返回示例:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--参数列表<span class="punctuation">:</span>--&gt;</span><br><span class="line">&lt;!--private String ret; <span class="comment">//返回码--&gt;</span></span><br><span class="line">&lt;!--private String msg; <span class="comment">//如果ret&lt;0，会有相应的错误信息提示，返回数据全部用UTF-8编码。--&gt;</span></span><br><span class="line">&lt;!--private String nickname; <span class="comment">//用户在QQ空间的昵称。--&gt;</span></span><br><span class="line">&lt;!--private String figureurl; <span class="comment">//大小为30×30像素的QQ空间头像URL。--&gt;</span></span><br><span class="line">&lt;!--private String figureurl_1; <span class="comment">//大小为50×50像素的QQ空间头像URL。--&gt;</span></span><br><span class="line">&lt;!--private String figureurl_2; <span class="comment">//大小为100×100像素的QQ空间头像URL。--&gt;</span></span><br><span class="line">&lt;!--private String figureurl_qq_1; <span class="comment">//大小为40×40像素的QQ头像URL。--&gt;</span></span><br><span class="line">&lt;!--private String figureurl_qq_2; <span class="comment">//大小为100×100像素的QQ头像URL。需要注意，不是所有的用户都拥有QQ的100x100的头像，但40x40像素则是一定会有。--&gt;</span></span><br><span class="line">&lt;!--private String gender; <span class="comment">//性别。 如果获取不到则默认返回&quot;男&quot;--&gt;</span></span><br><span class="line">&lt;!--private Integer gendertype; <span class="comment">// 性别 数字--&gt;</span></span><br><span class="line">&lt;!--private String is_yellow_vip; <span class="comment">//标识用户是否为黄钻用户（0：不是；1：是）。--&gt;</span></span><br><span class="line">&lt;!--private String vip; <span class="comment">//标识用户是否为黄钻用户（0：不是；1：是）--&gt;</span></span><br><span class="line">&lt;!--private String yellow_vip_level; <span class="comment">//黄钻等级--&gt;</span></span><br><span class="line">&lt;!--private String level; <span class="comment">//黄钻等级--&gt;</span></span><br><span class="line">&lt;!--private String is_yellow_year_vip; <span class="comment">//标识是否为年费黄钻用户（0：不是； 1：是）--&gt;</span></span><br><span class="line">&lt;!--private String province; <span class="comment">// 省--&gt;</span></span><br><span class="line">&lt;!--private String city; <span class="comment">// 市--&gt;</span></span><br><span class="line">JSON示例<span class="punctuation">:</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;ret&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span><span class="string">&quot;Peter&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;figureurl&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://qzapp.qlogo.cn/qzapp/111111/942FEA70050EEAFBD4DCE2C1FC775E56/30&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;figureurl_1&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://qzapp.qlogo.cn/qzapp/111111/942FEA70050EEAFBD4DCE2C1FC775E56/50&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;figureurl_2&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://qzapp.qlogo.cn/qzapp/111111/942FEA70050EEAFBD4DCE2C1FC775E56/100&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;figureurl_qq_1&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://q.qlogo.cn/qqapp/100312990/DE1931D5330620DBD07FB4A5422917B6/40&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;figureurl_qq_2&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://q.qlogo.cn/qqapp/100312990/DE1931D5330620DBD07FB4A5422917B6/100&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="string">&quot;男&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;is_yellow_vip&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;vip&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;yellow_vip_level&quot;</span><span class="punctuation">:</span><span class="string">&quot;7&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;level&quot;</span><span class="punctuation">:</span><span class="string">&quot;7&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;is_yellow_year_vip&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>跳转到获取信息页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JSONObject</span> <span class="variable">user</span> <span class="operator">=</span> JSONObject.parseObject(userInfo);</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   model.addAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="2-5、展示获取到的用户信息"><a href="#2-5、展示获取到的用户信息" class="headerlink" title="2.5、展示获取到的用户信息"></a>2.5、展示获取到的用户信息</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>获取用户信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;用户名称 :&#x27; + $&#123;user.nickname&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    用户头像:</span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">&quot;$&#123;user.figureurl_qq_1&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">&quot;$&#123;user.figureurl_qq_1&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">&quot;$&#123;user.figureurl_qq_2&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    性别:</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.vip&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.yellow_vip_level&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.is_yellow_year_vip&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.province&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.city&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/img/896532365986532.png"></p><blockquote><center>对接QQ登录完结</center></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API对接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus</title>
      <link href="/post/1276cc28.html"/>
      <url>/post/1276cc28.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h2><h3 id="1-1、什么是Mybatis-Plus"><a href="#1-1、什么是Mybatis-Plus" class="headerlink" title="1.1、什么是Mybatis-Plus"></a>1.1、什么是Mybatis-Plus</h3><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus (opens new window)</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis (opens new window)</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p>API文档地址：<a href="https://mp.baomidou.com/guide/">https://mp.baomidou.com/guide/</a></p><p><img src="https://images.hckun.cn/img/58763554.png"></p><h3 id="1-2、特性"><a href="#1-2、特性" class="headerlink" title="1.2、特性"></a>1.2、特性</h3><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li><li><strong>支持数据库：</strong>任何能使用 <code>mybatis</code> 进行 crud, 并且支持标准 sql 的数据库</li></ul><h3 id="1-3、框架结构"><a href="#1-3、框架结构" class="headerlink" title="1.3、框架结构"></a>1.3、框架结构</h3><p><img src="https://images.hckun.cn/img/7863568.png"></p><h2 id="2、快速开始"><a href="#2、快速开始" class="headerlink" title="2、快速开始"></a>2、快速开始</h2><ul><li><p><strong>创建数据库表user并导入数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">age <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">bitrh datetime(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;生日&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, birth) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;2000-05-05&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;1999-10-01&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;20001-02-20&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;1998-07-15&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;2002-06-05&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用idea快速创建SpringBoot项目,并引入相关依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--mybatisplus--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>application.properties</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#连接数据库</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/demo?useSSL=false&amp;serverTimezone=GMT%2B8&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment">#标准日志输出</span></span><br><span class="line"><span class="attr">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></li><li><p><strong>实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>dao</strong></p><p>Mybatis-Plus在dao层去继承BaseMapper,所有的CRUD操作都已经帮我们生成成功,不用像以前那样我们自己去接口,写完接口再去写mapper文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>主启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MybatisPlusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MybatisPlusApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//查询全部</span></span><br><span class="line">        List&lt;User&gt; users = userDao.selectList(<span class="literal">null</span>);</span><br><span class="line">        users.stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getOne</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//查询一个</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="comment">//user.setId(6);</span></span><br><span class="line">        user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        user.setBirth(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> userDao.insert(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;添加成功&quot;</span> + insert);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="comment">//直接修改,如果只修改部分字段,那么其他的字段会按照实体类的默认值进行修改</span></span><br><span class="line">        user.setId(<span class="number">8</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;李华&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userDao.updateById(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//所以我们先进行查询,查询完之后在进行修改,这样就可以避免上述问题</span></span><br><span class="line">      <span class="comment">/*  User user1 = userDao.selectById(6);</span></span><br><span class="line"><span class="comment">        user1.setName(&quot;小明&quot;);</span></span><br><span class="line"><span class="comment">        user1.setAge(15);</span></span><br><span class="line"><span class="comment">        user1.setBirth(new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(&quot;2000-05-05&quot;));</span></span><br><span class="line"><span class="comment">        int i = userDao.updateById(user1);*/</span></span><br><span class="line">        System.out.println(<span class="string">&quot;修改成功:&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteOne</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//删除单个</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userDao.deleteById(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除成功:&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//批量删除</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userDao.deleteBatchIds(Arrays.asList(<span class="number">6</span>, <span class="number">7</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;批量删除成功:&quot;</span> + i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3、核心功能"><a href="#3、核心功能" class="headerlink" title="3、核心功能"></a>3、核心功能</h2><h3 id="3-1、主键生成策略"><a href="#3-1、主键生成策略" class="headerlink" title="3.1、主键生成策略"></a>3.1、主键生成策略</h3><p>  Mybatis-plus支持的常用主键生成策略有</p><ol><li>AUTO(0), // 数据库id自增</li><li>NONE(1), // 未设置主键</li><li>INPUT(2), // 手动输入</li><li>ID_WORKER(3), // 默认的全局唯一id</li><li>UUID(4), // 全局唯一id uuid</li><li>UUID(4), // 全局唯一id uuid</li></ol><p>  我们以主键自增策略为例进行演示</p><ul><li><p><strong>首先设置数据库id为自增</strong></p></li><li><p><strong>在实体类User中，给主键增加@Table@TableId(type = IdType.AUTO)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> id;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">//添加</span></span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">      <span class="comment">//user.setId(6);</span></span><br><span class="line">      user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">      user.setAge(<span class="number">20</span>);</span><br><span class="line">      user.setBirth(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">      <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> userDao.insert(user);</span><br><span class="line">      System.out.println(<span class="string">&quot;添加成功&quot;</span> + insert);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们在添加数据的时候,不用设置主键id,会在我们添加数据的时候自动主键自增。</p></li></ul><h3 id="3-2、自动填充"><a href="#3-2、自动填充" class="headerlink" title="3.2、自动填充"></a>3.2、自动填充</h3><p>我们通常一张数据库表，都会存在创建时间和修改时间的字段，之前的做法我们通常是通过程序参数参数或者数据库进行配置，使用了Mybatis-Plus之后我们只需进行简单的配置，即可在执行添加、修改操作时自动的为我们填充这两个字段的数据。</p><ul><li><p><strong>数据库添加创建时间（create_date）和修改时间(update_date)字段,数据类型为datetime</strong></p></li><li><p><strong>实体类增加字段信息并添加相应注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建时间</span></span><br><span class="line">  <span class="comment">//标记为创建填充字段</span></span><br><span class="line">  <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">  <span class="keyword">private</span> Date createDate;</span><br><span class="line">  <span class="comment">//修改时间</span></span><br><span class="line">  <span class="comment">//标记为更新填充字段</span></span><br><span class="line">  <span class="meta">@TableField(fill=FieldFill.INSERT_UPDATE)</span></span><br><span class="line">  <span class="keyword">private</span> Date updateDate;</span><br></pre></td></tr></table></figure></li><li><p><strong>编写处理器来处理这些注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="comment">//插入时执行</span></span><br><span class="line">        log.info(<span class="string">&quot;执行了插入操作&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createDate&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateDate&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="comment">//更新时执行</span></span><br><span class="line">        log.info(<span class="string">&quot;执行了更新操作&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateDate&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试插入、修改观察创建时间和更新时间</strong></p></li></ul><h3 id="3-3、乐观锁"><a href="#3-3、乐观锁" class="headerlink" title="3.3、乐观锁"></a>3.3、乐观锁</h3><p>乐观锁(OptimisticLockerInnerInterceptor),乐观锁所要做的就是<strong>当要更新一条记录的时候，希望这条记录没有被别人更新</strong></p><p>乐观锁实现方式:</p><ol><li>取出记录时，获取当前version</li><li>更新时，带上这个version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果version不对，就更新失败</li></ol><p><strong>实例</strong></p><ul><li><p><strong>数据库添加version字段,默认值为0</strong></p></li><li><p><strong>实体类增加version字段</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//乐观锁字段</span></span><br><span class="line">  <span class="meta">@Version</span></span><br><span class="line">  <span class="keyword">private</span>  Integer version;</span><br></pre></td></tr></table></figure></li><li><p><strong>注册乐观锁插件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="comment">//注册乐观锁插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OptimisticLockerInterceptor <span class="title function_">optimisticLockerInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OptimisticLockerInterceptor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试乐观锁</strong></p><ol><li><p>成功案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">version</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//查询用户信息</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectById(<span class="number">9</span>);</span><br><span class="line">       <span class="comment">//修改用户信息</span></span><br><span class="line">       user.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">       user.setAge(<span class="number">20</span>);</span><br><span class="line">       <span class="comment">//执行更新操作</span></span><br><span class="line">       userDao.updateById(user);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/img/5428765368.png"></p><p>查询是会将version信息查询出来,更新时会将查询的version作为判断条件,不符合更新失败。如果符合则会更新成功，并将version的值加1</p></li><li><p>模拟多线程失败案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">threadVersion</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//线程1去进行修改用户</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> userDao.selectById(<span class="number">9</span>);</span><br><span class="line">       user1.setName(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">       <span class="comment">//模拟另外一个线程抢先完成更新操作</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> userDao.selectById(<span class="number">10</span>);</span><br><span class="line">       user2.setName(<span class="string">&quot;jerry&quot;</span>);</span><br><span class="line">       userDao.updateById(user2);</span><br><span class="line">     </span><br><span class="line">       <span class="comment">//线程1提交更新操作</span></span><br><span class="line">       userDao.updateById(user1);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>由于线程2抢先于线程1更新成功,将version的值进行了修改,而此时线程1拿到的version值是修改之前的,故线程1再去更新的时候version不配,更新失败。</p></li></ol></li></ul><h3 id="3-4、查询操作"><a href="#3-4、查询操作" class="headerlink" title="3.4、查询操作"></a>3.4、查询操作</h3><ul><li><p><strong>单个查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">findById</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//根据id查询</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectById(<span class="number">8</span>);</span><br><span class="line">       System.out.println(user);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>批量查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">batchFind</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//批量查询</span></span><br><span class="line">        List&lt;User&gt; users = userDao.selectBatchIds(Arrays.asList(<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>));</span><br><span class="line">        users.stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>根据指定字段查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">mapFind</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//使用map按指定条件查询</span></span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>, <span class="number">28</span>);</span><br><span class="line">        List&lt;User&gt; users = userDao.selectByMap(map);</span><br><span class="line">        users.stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-5、分页查询"><a href="#3-5、分页查询" class="headerlink" title="3.5、分页查询"></a>3.5、分页查询</h3><p>使用Mybatis-plus的内置分页插件</p><ul><li><p><strong>注册分页插件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页插件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">PaginationInterceptor</span> <span class="variable">paginationInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>();</span><br><span class="line">        <span class="comment">// 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span></span><br><span class="line">        <span class="comment">// paginationInterceptor.setOverflow(false);</span></span><br><span class="line">        <span class="comment">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span></span><br><span class="line">        <span class="comment">// paginationInterceptor.setLimit(500);</span></span><br><span class="line">        <span class="comment">// 开启 count 的 join 优化,只针对部分 left join</span></span><br><span class="line">        <span class="comment">//paginationInterceptor.setCountSqlParser(new JsqlParserCountOptimize(true));</span></span><br><span class="line">        <span class="keyword">return</span> paginationInterceptor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>分页查询数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">pagefind</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//分页查询</span></span><br><span class="line">       <span class="comment">//参数一:当前页 参数二:页面大小</span></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">         Page&lt;User&gt; userPage = userDao.selectPage(page, <span class="literal">null</span>);</span><br><span class="line">        List&lt;User&gt; users = userPage.getRecords();</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-6、删除操作"><a href="#3-6、删除操作" class="headerlink" title="3.6、删除操作"></a>3.6、删除操作</h3><ul><li><p><strong>单个删除</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//根据id删除</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userDao.deleteById(<span class="number">7</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除成功:&quot;</span> + i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>批量删除</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">batchDelete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//批量删除</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userDao.deleteBatchIds(Arrays.asList(<span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;批量删除成功:&quot;</span> + i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>指定字段删除</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">mapDelete</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">//通过map自定义删除条件</span></span><br><span class="line">      HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">      map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">      map.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userDao.deleteByMap(map);</span><br><span class="line">      System.out.println(<span class="string">&quot;删除成功:&quot;</span> + i);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-7、逻辑删除"><a href="#3-7、逻辑删除" class="headerlink" title="3.7、逻辑删除"></a>3.7、逻辑删除</h3><p>所谓逻辑删除，并不是真的删除数据，而是修改数据的状态，数据仍在数据库中。通俗的说就是删除不是执行的delete，而是执行的update。</p><ul><li><p><strong>数据库新增deleted字段，默认值为0</strong></p></li><li><p><strong>实体类新增deleted字段</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//逻辑删除</span></span><br><span class="line">  <span class="meta">@TableLogic</span></span><br><span class="line">  <span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure></li><li><p><strong>SpringBoot配置文件中进行配置</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置逻辑删除</span></span><br><span class="line"><span class="comment">#全局逻辑删除的实体字段名</span></span><br><span class="line"><span class="attr">mybatis-plus.global-config.db-config.logic-delete-field</span>=<span class="string">deleted</span></span><br><span class="line"><span class="comment">#逻辑已删除值(默认为1)</span></span><br><span class="line"><span class="attr">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#逻辑未删除值(默认为0)</span></span><br><span class="line"><span class="attr">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure></li><li><p><strong>测试逻辑删除</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">logicDelete</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//逻辑删除</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userDao.deleteById(<span class="number">13</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;受影响的行数:&quot;</span> + i);</span><br><span class="line">  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/img/758635689.png"></p><p>  再次进行查询时会默认的不去查询已经删除的数据(deleted字段为1的数据)</p></li></ul><h3 id="3-8、性能分析插件"><a href="#3-8、性能分析插件" class="headerlink" title="3.8、性能分析插件"></a>3.8、性能分析插件</h3><p>Mybatis-Plus内置的性能分析插件可以帮我们去检测每条sql的执行时间，以及设置最大执行时间如果超过该时间则会抛出异常。</p><ul><li><p><strong>注册插件</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sql执行效率插件</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">  <span class="comment">// @Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)// 设置 dev test 环境开启，保证我们的效率</span></span><br><span class="line">   <span class="keyword">public</span> PerformanceInterceptor <span class="title function_">performanceInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">PerformanceInterceptor</span> <span class="variable">performanceInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">               <span class="title class_">PerformanceInterceptor</span>();</span><br><span class="line">       performanceInterceptor.setMaxTime(<span class="number">100</span>); <span class="comment">// ms设置sql执行的最大时间，如果超过了则不执行</span></span><br><span class="line">  </span><br><span class="line">       performanceInterceptor.setFormat(<span class="literal">true</span>); <span class="comment">// 是否格式化代码</span></span><br><span class="line">       <span class="keyword">return</span> performanceInterceptor;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p><strong>发送sql测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">performance</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userDao.selectList(<span class="literal">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://images.hckun.cn/img/4786345.png"></p></li></ul><h3 id="3-9、条件构造器"><a href="#3-9、条件构造器" class="headerlink" title="3.9、条件构造器"></a>3.9、条件构造器</h3><p>条件构造器可以让我们去写一些比较复杂的sql语句，通过调用方法来拼接我们所需要的sql语句。</p><p><img src="https://images.hckun.cn/img/875783.png"></p><p>我们以其中的几个为例进行测试</p><ul><li><p><strong>test1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">wrapper1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//查询姓名、生日不为空、年龄大于12的用户</span></span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper</span><br><span class="line">                .isNotNull(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">                .isNotNull(<span class="string">&quot;birth&quot;</span>)</span><br><span class="line">                .ge(<span class="string">&quot;age&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        List&lt;User&gt; users = userDao.selectList(queryWrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>test2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">wrapper2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//根据名字查询</span></span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper</span><br><span class="line">                .eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        <span class="comment">//查询一个</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.selectOne(queryWrapper);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">//查询多个</span></span><br><span class="line">        List&lt;User&gt; users = userDao.selectList(queryWrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>test3</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">wrapper3</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//查询年龄在19-20之间的用户</span></span><br><span class="line">       QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper</span><br><span class="line">               .between(<span class="string">&quot;age&quot;</span>, <span class="number">19</span>, <span class="number">20</span>);</span><br><span class="line">       <span class="comment">//查询多个</span></span><br><span class="line">       List&lt;User&gt; users = userDao.selectList(queryWrapper);</span><br><span class="line">       users.forEach(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>test4</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">wrapper4</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//模糊查询</span></span><br><span class="line">       QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//LIKE &#x27;%值%&#x27;    likeLeft &#x27;%值&#x27;    likeRight  &#x27;值%&#x27;</span></span><br><span class="line">       queryWrapper</span><br><span class="line">               .like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;e&quot;</span>);</span><br><span class="line">       <span class="comment">//查询多个</span></span><br><span class="line">       List&lt;User&gt; users = userDao.selectList(queryWrapper);</span><br><span class="line">       users.forEach(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>test5</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">wrapper5</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//子查询</span></span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//查询年龄大于18的数据</span></span><br><span class="line">        queryWrapper</span><br><span class="line">                .inSql(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;select age from mp where age &gt; 18&quot;</span>);</span><br><span class="line">        <span class="comment">//查询多个</span></span><br><span class="line">        List&lt;Object&gt; users = userDao.selectObjs(queryWrapper);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>test6</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">wrapper6</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//排序</span></span><br><span class="line">       QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//按年龄降序查询</span></span><br><span class="line">       queryWrapper</span><br><span class="line">               .orderByDesc(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">       <span class="comment">//查询多个</span></span><br><span class="line">       List&lt;User&gt; users = userDao.selectList(queryWrapper);</span><br><span class="line">       users.forEach(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4、自动生成器"><a href="#4、自动生成器" class="headerlink" title="4、自动生成器"></a>4、自动生成器</h2><p>为了提高开发的效率Mybatis-Plus为我们提供代码生成器，可以根据数据库表为我们自动的生成实体类、dao、service、controller</p><ul><li><p><strong>添加依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板引擎 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>编写自动生成类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 需要构建一个 代码自动生成器 对象</span></span><br><span class="line">      <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line">      <span class="comment">// 配置策略</span></span><br><span class="line">      <span class="comment">// 1、全局配置</span></span><br><span class="line">      <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">      <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">      gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">      gc.setAuthor(<span class="string">&quot;hckun&quot;</span>);</span><br><span class="line">      gc.setOpen(<span class="literal">false</span>);</span><br><span class="line">      gc.setFileOverride(<span class="literal">false</span>); <span class="comment">// 是否覆盖</span></span><br><span class="line">      gc.setServiceName(<span class="string">&quot;%sService&quot;</span>); <span class="comment">// 去Service的I前缀</span></span><br><span class="line">      gc.setIdType(IdType.ID_WORKER);</span><br><span class="line">      gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">      gc.setSwagger2(<span class="literal">true</span>);</span><br><span class="line">      mpg.setGlobalConfig(gc);</span><br><span class="line">      <span class="comment">//2、设置数据源</span></span><br><span class="line">      <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">      dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/demo?useSSL=false&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8&quot;</span>);</span><br><span class="line">      dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">      dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">      dsc.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">      dsc.setDbType(DbType.MYSQL);</span><br><span class="line">      mpg.setDataSource(dsc);</span><br><span class="line">      <span class="comment">//3、包的配置</span></span><br><span class="line">      <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">      pc.setModuleName(<span class="string">&quot;blog&quot;</span>);</span><br><span class="line">      pc.setParent(<span class="string">&quot;cn.hckun&quot;</span>);</span><br><span class="line">      pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">      pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">      pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">      pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">      mpg.setPackageInfo(pc);</span><br><span class="line">      <span class="comment">//4、策略配置</span></span><br><span class="line">      <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">      strategy.setInclude(<span class="string">&quot;mp&quot;</span>); <span class="comment">// 设置要映射的表名</span></span><br><span class="line">      strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">      strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">      strategy.setEntityLombokModel(<span class="literal">true</span>); <span class="comment">// 自动lombok；</span></span><br><span class="line">      strategy.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line">      <span class="comment">// 自动填充配置</span></span><br><span class="line">      <span class="type">TableFill</span> <span class="variable">gmtCreate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;create_date&quot;</span>, FieldFill.INSERT);</span><br><span class="line">      <span class="type">TableFill</span> <span class="variable">gmtModified</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;update_date&quot;</span>,</span><br><span class="line">              FieldFill.INSERT_UPDATE);</span><br><span class="line">      ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      tableFills.add(gmtCreate);</span><br><span class="line">      tableFills.add(gmtModified);</span><br><span class="line">      strategy.setTableFillList(tableFills);</span><br><span class="line">      <span class="comment">// 乐观锁</span></span><br><span class="line">      strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">      strategy.setRestControllerStyle(<span class="literal">true</span>);</span><br><span class="line">      strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>);</span><br><span class="line">      mpg.setStrategy(strategy);</span><br><span class="line">      mpg.execute(); <span class="comment">//执行</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>测试查看效果</strong></p><p><img src="https://images.hckun.cn/img/52869354.png"></p><p>至此,Mybatis-Plus的基本使用如上,更多使用请参考官网API文档:<a href="https://mp.baomidou.com/guide/">https://mp.baomidou.com/guide/</a></p><blockquote><center>Mybatis-Plus更新完毕</center></blockquote></li></ul><p><img src="https://images.hckun.cn/img/blog10.png"></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合富文本编辑器Editor</title>
      <link href="/post/8dc18bb0.html"/>
      <url>/post/8dc18bb0.html</url>
      
        <content type="html"><![CDATA[<p>本文参考:<a href="https://blog.csdn.net/weixin_43591980/">兴趣使然の草帽路飞</a></p><h2 id="1、什么是富文本编辑器"><a href="#1、什么是富文本编辑器" class="headerlink" title="1、什么是富文本编辑器"></a>1、什么是富文本编辑器</h2><h3 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h3><p>​    富文本编辑器，Multi-function Text Editor, 简称 MTE, 它提供类似于 Microsoft Word 的编辑功能，容易被不会编写 HTML 的用户并需要设置各种文本格式的用户所喜爱。它的应用也越来越广泛。最先只有 IE 浏览器支持，其它浏览器相继跟进，在功能的丰富性来说，还是 IE 强些。虽然没有一个统一的标准，但对于最基本的功能，各浏览器提供的 API 基本一致，从而使编写一个跨浏览器的富文本编辑器成为可能。</p><h3 id="1-2、常用的几种富文本编辑器"><a href="#1-2、常用的几种富文本编辑器" class="headerlink" title="1.2、常用的几种富文本编辑器"></a>1.2、常用的几种富文本编辑器</h3><ul><li><p><strong>Kindeditor</strong></p><p>KindEditor历史也很长了，用户数也不少，国内某公司出品。免费开源。界面类似于office word，界面和功能中规中矩，文档齐全，使用还算方便。</p><p>　更多介绍及下载：<a href="http://kindeditor.net/demo.php">http://kindeditor.net/demo.php</a></p></li><li><p>bootstrap-wysiwyg</p><p>bootstrap-wysiwyg是基于Bootstrap的轻型、免费开源的富文本编辑器，界面简洁大方。使用需要先引入bootstrap。</p><p>　个人觉得bootstrap-wysiwyg这一长串像乱码一样的名字影响了它的推广和使用~ ~毕竟轻型使用环境还是很多的。</p><p>　更多介绍及下载：<a href="http://mindmup.github.io/bootstrap-wysiwyg/">http://mindmup.github.io/bootstrap-wysiwyg/</a></p></li><li><p><strong>Editor</strong></p><p>Editor.md 是一款开源的、可嵌入的 Markdown 在线编辑器（组件），基于 CodeMirror、jQuery 和 Marked 构建。</p><p>​    官网地址：<a href="https://pandao.github.io/editor.md/">https://pandao.github.io/editor.md/</a></p><p>​    下载地址：<a href="https://pandao.github.io/editor.md/">https://pandao.github.io/editor.md/</a></p><p>这里我们使用的是Editor富文本编辑器，需要提前去官网进行下载。</p><p><img src="http://images.hckun.cn/img/4678953689.png"></p></li></ul><h2 id="2、实际应用"><a href="#2、实际应用" class="headerlink" title="2、实际应用"></a>2、实际应用</h2><h3 id="2-1、环境搭建"><a href="#2-1、环境搭建" class="headerlink" title="2.1、环境搭建"></a>2.1、环境搭建</h3><ol><li><p><strong>数据库表</strong></p><p>我们创建一张简单的数据表,字段有主键、作者、标题、内容，用来存储文章信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `article`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `article`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `author` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) </span><br></pre></td></tr></table></figure></li><li><p><strong>使用ide快速创建一个springboot项目，导入先关依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>dao我们只写我们需要的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ArticleDao</span> &#123;</span><br><span class="line">    <span class="comment">//添加文章</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addArticle</span><span class="params">(Article article)</span>;</span><br><span class="line">    <span class="comment">//根据id查询文章</span></span><br><span class="line">    Article <span class="title function_">getArticle</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapper文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.dao.ArticleDao&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getArticle&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.pojo.Article&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from article</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addArticle&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.pojo.Article&quot;</span>&gt;</span></span><br><span class="line">        insert into article (author, title, content)</span><br><span class="line">        values (#&#123;author&#125;, #&#123;title&#125;, #&#123;content&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>application.properties配置文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment">#数据源</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment">#连接mysql配置,此处为mysql8.0</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/demo?useSSL=false&amp;serverTimezone=GMT%2B8&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment">#mapper文件位置</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:/cn/example/mapper/*.xml</span></span><br><span class="line"><span class="comment">#标准日志输出</span></span><br><span class="line"><span class="attr">mybatis.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-2、集成富文本"><a href="#2-2、集成富文本" class="headerlink" title="2.2、集成富文本"></a>2.2、集成富文本</h3><ol><li><p>将jquery和下载的Editor导入到static目录中</p></li><li><p>在templates目录中创建一个editor.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>富文本编辑页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--editormd.css--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/editor/css/editormd.css&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--为网页引入图标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://www.hckun.cn/images/me.jpg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--构建页面静态元素,标题、作者、文本域--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--博客表单--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;mdEditorForm&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                    标题：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                    作者：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;article-content&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入jquery、editormd.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/jquery.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editor/editormd.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//创建富文本框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> testEditor;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//参数一:绑定给隐藏的文本域,参数二富文本的配置</span></span></span><br><span class="line"><span class="language-javascript">        testEditor = <span class="title function_">editormd</span>(<span class="string">&quot;article-content&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">width</span>: <span class="string">&quot;95%&quot;</span>,<span class="comment">//宽</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">height</span>: <span class="number">600</span>,<span class="comment">//高</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">syncScrolling</span>: <span class="string">&quot;single&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&quot;../editor/lib/&quot;</span>,<span class="comment">//加载编辑器lib路径</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">saveHTMLToTextarea</span>: <span class="literal">true</span>,    <span class="comment">// 保存 HTML 到 Textarea</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">emoji</span>: <span class="literal">true</span>,<span class="comment">//功能开启表情</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">theme</span>: <span class="string">&quot;dark&quot;</span>,<span class="comment">//工具栏主题</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">previewTheme</span>: <span class="string">&quot;white&quot;</span>,<span class="comment">//预览主题</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">editorTheme</span>: <span class="string">&quot;white&quot;</span>,<span class="comment">//编辑主题</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tex</span>: <span class="literal">true</span>,                   <span class="comment">// 开启科学公式TeX语言支持，默认关闭</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">flowChart</span>: <span class="literal">true</span>,             <span class="comment">// 开启流程图支持，默认关闭</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sequenceDiagram</span>: <span class="literal">true</span>,       <span class="comment">// 开启时序/序列图支持，默认关闭,</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//图片上传</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">imageUpload</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">imageFormats</span>: [<span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;gif&quot;</span>, <span class="string">&quot;png&quot;</span>, <span class="string">&quot;bmp&quot;</span>, <span class="string">&quot;webp&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">imageUploadURL</span>: <span class="string">&quot;/article/upload&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">onload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onload&#x27;</span>, <span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*指定需要显示的功能按钮*/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">toolbarIcons</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> [<span class="string">&quot;undo&quot;</span>, <span class="string">&quot;redo&quot;</span>, <span class="string">&quot;|&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;bold&quot;</span>, <span class="string">&quot;del&quot;</span>, <span class="string">&quot;italic&quot;</span>, <span class="string">&quot;quote&quot;</span>, <span class="string">&quot;ucwords&quot;</span>, <span class="string">&quot;uppercase&quot;</span>, <span class="string">&quot;lowercase&quot;</span>, <span class="string">&quot;|&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;h1&quot;</span>, <span class="string">&quot;h2&quot;</span>, <span class="string">&quot;h3&quot;</span>, <span class="string">&quot;h4&quot;</span>, <span class="string">&quot;h5&quot;</span>, <span class="string">&quot;h6&quot;</span>, <span class="string">&quot;|&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;list-ul&quot;</span>, <span class="string">&quot;list-ol&quot;</span>, <span class="string">&quot;hr&quot;</span>, <span class="string">&quot;|&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;link&quot;</span>, <span class="string">&quot;reference-link&quot;</span>, <span class="string">&quot;image&quot;</span>, <span class="string">&quot;code&quot;</span>, <span class="string">&quot;preformatted-text&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;code-block&quot;</span>, <span class="string">&quot;table&quot;</span>, <span class="string">&quot;datetime&quot;</span>, <span class="string">&quot;emoji&quot;</span>, <span class="string">&quot;html-entities&quot;</span>, <span class="string">&quot;pagebreak&quot;</span>, <span class="string">&quot;|&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;goto-line&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;preview&quot;</span>, <span class="string">&quot;fullscreen&quot;</span>, <span class="string">&quot;clear&quot;</span>, <span class="string">&quot;search&quot;</span>, <span class="string">&quot;|&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;help&quot;</span>, <span class="string">&quot;info&quot;</span>, <span class="string">&quot;releaseIcon&quot;</span>, <span class="string">&quot;index&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*自定义功能按钮，下面我自定义了2个，一个是发布，一个是返回首页*/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">toolbarIconTexts</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">releaseIcon</span>: <span class="string">&quot;&lt;span bgcolor=\&quot;gray\&quot;&gt;发布&lt;/span&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">index</span>: <span class="string">&quot;&lt;span bgcolor=\&quot;red\&quot;&gt;返回首页&lt;/span&gt;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*给自定义按钮指定回调函数*/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">toolbarHandlers</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                releaseIcon : <span class="keyword">function</span>(<span class="params">cm, icon, cursor, selection</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//表单提交</span></span></span><br><span class="line"><span class="language-javascript">                    mdEditorForm.<span class="property">method</span> = <span class="string">&quot;post&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    mdEditorForm.<span class="property">action</span> = <span class="string">&quot;/article/addArticle&quot;</span>;<span class="comment">//提交至服务器的路径</span></span></span><br><span class="line"><span class="language-javascript">                    mdEditorForm.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                index : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;/&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个控制器,跳转到此页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/article&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleDao articleDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toEditor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;editor&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>浏览器访问</p><p><img src="http://images.hckun.cn/img/8758573.png"></p></li></ol><h3 id="2-3、添加文章"><a href="#2-3、添加文章" class="headerlink" title="2.3、添加文章"></a>2.3、添加文章</h3><ol><li><p>开发添加文章controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/addArticle&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">addArticle</span><span class="params">(Article article)</span> &#123;</span><br><span class="line">       System.out.println(article);</span><br><span class="line">       articleDao.addArticle(article);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;editor&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>测试添加文章,数据成功的进入数据库</p></li></ol><h3 id="2-4、查询文章"><a href="#2-4、查询文章" class="headerlink" title="2.4、查询文章"></a>2.4、查询文章</h3><ol><li><p>创建文章展示页面main.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;article.title&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--文章头部信息：标题，作者，最后更新日期，导航--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;margin: auto 0&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;article.title&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    作者：<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;float: left&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;article.author&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--文章主体内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;doc-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;markdown&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;article.content&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/editor/css/editormd.preview.css&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/jquery.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editor/lib/marked.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editor/lib/prettify.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editor/lib/raphael.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editor/lib/underscore.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editor/lib/sequence-diagram.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editor/lib/flowchart.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editor/lib/jquery.flowchart.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/editor/editormd.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> testEditor;</span></span><br><span class="line"><span class="language-javascript">    $(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        testEditor = editormd.<span class="title function_">markdownToHTML</span>(<span class="string">&quot;doc-content&quot;</span>, &#123;<span class="comment">//注意：这里是上面DIV的id</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">htmlDecode</span>: <span class="string">&quot;style,script,iframe&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">emoji</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">taskList</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tocm</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tex</span>: <span class="literal">true</span>, <span class="comment">// 默认不解析</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">flowChart</span>: <span class="literal">true</span>, <span class="comment">// 默认不解析</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">sequenceDiagram</span>: <span class="literal">true</span>, <span class="comment">// 默认不解析</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">codeFold</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>开发查询文章接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getArticle/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toMain</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id, Model model)</span> &#123;</span><br><span class="line">       <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> articleDao.getArticle(id);</span><br><span class="line">       model.addAttribute(<span class="string">&quot;article&quot;</span>, article);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>测试查看文章展示效果</p><p><img src="http://images.hckun.cn/img/85728763586.png"></p></li></ol><h3 id="2-5、图片上传"><a href="#2-5、图片上传" class="headerlink" title="2.5、图片上传"></a>2.5、图片上传</h3><ol><li><p>editor.html中增加配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图片上传</span></span><br><span class="line">        <span class="attr">imageUpload</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">imageFormats</span>: [<span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;gif&quot;</span>, <span class="string">&quot;png&quot;</span>, <span class="string">&quot;bmp&quot;</span>, <span class="string">&quot;webp&quot;</span>],</span><br><span class="line">        <span class="attr">imageUploadURL</span>: <span class="string">&quot;/article/upload&quot;</span>,</span><br><span class="line">        <span class="attr">onload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;onload&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure></li><li><p>开发文件上传接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="keyword">public</span> JSONObject <span class="title function_">fileUpload</span><span class="params">(<span class="meta">@RequestParam(value = &quot;editormd-image-file&quot;, required = true)</span> MultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="comment">//附件在项目中的上传路径</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> ResourceUtils.getURL(<span class="string">&quot;classpath:&quot;</span>).getPath() + <span class="string">&quot;static/files/&quot;</span>;</span><br><span class="line">      <span class="comment">//按月对文件进行存储</span></span><br><span class="line">      <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">      <span class="type">String</span> <span class="variable">month</span> <span class="operator">=</span> (calendar.get(Calendar.MONTH) + <span class="number">1</span>) + <span class="string">&quot;月&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> path + month;</span><br><span class="line">      <span class="comment">//完整的附件路径</span></span><br><span class="line">      <span class="type">File</span> <span class="variable">projectPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">      <span class="comment">//文件不存在创建</span></span><br><span class="line">      <span class="keyword">if</span> (!projectPath.exists()) &#123;</span><br><span class="line">          <span class="comment">//此时创建的目录在我们的resource中是找不到的,文件在编译之后的target目录中</span></span><br><span class="line">          System.out.println(<span class="string">&quot;创建目录上传路径为:&quot;</span> + filePath);</span><br><span class="line">          projectPath.mkdirs();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//给文件重命名</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">newFileName</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) + file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">      <span class="comment">//上传</span></span><br><span class="line">      file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(filePath + <span class="string">&quot;/&quot;</span> + newFileName));</span><br><span class="line">      <span class="comment">//给editormd进行回调</span></span><br><span class="line">      <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">      jsonObject.put(<span class="string">&quot;url&quot;</span>,<span class="string">&quot;/files/&quot;</span>+month+<span class="string">&quot;/&quot;</span>+newFileName);</span><br><span class="line">      jsonObject.put(<span class="string">&quot;success&quot;</span>,<span class="number">1</span>);</span><br><span class="line">      jsonObject.put(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;文件上传成功&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> jsonObject;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>测试文件上传及回显效果</p><p>路径成功的回显</p><p><img src="http://images.hckun.cn/img/578685.png"></p><pre><code>文件也已经保存在服务端</code></pre></li></ol><p>​        <img src="http://images.hckun.cn/img/89653368935.png"></p><p>​        图片成功回显在文本框中</p><p>​        <img src="http://images.hckun.cn/img/586358935.png"></p><p>​    <strong>完美集成,可以开心的写文章了</strong></p><blockquote><center>SpringBoot整合富文本编辑器Editor.md完结</center></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件集成 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
